/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  CreateAcceptEnum,
  destinationsCreate,
} from "../funcs/destinationsCreate.js";
import { destinationsDelete } from "../funcs/destinationsDelete.js";
import { destinationsGet, GetAcceptEnum } from "../funcs/destinationsGet.js";
import { destinationsList, ListAcceptEnum } from "../funcs/destinationsList.js";
import {
  destinationsUpdate,
  UpdateAcceptEnum,
} from "../funcs/destinationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { CreateAcceptEnum } from "../funcs/destinationsCreate.js";

export { ListAcceptEnum } from "../funcs/destinationsList.js";

export { GetAcceptEnum } from "../funcs/destinationsGet.js";

export { UpdateAcceptEnum } from "../funcs/destinationsUpdate.js";

export class Destinations extends ClientSDK {
  /**
   * Create a new destination
   */
  async create(
    request: operations.CreateDestinationRequest,
    options?: RequestOptions & { acceptHeaderOverride?: CreateAcceptEnum },
  ): Promise<operations.CreateDestinationResponse> {
    return unwrapAsync(destinationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List destinations
   */
  async list(
    request: operations.ListDestinationsRequest,
    options?: RequestOptions & { acceptHeaderOverride?: ListAcceptEnum },
  ): Promise<operations.ListDestinationsResponse> {
    return unwrapAsync(destinationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a destination
   */
  async get(
    request: operations.GetDestinationRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetAcceptEnum },
  ): Promise<operations.GetDestinationResponse> {
    return unwrapAsync(destinationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a destination
   */
  async update(
    request: operations.UpdateDestinationRequest,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateAcceptEnum },
  ): Promise<operations.UpdateDestinationResponse> {
    return unwrapAsync(destinationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a destination
   */
  async delete(
    request: operations.DeleteDestinationRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteDestinationAPIProblem | undefined> {
    return unwrapAsync(destinationsDelete(
      this,
      request,
      options,
    ));
  }
}
