/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  CreateAcceptEnum,
  providerAppsCreate,
} from "../funcs/providerAppsCreate.js";
import { providerAppsDelete } from "../funcs/providerAppsDelete.js";
import { ListAcceptEnum, providerAppsList } from "../funcs/providerAppsList.js";
import {
  providerAppsUpdate,
  UpdateAcceptEnum,
} from "../funcs/providerAppsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { ListAcceptEnum } from "../funcs/providerAppsList.js";

export { CreateAcceptEnum } from "../funcs/providerAppsCreate.js";

export { UpdateAcceptEnum } from "../funcs/providerAppsUpdate.js";

export class ProviderApps extends ClientSDK {
  /**
   * List provider apps
   */
  async list(
    request: operations.ListProviderAppsRequest,
    options?: RequestOptions & { acceptHeaderOverride?: ListAcceptEnum },
  ): Promise<operations.ListProviderAppsResponse> {
    return unwrapAsync(providerAppsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new provider app
   */
  async create(
    request: operations.CreateProviderAppRequest,
    options?: RequestOptions & { acceptHeaderOverride?: CreateAcceptEnum },
  ): Promise<operations.CreateProviderAppResponse> {
    return unwrapAsync(providerAppsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a provider app.
   */
  async delete(
    request: operations.DeleteProviderAppRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteProviderAppAPIProblem | undefined> {
    return unwrapAsync(providerAppsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a provider app
   */
  async update(
    request: operations.UpdateProviderAppRequest,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateAcceptEnum },
  ): Promise<operations.UpdateProviderAppResponse> {
    return unwrapAsync(providerAppsUpdate(
      this,
      request,
      options,
    ));
  }
}
