/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SDKNodePlatformCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$connectionsDelete } from "./tools/connectionsDelete.js";
import { tool$connectionsGenerate } from "./tools/connectionsGenerate.js";
import { tool$connectionsGet } from "./tools/connectionsGet.js";
import { tool$connectionsList } from "./tools/connectionsList.js";
import { tool$connectionsUpdate } from "./tools/connectionsUpdate.js";
import { tool$consumersCreate } from "./tools/consumersCreate.js";
import { tool$destinationsCreate } from "./tools/destinationsCreate.js";
import { tool$destinationsDelete } from "./tools/destinationsDelete.js";
import { tool$destinationsGet } from "./tools/destinationsGet.js";
import { tool$destinationsList } from "./tools/destinationsList.js";
import { tool$destinationsUpdate } from "./tools/destinationsUpdate.js";
import { tool$groupsCreate } from "./tools/groupsCreate.js";
import { tool$installationsCreate } from "./tools/installationsCreate.js";
import { tool$installationsDelete } from "./tools/installationsDelete.js";
import { tool$installationsGet } from "./tools/installationsGet.js";
import { tool$installationsList } from "./tools/installationsList.js";
import { tool$installationsUpdate } from "./tools/installationsUpdate.js";
import { tool$integrationsBatchUpsert } from "./tools/integrationsBatchUpsert.js";
import { tool$integrationsCreate } from "./tools/integrationsCreate.js";
import { tool$integrationsDelete } from "./tools/integrationsDelete.js";
import { tool$integrationsList } from "./tools/integrationsList.js";
import { tool$oauthConnect } from "./tools/oauthConnect.js";
import { tool$oauthUpdate } from "./tools/oauthUpdate.js";
import { tool$objectsAndFieldsGetMetadata } from "./tools/objectsAndFieldsGetMetadata.js";
import { tool$objectsAndFieldsGetObjectMetadataForConnection } from "./tools/objectsAndFieldsGetObjectMetadataForConnection.js";
import { tool$operationsGet } from "./tools/operationsGet.js";
import { tool$operationsList } from "./tools/operationsList.js";
import { tool$operationsListLogs } from "./tools/operationsListLogs.js";
import { tool$projectsCreate } from "./tools/projectsCreate.js";
import { tool$projectsDelete } from "./tools/projectsDelete.js";
import { tool$projectsGet } from "./tools/projectsGet.js";
import { tool$projectsList } from "./tools/projectsList.js";
import { tool$projectsUpdate } from "./tools/projectsUpdate.js";
import { tool$providerAppsCreate } from "./tools/providerAppsCreate.js";
import { tool$providerAppsDelete } from "./tools/providerAppsDelete.js";
import { tool$providerAppsList } from "./tools/providerAppsList.js";
import { tool$providerAppsUpdate } from "./tools/providerAppsUpdate.js";
import { tool$providersGet } from "./tools/providersGet.js";
import { tool$providersList } from "./tools/providersList.js";
import { tool$revisionsCreate } from "./tools/revisionsCreate.js";
import { tool$revisionsHydrate } from "./tools/revisionsHydrate.js";
import { tool$uploadUrlsGenerate } from "./tools/uploadUrlsGenerate.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  apiKeyHeader?: SDKOptions["apiKeyHeader"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "SDKNodePlatform",
    version: "0.2.1",
  });

  const client = new SDKNodePlatformCore({
    apiKeyHeader: deps.apiKeyHeader,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$oauthConnect);
  tool(tool$oauthUpdate);
  tool(tool$projectsList);
  tool(tool$projectsCreate);
  tool(tool$projectsGet);
  tool(tool$projectsDelete);
  tool(tool$projectsUpdate);
  tool(tool$providerAppsList);
  tool(tool$providerAppsCreate);
  tool(tool$providerAppsDelete);
  tool(tool$providerAppsUpdate);
  tool(tool$integrationsList);
  tool(tool$integrationsCreate);
  tool(tool$integrationsDelete);
  tool(tool$integrationsBatchUpsert);
  tool(tool$revisionsCreate);
  tool(tool$revisionsHydrate);
  tool(tool$installationsList);
  tool(tool$installationsCreate);
  tool(tool$installationsGet);
  tool(tool$installationsDelete);
  tool(tool$installationsUpdate);
  tool(tool$objectsAndFieldsGetMetadata);
  tool(tool$objectsAndFieldsGetObjectMetadataForConnection);
  tool(tool$operationsList);
  tool(tool$operationsGet);
  tool(tool$operationsListLogs);
  tool(tool$providersList);
  tool(tool$providersGet);
  tool(tool$connectionsList);
  tool(tool$connectionsGenerate);
  tool(tool$connectionsGet);
  tool(tool$connectionsUpdate);
  tool(tool$connectionsDelete);
  tool(tool$groupsCreate);
  tool(tool$consumersCreate);
  tool(tool$destinationsCreate);
  tool(tool$destinationsList);
  tool(tool$destinationsGet);
  tool(tool$destinationsUpdate);
  tool(tool$destinationsDelete);
  tool(tool$uploadUrlsGenerate);

  return server;
}
