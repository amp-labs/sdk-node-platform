/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListProviderAppsRequest = {
  /**
   * TThe Ampersand project ID or project name.
   */
  projectIdOrName: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListProviderAppsAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type ListProviderAppsProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type ListProviderAppsResponse =
  | ListProviderAppsAPIProblem
  | Array<ListProviderAppsProviderApp>;

/** @internal */
export const ListProviderAppsRequest$inboundSchema: z.ZodType<
  ListProviderAppsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
});

/** @internal */
export type ListProviderAppsRequest$Outbound = {
  projectIdOrName: string;
};

/** @internal */
export const ListProviderAppsRequest$outboundSchema: z.ZodType<
  ListProviderAppsRequest$Outbound,
  z.ZodTypeDef,
  ListProviderAppsRequest
> = z.object({
  projectIdOrName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProviderAppsRequest$ {
  /** @deprecated use `ListProviderAppsRequest$inboundSchema` instead. */
  export const inboundSchema = ListProviderAppsRequest$inboundSchema;
  /** @deprecated use `ListProviderAppsRequest$outboundSchema` instead. */
  export const outboundSchema = ListProviderAppsRequest$outboundSchema;
  /** @deprecated use `ListProviderAppsRequest$Outbound` instead. */
  export type Outbound = ListProviderAppsRequest$Outbound;
}

export function listProviderAppsRequestToJSON(
  listProviderAppsRequest: ListProviderAppsRequest,
): string {
  return JSON.stringify(
    ListProviderAppsRequest$outboundSchema.parse(listProviderAppsRequest),
  );
}

export function listProviderAppsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListProviderAppsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProviderAppsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProviderAppsRequest' from JSON`,
  );
}

/** @internal */
export const ListProviderAppsAPIProblem$inboundSchema: z.ZodType<
  ListProviderAppsAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListProviderAppsAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListProviderAppsAPIProblem$outboundSchema: z.ZodType<
  ListProviderAppsAPIProblem$Outbound,
  z.ZodTypeDef,
  ListProviderAppsAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProviderAppsAPIProblem$ {
  /** @deprecated use `ListProviderAppsAPIProblem$inboundSchema` instead. */
  export const inboundSchema = ListProviderAppsAPIProblem$inboundSchema;
  /** @deprecated use `ListProviderAppsAPIProblem$outboundSchema` instead. */
  export const outboundSchema = ListProviderAppsAPIProblem$outboundSchema;
  /** @deprecated use `ListProviderAppsAPIProblem$Outbound` instead. */
  export type Outbound = ListProviderAppsAPIProblem$Outbound;
}

export function listProviderAppsAPIProblemToJSON(
  listProviderAppsAPIProblem: ListProviderAppsAPIProblem,
): string {
  return JSON.stringify(
    ListProviderAppsAPIProblem$outboundSchema.parse(listProviderAppsAPIProblem),
  );
}

export function listProviderAppsAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<ListProviderAppsAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProviderAppsAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProviderAppsAPIProblem' from JSON`,
  );
}

/** @internal */
export const ListProviderAppsProviderApp$inboundSchema: z.ZodType<
  ListProviderAppsProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListProviderAppsProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const ListProviderAppsProviderApp$outboundSchema: z.ZodType<
  ListProviderAppsProviderApp$Outbound,
  z.ZodTypeDef,
  ListProviderAppsProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProviderAppsProviderApp$ {
  /** @deprecated use `ListProviderAppsProviderApp$inboundSchema` instead. */
  export const inboundSchema = ListProviderAppsProviderApp$inboundSchema;
  /** @deprecated use `ListProviderAppsProviderApp$outboundSchema` instead. */
  export const outboundSchema = ListProviderAppsProviderApp$outboundSchema;
  /** @deprecated use `ListProviderAppsProviderApp$Outbound` instead. */
  export type Outbound = ListProviderAppsProviderApp$Outbound;
}

export function listProviderAppsProviderAppToJSON(
  listProviderAppsProviderApp: ListProviderAppsProviderApp,
): string {
  return JSON.stringify(
    ListProviderAppsProviderApp$outboundSchema.parse(
      listProviderAppsProviderApp,
    ),
  );
}

export function listProviderAppsProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<ListProviderAppsProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProviderAppsProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProviderAppsProviderApp' from JSON`,
  );
}

/** @internal */
export const ListProviderAppsResponse$inboundSchema: z.ZodType<
  ListProviderAppsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListProviderAppsAPIProblem$inboundSchema),
  z.array(z.lazy(() => ListProviderAppsProviderApp$inboundSchema)),
]);

/** @internal */
export type ListProviderAppsResponse$Outbound =
  | ListProviderAppsAPIProblem$Outbound
  | Array<ListProviderAppsProviderApp$Outbound>;

/** @internal */
export const ListProviderAppsResponse$outboundSchema: z.ZodType<
  ListProviderAppsResponse$Outbound,
  z.ZodTypeDef,
  ListProviderAppsResponse
> = z.union([
  z.lazy(() => ListProviderAppsAPIProblem$outboundSchema),
  z.array(z.lazy(() => ListProviderAppsProviderApp$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProviderAppsResponse$ {
  /** @deprecated use `ListProviderAppsResponse$inboundSchema` instead. */
  export const inboundSchema = ListProviderAppsResponse$inboundSchema;
  /** @deprecated use `ListProviderAppsResponse$outboundSchema` instead. */
  export const outboundSchema = ListProviderAppsResponse$outboundSchema;
  /** @deprecated use `ListProviderAppsResponse$Outbound` instead. */
  export type Outbound = ListProviderAppsResponse$Outbound;
}

export function listProviderAppsResponseToJSON(
  listProviderAppsResponse: ListProviderAppsResponse,
): string {
  return JSON.stringify(
    ListProviderAppsResponse$outboundSchema.parse(listProviderAppsResponse),
  );
}

export function listProviderAppsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListProviderAppsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProviderAppsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProviderAppsResponse' from JSON`,
  );
}
