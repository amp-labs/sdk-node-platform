/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The source of the integrations to upsert. One of sourceZipUrl or sourceYaml is required.
 */
export type BatchUpsertIntegrationsRequestBody = {
  /**
   * URL of where a zip of the source files can be downloaded (e.g. Google Cloud Storage URL).
   */
  sourceZipUrl?: string | undefined;
  /**
   * A YAML string that defines the integrations.
   */
  sourceYaml?: string | undefined;
};

export type BatchUpsertIntegrationsRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  requestBody: BatchUpsertIntegrationsRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type BatchUpsertIntegrationsAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent = {
  fieldName: string;
  /**
   * The field name to map to.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to.
   */
  mapToDisplayName?: string | undefined;
};

export type BatchUpsertIntegrationsIntegrationField =
  | BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent
  | BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping;

export type BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

export type BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent =
  {
    fieldName: string;
    /**
     * The field name to map to.
     */
    mapToName?: string | undefined;
    /**
     * The display name to map to.
     */
    mapToDisplayName?: string | undefined;
  };

export type BatchUpsertIntegrationsIntegrationsIntegrationField =
  | BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent
  | BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping;

export const BatchUpsertIntegrationsOptionalFieldsAutoOption = {
  All: "all",
} as const;
export type BatchUpsertIntegrationsOptionalFieldsAutoOption = ClosedEnum<
  typeof BatchUpsertIntegrationsOptionalFieldsAutoOption
>;

export type BatchUpsertIntegrationsDefaultPeriod = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type BatchUpsertIntegrationsBackfill = {
  defaultPeriod: BatchUpsertIntegrationsDefaultPeriod;
};

/**
 * The data delivery mode for this object. If not specified, defaults to automatic.
 */
export const BatchUpsertIntegrationsMode = {
  OnRequest: "onRequest",
  Auto: "auto",
} as const;
/**
 * The data delivery mode for this object. If not specified, defaults to automatic.
 */
export type BatchUpsertIntegrationsMode = ClosedEnum<
  typeof BatchUpsertIntegrationsMode
>;

export type BatchUpsertIntegrationsDelivery = {
  /**
   * The data delivery mode for this object. If not specified, defaults to automatic.
   */
  mode?: BatchUpsertIntegrationsMode | undefined;
  /**
   * The number of records to receive per data delivery.
   */
  pageSize?: number | undefined;
};

export type BatchUpsertIntegrationsIntegrationObject = {
  objectName: string;
  destination: string;
  schedule: string;
  /**
   * An object name to map to.
   */
  mapToName?: string | undefined;
  /**
   * A display name to map to.
   */
  mapToDisplayName?: string | undefined;
  requiredFields?:
    | Array<
      | BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent
      | BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping
    >
    | undefined;
  optionalFields?:
    | Array<
      | BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent
      | BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping
    >
    | undefined;
  optionalFieldsAuto?:
    | BatchUpsertIntegrationsOptionalFieldsAutoOption
    | undefined;
  backfill?: BatchUpsertIntegrationsBackfill | undefined;
  delivery?: BatchUpsertIntegrationsDelivery | undefined;
};

export type BatchUpsertIntegrationsReadIntegration = {
  objects?: Array<BatchUpsertIntegrationsIntegrationObject> | undefined;
};

/**
 * Configuration to set default write values for object fields.
 */
export type BatchUpsertIntegrationsValueDefaults = {
  /**
   * If true, users can set default values for any field.
   */
  allowAnyFields?: boolean | undefined;
};

export type BatchUpsertIntegrationsIntegrationWriteObject = {
  objectName: string;
  /**
   * If true, the write object will inherit the mapping from the read object. If false, the write object will have no mapping.
   */
  inheritMapping?: boolean | undefined;
  /**
   * Configuration to set default write values for object fields.
   */
  valueDefaults?: BatchUpsertIntegrationsValueDefaults | undefined;
};

export type BatchUpsertIntegrationsWriteIntegration = {
  objects?: Array<BatchUpsertIntegrationsIntegrationWriteObject> | undefined;
};

export type BatchUpsertIntegrationsProxyIntegration = {
  enabled?: boolean | undefined;
};

/**
 * If always, the integration will subscribe to create events by default.
 */
export const BatchUpsertIntegrationsEnabled = {
  Always: "always",
} as const;
/**
 * If always, the integration will subscribe to create events by default.
 */
export type BatchUpsertIntegrationsEnabled = ClosedEnum<
  typeof BatchUpsertIntegrationsEnabled
>;

export type BatchUpsertIntegrationsCreateEvent = {
  /**
   * If always, the integration will subscribe to create events by default.
   */
  enabled?: BatchUpsertIntegrationsEnabled | undefined;
};

/**
 * If always, the integration will subscribe to update events by default.
 */
export const BatchUpsertIntegrationsIntegrationsEnabled = {
  Always: "always",
} as const;
/**
 * If always, the integration will subscribe to update events by default.
 */
export type BatchUpsertIntegrationsIntegrationsEnabled = ClosedEnum<
  typeof BatchUpsertIntegrationsIntegrationsEnabled
>;

/**
 * If all, the integration will watch all fields for updates.
 */
export const BatchUpsertIntegrationsWatchFieldsAuto = {
  All: "all",
} as const;
/**
 * If all, the integration will watch all fields for updates.
 */
export type BatchUpsertIntegrationsWatchFieldsAuto = ClosedEnum<
  typeof BatchUpsertIntegrationsWatchFieldsAuto
>;

export type BatchUpsertIntegrationsUpdateEvent = {
  /**
   * If always, the integration will subscribe to update events by default.
   */
  enabled?: BatchUpsertIntegrationsIntegrationsEnabled | undefined;
  /**
   * If all, the integration will watch all fields for updates.
   */
  watchFieldsAuto?: BatchUpsertIntegrationsWatchFieldsAuto | undefined;
  requiredWatchFields?: Array<string> | undefined;
};

/**
 * If always, the integration will subscribe to delete events by default.
 */
export const BatchUpsertIntegrationsIntegrationsResponseEnabled = {
  Always: "always",
} as const;
/**
 * If always, the integration will subscribe to delete events by default.
 */
export type BatchUpsertIntegrationsIntegrationsResponseEnabled = ClosedEnum<
  typeof BatchUpsertIntegrationsIntegrationsResponseEnabled
>;

export type BatchUpsertIntegrationsDeleteEvent = {
  /**
   * If always, the integration will subscribe to delete events by default.
   */
  enabled?: BatchUpsertIntegrationsIntegrationsResponseEnabled | undefined;
};

/**
 * If always, the integration will subscribe to association change events.
 */
export const BatchUpsertIntegrationsIntegrationsResponse200Enabled = {
  Always: "always",
} as const;
/**
 * If always, the integration will subscribe to association change events.
 */
export type BatchUpsertIntegrationsIntegrationsResponse200Enabled = ClosedEnum<
  typeof BatchUpsertIntegrationsIntegrationsResponse200Enabled
>;

export type BatchUpsertIntegrationsAssociationChangeEvent = {
  /**
   * If always, the integration will subscribe to association change events.
   */
  enabled?: BatchUpsertIntegrationsIntegrationsResponse200Enabled | undefined;
  /**
   * If true, the integration will include full records in the event payload.
   */
  includeFullRecords?: boolean | undefined;
};

export type BatchUpsertIntegrationsIntegrationSubscribeObject = {
  objectName: string;
  destination: string;
  /**
   * If true, the integration will inherit the fields and mapping from the read object.
   */
  inheritFieldsAndMapping?: boolean | undefined;
  createEvent?: BatchUpsertIntegrationsCreateEvent | undefined;
  updateEvent?: BatchUpsertIntegrationsUpdateEvent | undefined;
  deleteEvent?: BatchUpsertIntegrationsDeleteEvent | undefined;
  associationChangeEvent?:
    | BatchUpsertIntegrationsAssociationChangeEvent
    | undefined;
  otherEvents?: Array<string> | undefined;
};

export type BatchUpsertIntegrationsSubscribeIntegration = {
  objects?:
    | Array<BatchUpsertIntegrationsIntegrationSubscribeObject>
    | undefined;
};

export type BatchUpsertIntegrationsIntegrationsIntegration = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: BatchUpsertIntegrationsReadIntegration | undefined;
  write?: BatchUpsertIntegrationsWriteIntegration | undefined;
  proxy?: BatchUpsertIntegrationsProxyIntegration | undefined;
  subscribe?: BatchUpsertIntegrationsSubscribeIntegration | undefined;
};

export type BatchUpsertIntegrationsRevision = {
  /**
   * The revision ID.
   */
  id: string;
  /**
   * The spec version string.
   */
  specVersion: string;
  /**
   * The time the revision was created.
   */
  createTime: Date;
  content: BatchUpsertIntegrationsIntegrationsIntegration;
};

export type BatchUpsertIntegrationsIntegration = {
  /**
   * The integration ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration name.
   */
  name: string;
  /**
   * The SaaS provider that this integration connects to.
   */
  provider: string;
  /**
   * The time the integration was created.
   */
  createTime: Date;
  /**
   * The time the integration was last updated.
   */
  updateTime?: Date | undefined;
  latestRevision: BatchUpsertIntegrationsRevision;
};

export type BatchUpsertIntegrationsResponse =
  | BatchUpsertIntegrationsAPIProblem
  | Array<BatchUpsertIntegrationsIntegration>;

/** @internal */
export const BatchUpsertIntegrationsRequestBody$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourceZipUrl: z.string().optional(),
  sourceYaml: z.string().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsRequestBody$Outbound = {
  sourceZipUrl?: string | undefined;
  sourceYaml?: string | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsRequestBody$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequestBody$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRequestBody
> = z.object({
  sourceZipUrl: z.string().optional(),
  sourceYaml: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRequestBody$ {
  /** @deprecated use `BatchUpsertIntegrationsRequestBody$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsRequestBody$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsRequestBody$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequestBody$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRequestBody$Outbound;
}

export function batchUpsertIntegrationsRequestBodyToJSON(
  batchUpsertIntegrationsRequestBody: BatchUpsertIntegrationsRequestBody,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRequestBody$outboundSchema.parse(
      batchUpsertIntegrationsRequestBody,
    ),
  );
}

export function batchUpsertIntegrationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRequestBody' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsRequest$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  RequestBody: z.lazy(() => BatchUpsertIntegrationsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BatchUpsertIntegrationsRequest$Outbound = {
  projectIdOrName: string;
  RequestBody: BatchUpsertIntegrationsRequestBody$Outbound;
};

/** @internal */
export const BatchUpsertIntegrationsRequest$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequest$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRequest
> = z.object({
  projectIdOrName: z.string(),
  requestBody: z.lazy(() => BatchUpsertIntegrationsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRequest$ {
  /** @deprecated use `BatchUpsertIntegrationsRequest$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsRequest$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequest$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsRequest$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequest$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRequest$Outbound;
}

export function batchUpsertIntegrationsRequestToJSON(
  batchUpsertIntegrationsRequest: BatchUpsertIntegrationsRequest,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRequest$outboundSchema.parse(
      batchUpsertIntegrationsRequest,
    ),
  );
}

export function batchUpsertIntegrationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRequest' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsAPIProblem$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type BatchUpsertIntegrationsAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsAPIProblem$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsAPIProblem$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsAPIProblem$ {
  /** @deprecated use `BatchUpsertIntegrationsAPIProblem$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsAPIProblem$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsAPIProblem$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsAPIProblem$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsAPIProblem$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsAPIProblem$Outbound;
}

export function batchUpsertIntegrationsAPIProblemToJSON(
  batchUpsertIntegrationsAPIProblem: BatchUpsertIntegrationsAPIProblem,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsAPIProblem$outboundSchema.parse(
      batchUpsertIntegrationsAPIProblem,
    ),
  );
}

export function batchUpsertIntegrationsAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsAPIProblem' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

/** @internal */
export const BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound` instead. */
  export type Outbound =
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound;
}

export function batchUpsertIntegrationsIntegrationFieldIntegrationFieldMappingToJSON(
  batchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping:
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema
      .parse(batchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping),
  );
}

export function batchUpsertIntegrationsIntegrationFieldIntegrationFieldMappingFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fieldName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound =
  {
    fieldName: string;
    mapToName?: string | undefined;
    mapToDisplayName?: string | undefined;
  };

/** @internal */
export const BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent
  > = z.object({
    fieldName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound` instead. */
  export type Outbound =
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound;
}

export function batchUpsertIntegrationsIntegrationFieldIntegrationFieldExistentToJSON(
  batchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent:
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema
      .parse(batchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent),
  );
}

export function batchUpsertIntegrationsIntegrationFieldIntegrationFieldExistentFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationField$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsIntegrationField,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema
  ),
  z.lazy(() =>
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema
  ),
]);

/** @internal */
export type BatchUpsertIntegrationsIntegrationField$Outbound =
  | BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound
  | BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound;

/** @internal */
export const BatchUpsertIntegrationsIntegrationField$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsIntegrationField$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsIntegrationField
> = z.union([
  z.lazy(() =>
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema
  ),
  z.lazy(() =>
    BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationField$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationField$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationField$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationField$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationField$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationField$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsIntegrationField$Outbound;
}

export function batchUpsertIntegrationsIntegrationFieldToJSON(
  batchUpsertIntegrationsIntegrationField:
    BatchUpsertIntegrationsIntegrationField,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationField$outboundSchema.parse(
      batchUpsertIntegrationsIntegrationField,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationField' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

/** @internal */
export const BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound` instead. */
  export type Outbound =
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound;
}

export function batchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMappingToJSON(
  batchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping:
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema
      .parse(
        batchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping,
      ),
  );
}

export function batchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMappingFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fieldName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound =
  {
    fieldName: string;
    mapToName?: string | undefined;
    mapToDisplayName?: string | undefined;
  };

/** @internal */
export const BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent
  > = z.object({
    fieldName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound` instead. */
  export type Outbound =
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound;
}

export function batchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistentToJSON(
  batchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent:
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema
      .parse(
        batchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent,
      ),
  );
}

export function batchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistentFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationsIntegrationField$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationsIntegrationField,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema
    ),
    z.lazy(() =>
      BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema
    ),
  ]);

/** @internal */
export type BatchUpsertIntegrationsIntegrationsIntegrationField$Outbound =
  | BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound
  | BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound;

/** @internal */
export const BatchUpsertIntegrationsIntegrationsIntegrationField$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationsIntegrationField$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationsIntegrationField
  > = z.union([
    z.lazy(() =>
      BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema
    ),
    z.lazy(() =>
      BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationsIntegrationField$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsIntegrationField$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationsIntegrationField$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsIntegrationField$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationsIntegrationField$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsIntegrationField$Outbound` instead. */
  export type Outbound =
    BatchUpsertIntegrationsIntegrationsIntegrationField$Outbound;
}

export function batchUpsertIntegrationsIntegrationsIntegrationFieldToJSON(
  batchUpsertIntegrationsIntegrationsIntegrationField:
    BatchUpsertIntegrationsIntegrationsIntegrationField,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationsIntegrationField$outboundSchema.parse(
      batchUpsertIntegrationsIntegrationsIntegrationField,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationsIntegrationFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationsIntegrationField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationsIntegrationField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationsIntegrationField' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsOptionalFieldsAutoOption$inboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsOptionalFieldsAutoOption> = z
    .nativeEnum(BatchUpsertIntegrationsOptionalFieldsAutoOption);

/** @internal */
export const BatchUpsertIntegrationsOptionalFieldsAutoOption$outboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsOptionalFieldsAutoOption> =
    BatchUpsertIntegrationsOptionalFieldsAutoOption$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsOptionalFieldsAutoOption$ {
  /** @deprecated use `BatchUpsertIntegrationsOptionalFieldsAutoOption$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsOptionalFieldsAutoOption$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsOptionalFieldsAutoOption$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsOptionalFieldsAutoOption$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsDefaultPeriod$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsDefaultPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsDefaultPeriod$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsDefaultPeriod$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsDefaultPeriod$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsDefaultPeriod
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsDefaultPeriod$ {
  /** @deprecated use `BatchUpsertIntegrationsDefaultPeriod$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsDefaultPeriod$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDefaultPeriod$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsDefaultPeriod$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDefaultPeriod$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsDefaultPeriod$Outbound;
}

export function batchUpsertIntegrationsDefaultPeriodToJSON(
  batchUpsertIntegrationsDefaultPeriod: BatchUpsertIntegrationsDefaultPeriod,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsDefaultPeriod$outboundSchema.parse(
      batchUpsertIntegrationsDefaultPeriod,
    ),
  );
}

export function batchUpsertIntegrationsDefaultPeriodFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsDefaultPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsDefaultPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsDefaultPeriod' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsBackfill$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsBackfill,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() =>
    BatchUpsertIntegrationsDefaultPeriod$inboundSchema
  ),
});

/** @internal */
export type BatchUpsertIntegrationsBackfill$Outbound = {
  defaultPeriod: BatchUpsertIntegrationsDefaultPeriod$Outbound;
};

/** @internal */
export const BatchUpsertIntegrationsBackfill$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsBackfill$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsBackfill
> = z.object({
  defaultPeriod: z.lazy(() =>
    BatchUpsertIntegrationsDefaultPeriod$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsBackfill$ {
  /** @deprecated use `BatchUpsertIntegrationsBackfill$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsBackfill$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsBackfill$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsBackfill$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsBackfill$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsBackfill$Outbound;
}

export function batchUpsertIntegrationsBackfillToJSON(
  batchUpsertIntegrationsBackfill: BatchUpsertIntegrationsBackfill,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsBackfill$outboundSchema.parse(
      batchUpsertIntegrationsBackfill,
    ),
  );
}

export function batchUpsertIntegrationsBackfillFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsBackfill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsBackfill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsBackfill' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsMode$inboundSchema: z.ZodNativeEnum<
  typeof BatchUpsertIntegrationsMode
> = z.nativeEnum(BatchUpsertIntegrationsMode);

/** @internal */
export const BatchUpsertIntegrationsMode$outboundSchema: z.ZodNativeEnum<
  typeof BatchUpsertIntegrationsMode
> = BatchUpsertIntegrationsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsMode$ {
  /** @deprecated use `BatchUpsertIntegrationsMode$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsMode$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsMode$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsMode$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsDelivery$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsDelivery,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: BatchUpsertIntegrationsMode$inboundSchema.default("auto"),
  pageSize: z.number().int().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsDelivery$Outbound = {
  mode: string;
  pageSize?: number | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsDelivery$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsDelivery$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsDelivery
> = z.object({
  mode: BatchUpsertIntegrationsMode$outboundSchema.default("auto"),
  pageSize: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsDelivery$ {
  /** @deprecated use `BatchUpsertIntegrationsDelivery$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsDelivery$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDelivery$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsDelivery$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDelivery$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsDelivery$Outbound;
}

export function batchUpsertIntegrationsDeliveryToJSON(
  batchUpsertIntegrationsDelivery: BatchUpsertIntegrationsDelivery,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsDelivery$outboundSchema.parse(
      batchUpsertIntegrationsDelivery,
    ),
  );
}

export function batchUpsertIntegrationsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsDelivery' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationObject$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsIntegrationObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  destination: z.string(),
  schedule: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  requiredFields: z.array(
    z.union([
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema
      ),
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema
      ),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema
      ),
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema
      ),
    ]),
  ).optional(),
  optionalFieldsAuto:
    BatchUpsertIntegrationsOptionalFieldsAutoOption$inboundSchema.optional(),
  backfill: z.lazy(() => BatchUpsertIntegrationsBackfill$inboundSchema)
    .optional(),
  delivery: z.lazy(() => BatchUpsertIntegrationsDelivery$inboundSchema)
    .optional(),
});

/** @internal */
export type BatchUpsertIntegrationsIntegrationObject$Outbound = {
  objectName: string;
  destination: string;
  schedule: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
  requiredFields?:
    | Array<
      | BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound
      | BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound
    >
    | undefined;
  optionalFields?:
    | Array<
      | BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound
      | BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound
    >
    | undefined;
  optionalFieldsAuto?: string | undefined;
  backfill?: BatchUpsertIntegrationsBackfill$Outbound | undefined;
  delivery?: BatchUpsertIntegrationsDelivery$Outbound | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsIntegrationObject$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsIntegrationObject$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsIntegrationObject
> = z.object({
  objectName: z.string(),
  destination: z.string(),
  schedule: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  requiredFields: z.array(
    z.union([
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema
      ),
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema
      ),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema
      ),
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema
      ),
    ]),
  ).optional(),
  optionalFieldsAuto:
    BatchUpsertIntegrationsOptionalFieldsAutoOption$outboundSchema.optional(),
  backfill: z.lazy(() => BatchUpsertIntegrationsBackfill$outboundSchema)
    .optional(),
  delivery: z.lazy(() => BatchUpsertIntegrationsDelivery$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationObject$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationObject$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationObject$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationObject$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationObject$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationObject$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsIntegrationObject$Outbound;
}

export function batchUpsertIntegrationsIntegrationObjectToJSON(
  batchUpsertIntegrationsIntegrationObject:
    BatchUpsertIntegrationsIntegrationObject,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationObject$outboundSchema.parse(
      batchUpsertIntegrationsIntegrationObject,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationObject' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsReadIntegration$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsReadIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(
    z.lazy(() => BatchUpsertIntegrationsIntegrationObject$inboundSchema),
  ).optional(),
});

/** @internal */
export type BatchUpsertIntegrationsReadIntegration$Outbound = {
  objects?:
    | Array<BatchUpsertIntegrationsIntegrationObject$Outbound>
    | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsReadIntegration$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsReadIntegration$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsReadIntegration
> = z.object({
  objects: z.array(
    z.lazy(() => BatchUpsertIntegrationsIntegrationObject$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsReadIntegration$ {
  /** @deprecated use `BatchUpsertIntegrationsReadIntegration$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsReadIntegration$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsReadIntegration$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsReadIntegration$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsReadIntegration$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsReadIntegration$Outbound;
}

export function batchUpsertIntegrationsReadIntegrationToJSON(
  batchUpsertIntegrationsReadIntegration:
    BatchUpsertIntegrationsReadIntegration,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsReadIntegration$outboundSchema.parse(
      batchUpsertIntegrationsReadIntegration,
    ),
  );
}

export function batchUpsertIntegrationsReadIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsReadIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsReadIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsReadIntegration' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsValueDefaults$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsValueDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsValueDefaults$Outbound = {
  allowAnyFields?: boolean | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsValueDefaults$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsValueDefaults$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsValueDefaults
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsValueDefaults$ {
  /** @deprecated use `BatchUpsertIntegrationsValueDefaults$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsValueDefaults$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsValueDefaults$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsValueDefaults$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsValueDefaults$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsValueDefaults$Outbound;
}

export function batchUpsertIntegrationsValueDefaultsToJSON(
  batchUpsertIntegrationsValueDefaults: BatchUpsertIntegrationsValueDefaults,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsValueDefaults$outboundSchema.parse(
      batchUpsertIntegrationsValueDefaults,
    ),
  );
}

export function batchUpsertIntegrationsValueDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsValueDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsValueDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsValueDefaults' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationWriteObject$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationWriteObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    objectName: z.string(),
    inheritMapping: z.boolean().optional(),
    valueDefaults: z.lazy(() =>
      BatchUpsertIntegrationsValueDefaults$inboundSchema
    ).optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsIntegrationWriteObject$Outbound = {
  objectName: string;
  inheritMapping?: boolean | undefined;
  valueDefaults?: BatchUpsertIntegrationsValueDefaults$Outbound | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsIntegrationWriteObject$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationWriteObject$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationWriteObject
  > = z.object({
    objectName: z.string(),
    inheritMapping: z.boolean().optional(),
    valueDefaults: z.lazy(() =>
      BatchUpsertIntegrationsValueDefaults$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationWriteObject$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationWriteObject$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationWriteObject$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationWriteObject$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationWriteObject$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationWriteObject$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsIntegrationWriteObject$Outbound;
}

export function batchUpsertIntegrationsIntegrationWriteObjectToJSON(
  batchUpsertIntegrationsIntegrationWriteObject:
    BatchUpsertIntegrationsIntegrationWriteObject,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationWriteObject$outboundSchema.parse(
      batchUpsertIntegrationsIntegrationWriteObject,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationWriteObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationWriteObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationWriteObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationWriteObject' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsWriteIntegration$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsWriteIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(
    z.lazy(() => BatchUpsertIntegrationsIntegrationWriteObject$inboundSchema),
  ).optional(),
});

/** @internal */
export type BatchUpsertIntegrationsWriteIntegration$Outbound = {
  objects?:
    | Array<BatchUpsertIntegrationsIntegrationWriteObject$Outbound>
    | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsWriteIntegration$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsWriteIntegration$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsWriteIntegration
> = z.object({
  objects: z.array(
    z.lazy(() => BatchUpsertIntegrationsIntegrationWriteObject$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsWriteIntegration$ {
  /** @deprecated use `BatchUpsertIntegrationsWriteIntegration$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsWriteIntegration$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsWriteIntegration$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsWriteIntegration$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsWriteIntegration$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsWriteIntegration$Outbound;
}

export function batchUpsertIntegrationsWriteIntegrationToJSON(
  batchUpsertIntegrationsWriteIntegration:
    BatchUpsertIntegrationsWriteIntegration,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsWriteIntegration$outboundSchema.parse(
      batchUpsertIntegrationsWriteIntegration,
    ),
  );
}

export function batchUpsertIntegrationsWriteIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsWriteIntegration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsWriteIntegration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsWriteIntegration' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsProxyIntegration$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsProxyIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsProxyIntegration$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsProxyIntegration$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsProxyIntegration$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsProxyIntegration
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsProxyIntegration$ {
  /** @deprecated use `BatchUpsertIntegrationsProxyIntegration$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsProxyIntegration$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsProxyIntegration$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsProxyIntegration$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsProxyIntegration$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsProxyIntegration$Outbound;
}

export function batchUpsertIntegrationsProxyIntegrationToJSON(
  batchUpsertIntegrationsProxyIntegration:
    BatchUpsertIntegrationsProxyIntegration,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsProxyIntegration$outboundSchema.parse(
      batchUpsertIntegrationsProxyIntegration,
    ),
  );
}

export function batchUpsertIntegrationsProxyIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsProxyIntegration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsProxyIntegration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsProxyIntegration' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsEnabled$inboundSchema: z.ZodNativeEnum<
  typeof BatchUpsertIntegrationsEnabled
> = z.nativeEnum(BatchUpsertIntegrationsEnabled);

/** @internal */
export const BatchUpsertIntegrationsEnabled$outboundSchema: z.ZodNativeEnum<
  typeof BatchUpsertIntegrationsEnabled
> = BatchUpsertIntegrationsEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsEnabled$ {
  /** @deprecated use `BatchUpsertIntegrationsEnabled$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsEnabled$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsEnabled$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsEnabled$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsCreateEvent$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsCreateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: BatchUpsertIntegrationsEnabled$inboundSchema.optional(),
});

/** @internal */
export type BatchUpsertIntegrationsCreateEvent$Outbound = {
  enabled?: string | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsCreateEvent$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsCreateEvent$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsCreateEvent
> = z.object({
  enabled: BatchUpsertIntegrationsEnabled$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsCreateEvent$ {
  /** @deprecated use `BatchUpsertIntegrationsCreateEvent$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsCreateEvent$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsCreateEvent$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsCreateEvent$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsCreateEvent$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsCreateEvent$Outbound;
}

export function batchUpsertIntegrationsCreateEventToJSON(
  batchUpsertIntegrationsCreateEvent: BatchUpsertIntegrationsCreateEvent,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsCreateEvent$outboundSchema.parse(
      batchUpsertIntegrationsCreateEvent,
    ),
  );
}

export function batchUpsertIntegrationsCreateEventFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsCreateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsCreateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsCreateEvent' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationsEnabled$inboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsIntegrationsEnabled> = z
    .nativeEnum(BatchUpsertIntegrationsIntegrationsEnabled);

/** @internal */
export const BatchUpsertIntegrationsIntegrationsEnabled$outboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsIntegrationsEnabled> =
    BatchUpsertIntegrationsIntegrationsEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationsEnabled$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsEnabled$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationsEnabled$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsEnabled$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationsEnabled$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsWatchFieldsAuto$inboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsWatchFieldsAuto> = z.nativeEnum(
    BatchUpsertIntegrationsWatchFieldsAuto,
  );

/** @internal */
export const BatchUpsertIntegrationsWatchFieldsAuto$outboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsWatchFieldsAuto> =
    BatchUpsertIntegrationsWatchFieldsAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsWatchFieldsAuto$ {
  /** @deprecated use `BatchUpsertIntegrationsWatchFieldsAuto$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsWatchFieldsAuto$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsWatchFieldsAuto$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsWatchFieldsAuto$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsUpdateEvent$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsUpdateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: BatchUpsertIntegrationsIntegrationsEnabled$inboundSchema.optional(),
  watchFieldsAuto: BatchUpsertIntegrationsWatchFieldsAuto$inboundSchema
    .optional(),
  requiredWatchFields: z.array(z.string()).optional(),
});

/** @internal */
export type BatchUpsertIntegrationsUpdateEvent$Outbound = {
  enabled?: string | undefined;
  watchFieldsAuto?: string | undefined;
  requiredWatchFields?: Array<string> | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsUpdateEvent$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsUpdateEvent$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsUpdateEvent
> = z.object({
  enabled: BatchUpsertIntegrationsIntegrationsEnabled$outboundSchema.optional(),
  watchFieldsAuto: BatchUpsertIntegrationsWatchFieldsAuto$outboundSchema
    .optional(),
  requiredWatchFields: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsUpdateEvent$ {
  /** @deprecated use `BatchUpsertIntegrationsUpdateEvent$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsUpdateEvent$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsUpdateEvent$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsUpdateEvent$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsUpdateEvent$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsUpdateEvent$Outbound;
}

export function batchUpsertIntegrationsUpdateEventToJSON(
  batchUpsertIntegrationsUpdateEvent: BatchUpsertIntegrationsUpdateEvent,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsUpdateEvent$outboundSchema.parse(
      batchUpsertIntegrationsUpdateEvent,
    ),
  );
}

export function batchUpsertIntegrationsUpdateEventFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsUpdateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsUpdateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsUpdateEvent' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationsResponseEnabled$inboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsIntegrationsResponseEnabled> = z
    .nativeEnum(BatchUpsertIntegrationsIntegrationsResponseEnabled);

/** @internal */
export const BatchUpsertIntegrationsIntegrationsResponseEnabled$outboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsIntegrationsResponseEnabled> =
    BatchUpsertIntegrationsIntegrationsResponseEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationsResponseEnabled$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsResponseEnabled$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationsResponseEnabled$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsResponseEnabled$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationsResponseEnabled$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsDeleteEvent$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsDeleteEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: BatchUpsertIntegrationsIntegrationsResponseEnabled$inboundSchema
    .optional(),
});

/** @internal */
export type BatchUpsertIntegrationsDeleteEvent$Outbound = {
  enabled?: string | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsDeleteEvent$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsDeleteEvent$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsDeleteEvent
> = z.object({
  enabled: BatchUpsertIntegrationsIntegrationsResponseEnabled$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsDeleteEvent$ {
  /** @deprecated use `BatchUpsertIntegrationsDeleteEvent$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsDeleteEvent$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDeleteEvent$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsDeleteEvent$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDeleteEvent$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsDeleteEvent$Outbound;
}

export function batchUpsertIntegrationsDeleteEventToJSON(
  batchUpsertIntegrationsDeleteEvent: BatchUpsertIntegrationsDeleteEvent,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsDeleteEvent$outboundSchema.parse(
      batchUpsertIntegrationsDeleteEvent,
    ),
  );
}

export function batchUpsertIntegrationsDeleteEventFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsDeleteEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsDeleteEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsDeleteEvent' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationsResponse200Enabled$inboundSchema:
  z.ZodNativeEnum<
    typeof BatchUpsertIntegrationsIntegrationsResponse200Enabled
  > = z.nativeEnum(BatchUpsertIntegrationsIntegrationsResponse200Enabled);

/** @internal */
export const BatchUpsertIntegrationsIntegrationsResponse200Enabled$outboundSchema:
  z.ZodNativeEnum<
    typeof BatchUpsertIntegrationsIntegrationsResponse200Enabled
  > = BatchUpsertIntegrationsIntegrationsResponse200Enabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationsResponse200Enabled$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsResponse200Enabled$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationsResponse200Enabled$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsResponse200Enabled$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationsResponse200Enabled$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsAssociationChangeEvent$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsAssociationChangeEvent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    enabled: BatchUpsertIntegrationsIntegrationsResponse200Enabled$inboundSchema
      .optional(),
    includeFullRecords: z.boolean().optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsAssociationChangeEvent$Outbound = {
  enabled?: string | undefined;
  includeFullRecords?: boolean | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsAssociationChangeEvent$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsAssociationChangeEvent$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsAssociationChangeEvent
  > = z.object({
    enabled:
      BatchUpsertIntegrationsIntegrationsResponse200Enabled$outboundSchema
        .optional(),
    includeFullRecords: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsAssociationChangeEvent$ {
  /** @deprecated use `BatchUpsertIntegrationsAssociationChangeEvent$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsAssociationChangeEvent$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsAssociationChangeEvent$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsAssociationChangeEvent$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsAssociationChangeEvent$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsAssociationChangeEvent$Outbound;
}

export function batchUpsertIntegrationsAssociationChangeEventToJSON(
  batchUpsertIntegrationsAssociationChangeEvent:
    BatchUpsertIntegrationsAssociationChangeEvent,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsAssociationChangeEvent$outboundSchema.parse(
      batchUpsertIntegrationsAssociationChangeEvent,
    ),
  );
}

export function batchUpsertIntegrationsAssociationChangeEventFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsAssociationChangeEvent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsAssociationChangeEvent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsAssociationChangeEvent' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationSubscribeObject$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationSubscribeObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    objectName: z.string(),
    destination: z.string(),
    inheritFieldsAndMapping: z.boolean().optional(),
    createEvent: z.lazy(() => BatchUpsertIntegrationsCreateEvent$inboundSchema)
      .optional(),
    updateEvent: z.lazy(() => BatchUpsertIntegrationsUpdateEvent$inboundSchema)
      .optional(),
    deleteEvent: z.lazy(() => BatchUpsertIntegrationsDeleteEvent$inboundSchema)
      .optional(),
    associationChangeEvent: z.lazy(() =>
      BatchUpsertIntegrationsAssociationChangeEvent$inboundSchema
    ).optional(),
    otherEvents: z.array(z.string()).optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsIntegrationSubscribeObject$Outbound = {
  objectName: string;
  destination: string;
  inheritFieldsAndMapping?: boolean | undefined;
  createEvent?: BatchUpsertIntegrationsCreateEvent$Outbound | undefined;
  updateEvent?: BatchUpsertIntegrationsUpdateEvent$Outbound | undefined;
  deleteEvent?: BatchUpsertIntegrationsDeleteEvent$Outbound | undefined;
  associationChangeEvent?:
    | BatchUpsertIntegrationsAssociationChangeEvent$Outbound
    | undefined;
  otherEvents?: Array<string> | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsIntegrationSubscribeObject$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationSubscribeObject$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationSubscribeObject
  > = z.object({
    objectName: z.string(),
    destination: z.string(),
    inheritFieldsAndMapping: z.boolean().optional(),
    createEvent: z.lazy(() => BatchUpsertIntegrationsCreateEvent$outboundSchema)
      .optional(),
    updateEvent: z.lazy(() => BatchUpsertIntegrationsUpdateEvent$outboundSchema)
      .optional(),
    deleteEvent: z.lazy(() => BatchUpsertIntegrationsDeleteEvent$outboundSchema)
      .optional(),
    associationChangeEvent: z.lazy(() =>
      BatchUpsertIntegrationsAssociationChangeEvent$outboundSchema
    ).optional(),
    otherEvents: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationSubscribeObject$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationSubscribeObject$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationSubscribeObject$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationSubscribeObject$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationSubscribeObject$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationSubscribeObject$Outbound` instead. */
  export type Outbound =
    BatchUpsertIntegrationsIntegrationSubscribeObject$Outbound;
}

export function batchUpsertIntegrationsIntegrationSubscribeObjectToJSON(
  batchUpsertIntegrationsIntegrationSubscribeObject:
    BatchUpsertIntegrationsIntegrationSubscribeObject,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationSubscribeObject$outboundSchema.parse(
      batchUpsertIntegrationsIntegrationSubscribeObject,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationSubscribeObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationSubscribeObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationSubscribeObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationSubscribeObject' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsSubscribeIntegration$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsSubscribeIntegration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    objects: z.array(
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationSubscribeObject$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsSubscribeIntegration$Outbound = {
  objects?:
    | Array<BatchUpsertIntegrationsIntegrationSubscribeObject$Outbound>
    | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsSubscribeIntegration$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsSubscribeIntegration$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsSubscribeIntegration
  > = z.object({
    objects: z.array(
      z.lazy(() =>
        BatchUpsertIntegrationsIntegrationSubscribeObject$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsSubscribeIntegration$ {
  /** @deprecated use `BatchUpsertIntegrationsSubscribeIntegration$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsSubscribeIntegration$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsSubscribeIntegration$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsSubscribeIntegration$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsSubscribeIntegration$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsSubscribeIntegration$Outbound;
}

export function batchUpsertIntegrationsSubscribeIntegrationToJSON(
  batchUpsertIntegrationsSubscribeIntegration:
    BatchUpsertIntegrationsSubscribeIntegration,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsSubscribeIntegration$outboundSchema.parse(
      batchUpsertIntegrationsSubscribeIntegration,
    ),
  );
}

export function batchUpsertIntegrationsSubscribeIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsSubscribeIntegration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsSubscribeIntegration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsSubscribeIntegration' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationsIntegration$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationsIntegration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    displayName: z.string().optional(),
    provider: z.string(),
    read: z.lazy(() => BatchUpsertIntegrationsReadIntegration$inboundSchema)
      .optional(),
    write: z.lazy(() => BatchUpsertIntegrationsWriteIntegration$inboundSchema)
      .optional(),
    proxy: z.lazy(() => BatchUpsertIntegrationsProxyIntegration$inboundSchema)
      .optional(),
    subscribe: z.lazy(() =>
      BatchUpsertIntegrationsSubscribeIntegration$inboundSchema
    ).optional(),
  });

/** @internal */
export type BatchUpsertIntegrationsIntegrationsIntegration$Outbound = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: BatchUpsertIntegrationsReadIntegration$Outbound | undefined;
  write?: BatchUpsertIntegrationsWriteIntegration$Outbound | undefined;
  proxy?: BatchUpsertIntegrationsProxyIntegration$Outbound | undefined;
  subscribe?: BatchUpsertIntegrationsSubscribeIntegration$Outbound | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsIntegrationsIntegration$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationsIntegration$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationsIntegration
  > = z.object({
    name: z.string(),
    displayName: z.string().optional(),
    provider: z.string(),
    read: z.lazy(() => BatchUpsertIntegrationsReadIntegration$outboundSchema)
      .optional(),
    write: z.lazy(() => BatchUpsertIntegrationsWriteIntegration$outboundSchema)
      .optional(),
    proxy: z.lazy(() => BatchUpsertIntegrationsProxyIntegration$outboundSchema)
      .optional(),
    subscribe: z.lazy(() =>
      BatchUpsertIntegrationsSubscribeIntegration$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationsIntegration$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsIntegration$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationsIntegration$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsIntegration$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationsIntegration$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsIntegration$Outbound` instead. */
  export type Outbound =
    BatchUpsertIntegrationsIntegrationsIntegration$Outbound;
}

export function batchUpsertIntegrationsIntegrationsIntegrationToJSON(
  batchUpsertIntegrationsIntegrationsIntegration:
    BatchUpsertIntegrationsIntegrationsIntegration,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationsIntegration$outboundSchema.parse(
      batchUpsertIntegrationsIntegrationsIntegration,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationsIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationsIntegration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationsIntegration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationsIntegration' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsRevision$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRevision,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  content: z.lazy(() =>
    BatchUpsertIntegrationsIntegrationsIntegration$inboundSchema
  ),
});

/** @internal */
export type BatchUpsertIntegrationsRevision$Outbound = {
  id: string;
  specVersion: string;
  createTime: string;
  content: BatchUpsertIntegrationsIntegrationsIntegration$Outbound;
};

/** @internal */
export const BatchUpsertIntegrationsRevision$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRevision$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRevision
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  content: z.lazy(() =>
    BatchUpsertIntegrationsIntegrationsIntegration$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRevision$ {
  /** @deprecated use `BatchUpsertIntegrationsRevision$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsRevision$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRevision$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsRevision$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRevision$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRevision$Outbound;
}

export function batchUpsertIntegrationsRevisionToJSON(
  batchUpsertIntegrationsRevision: BatchUpsertIntegrationsRevision,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRevision$outboundSchema.parse(
      batchUpsertIntegrationsRevision,
    ),
  );
}

export function batchUpsertIntegrationsRevisionFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRevision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsRevision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRevision' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegration$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  name: z.string(),
  provider: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  latestRevision: z.lazy(() => BatchUpsertIntegrationsRevision$inboundSchema),
});

/** @internal */
export type BatchUpsertIntegrationsIntegration$Outbound = {
  id: string;
  projectId: string;
  name: string;
  provider: string;
  createTime: string;
  updateTime?: string | undefined;
  latestRevision: BatchUpsertIntegrationsRevision$Outbound;
};

/** @internal */
export const BatchUpsertIntegrationsIntegration$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsIntegration$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsIntegration
> = z.object({
  id: z.string(),
  projectId: z.string(),
  name: z.string(),
  provider: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  latestRevision: z.lazy(() => BatchUpsertIntegrationsRevision$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegration$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegration$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsIntegration$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegration$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegration$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegration$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsIntegration$Outbound;
}

export function batchUpsertIntegrationsIntegrationToJSON(
  batchUpsertIntegrationsIntegration: BatchUpsertIntegrationsIntegration,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegration$outboundSchema.parse(
      batchUpsertIntegrationsIntegration,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsIntegration' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsResponse$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BatchUpsertIntegrationsAPIProblem$inboundSchema),
  z.array(z.lazy(() => BatchUpsertIntegrationsIntegration$inboundSchema)),
]);

/** @internal */
export type BatchUpsertIntegrationsResponse$Outbound =
  | BatchUpsertIntegrationsAPIProblem$Outbound
  | Array<BatchUpsertIntegrationsIntegration$Outbound>;

/** @internal */
export const BatchUpsertIntegrationsResponse$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsResponse$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsResponse
> = z.union([
  z.lazy(() => BatchUpsertIntegrationsAPIProblem$outboundSchema),
  z.array(z.lazy(() => BatchUpsertIntegrationsIntegration$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsResponse$ {
  /** @deprecated use `BatchUpsertIntegrationsResponse$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsResponse$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsResponse$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsResponse$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsResponse$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsResponse$Outbound;
}

export function batchUpsertIntegrationsResponseToJSON(
  batchUpsertIntegrationsResponse: BatchUpsertIntegrationsResponse,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsResponse$outboundSchema.parse(
      batchUpsertIntegrationsResponse,
    ),
  );
}

export function batchUpsertIntegrationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsResponse' from JSON`,
  );
}
