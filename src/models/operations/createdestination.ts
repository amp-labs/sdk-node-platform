/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Metadata = {
  /**
   * Webhook URL, must start with "https://".
   */
  url?: string | undefined;
  /**
   * Additional headers to add when Ampersand sends a webhook message
   */
  headers?: { [k: string]: string } | null | undefined;
};

export type CreateDestinationRequestBody = {
  /**
   * Name for the new destination. Must be unique within the project and can only contain letters, numbers and dashes.
   */
  name: string;
  /**
   * The type of the destination
   */
  type: string;
  metadata: Metadata;
};

export type CreateDestinationRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  requestBody: CreateDestinationRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type CreateDestinationAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type CreateDestinationMetadata = {
  /**
   * Webhook URL
   */
  url?: string | undefined;
  /**
   * Additional headers to add when Ampersand sends a webhook message
   */
  headers?: { [k: string]: string } | null | undefined;
};

/**
 * Created
 */
export type CreateDestinationDestination = {
  /**
   * The destination ID.
   */
  id: string;
  /**
   * User-defined name for the destination
   */
  name: string;
  /**
   * The type of the destination
   */
  type: string;
  metadata: CreateDestinationMetadata;
  /**
   * The time the destination was created.
   */
  createTime: Date;
  /**
   * The time the destination was updated.
   */
  updateTime?: Date | undefined;
};

export type CreateDestinationResponse =
  | CreateDestinationDestination
  | CreateDestinationAPIProblem;

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  headers: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type Metadata$Outbound = {
  url?: string | undefined;
  headers?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  url: z.string().optional(),
  headers: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const CreateDestinationRequestBody$inboundSchema: z.ZodType<
  CreateDestinationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: z.string(),
  metadata: z.lazy(() => Metadata$inboundSchema),
});

/** @internal */
export type CreateDestinationRequestBody$Outbound = {
  name: string;
  type: string;
  metadata: Metadata$Outbound;
};

/** @internal */
export const CreateDestinationRequestBody$outboundSchema: z.ZodType<
  CreateDestinationRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDestinationRequestBody
> = z.object({
  name: z.string(),
  type: z.string(),
  metadata: z.lazy(() => Metadata$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDestinationRequestBody$ {
  /** @deprecated use `CreateDestinationRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateDestinationRequestBody$inboundSchema;
  /** @deprecated use `CreateDestinationRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateDestinationRequestBody$outboundSchema;
  /** @deprecated use `CreateDestinationRequestBody$Outbound` instead. */
  export type Outbound = CreateDestinationRequestBody$Outbound;
}

export function createDestinationRequestBodyToJSON(
  createDestinationRequestBody: CreateDestinationRequestBody,
): string {
  return JSON.stringify(
    CreateDestinationRequestBody$outboundSchema.parse(
      createDestinationRequestBody,
    ),
  );
}

export function createDestinationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDestinationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDestinationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDestinationRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateDestinationRequest$inboundSchema: z.ZodType<
  CreateDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  RequestBody: z.lazy(() => CreateDestinationRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateDestinationRequest$Outbound = {
  projectIdOrName: string;
  RequestBody: CreateDestinationRequestBody$Outbound;
};

/** @internal */
export const CreateDestinationRequest$outboundSchema: z.ZodType<
  CreateDestinationRequest$Outbound,
  z.ZodTypeDef,
  CreateDestinationRequest
> = z.object({
  projectIdOrName: z.string(),
  requestBody: z.lazy(() => CreateDestinationRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDestinationRequest$ {
  /** @deprecated use `CreateDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDestinationRequest$inboundSchema;
  /** @deprecated use `CreateDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDestinationRequest$outboundSchema;
  /** @deprecated use `CreateDestinationRequest$Outbound` instead. */
  export type Outbound = CreateDestinationRequest$Outbound;
}

export function createDestinationRequestToJSON(
  createDestinationRequest: CreateDestinationRequest,
): string {
  return JSON.stringify(
    CreateDestinationRequest$outboundSchema.parse(createDestinationRequest),
  );
}

export function createDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDestinationRequest' from JSON`,
  );
}

/** @internal */
export const CreateDestinationAPIProblem$inboundSchema: z.ZodType<
  CreateDestinationAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type CreateDestinationAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateDestinationAPIProblem$outboundSchema: z.ZodType<
  CreateDestinationAPIProblem$Outbound,
  z.ZodTypeDef,
  CreateDestinationAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDestinationAPIProblem$ {
  /** @deprecated use `CreateDestinationAPIProblem$inboundSchema` instead. */
  export const inboundSchema = CreateDestinationAPIProblem$inboundSchema;
  /** @deprecated use `CreateDestinationAPIProblem$outboundSchema` instead. */
  export const outboundSchema = CreateDestinationAPIProblem$outboundSchema;
  /** @deprecated use `CreateDestinationAPIProblem$Outbound` instead. */
  export type Outbound = CreateDestinationAPIProblem$Outbound;
}

export function createDestinationAPIProblemToJSON(
  createDestinationAPIProblem: CreateDestinationAPIProblem,
): string {
  return JSON.stringify(
    CreateDestinationAPIProblem$outboundSchema.parse(
      createDestinationAPIProblem,
    ),
  );
}

export function createDestinationAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<CreateDestinationAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDestinationAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDestinationAPIProblem' from JSON`,
  );
}

/** @internal */
export const CreateDestinationMetadata$inboundSchema: z.ZodType<
  CreateDestinationMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  headers: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type CreateDestinationMetadata$Outbound = {
  url?: string | undefined;
  headers?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const CreateDestinationMetadata$outboundSchema: z.ZodType<
  CreateDestinationMetadata$Outbound,
  z.ZodTypeDef,
  CreateDestinationMetadata
> = z.object({
  url: z.string().optional(),
  headers: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDestinationMetadata$ {
  /** @deprecated use `CreateDestinationMetadata$inboundSchema` instead. */
  export const inboundSchema = CreateDestinationMetadata$inboundSchema;
  /** @deprecated use `CreateDestinationMetadata$outboundSchema` instead. */
  export const outboundSchema = CreateDestinationMetadata$outboundSchema;
  /** @deprecated use `CreateDestinationMetadata$Outbound` instead. */
  export type Outbound = CreateDestinationMetadata$Outbound;
}

export function createDestinationMetadataToJSON(
  createDestinationMetadata: CreateDestinationMetadata,
): string {
  return JSON.stringify(
    CreateDestinationMetadata$outboundSchema.parse(createDestinationMetadata),
  );
}

export function createDestinationMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreateDestinationMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDestinationMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDestinationMetadata' from JSON`,
  );
}

/** @internal */
export const CreateDestinationDestination$inboundSchema: z.ZodType<
  CreateDestinationDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  metadata: z.lazy(() => CreateDestinationMetadata$inboundSchema),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateDestinationDestination$Outbound = {
  id: string;
  name: string;
  type: string;
  metadata: CreateDestinationMetadata$Outbound;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateDestinationDestination$outboundSchema: z.ZodType<
  CreateDestinationDestination$Outbound,
  z.ZodTypeDef,
  CreateDestinationDestination
> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  metadata: z.lazy(() => CreateDestinationMetadata$outboundSchema),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDestinationDestination$ {
  /** @deprecated use `CreateDestinationDestination$inboundSchema` instead. */
  export const inboundSchema = CreateDestinationDestination$inboundSchema;
  /** @deprecated use `CreateDestinationDestination$outboundSchema` instead. */
  export const outboundSchema = CreateDestinationDestination$outboundSchema;
  /** @deprecated use `CreateDestinationDestination$Outbound` instead. */
  export type Outbound = CreateDestinationDestination$Outbound;
}

export function createDestinationDestinationToJSON(
  createDestinationDestination: CreateDestinationDestination,
): string {
  return JSON.stringify(
    CreateDestinationDestination$outboundSchema.parse(
      createDestinationDestination,
    ),
  );
}

export function createDestinationDestinationFromJSON(
  jsonString: string,
): SafeParseResult<CreateDestinationDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDestinationDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDestinationDestination' from JSON`,
  );
}

/** @internal */
export const CreateDestinationResponse$inboundSchema: z.ZodType<
  CreateDestinationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDestinationDestination$inboundSchema),
  z.lazy(() => CreateDestinationAPIProblem$inboundSchema),
]);

/** @internal */
export type CreateDestinationResponse$Outbound =
  | CreateDestinationDestination$Outbound
  | CreateDestinationAPIProblem$Outbound;

/** @internal */
export const CreateDestinationResponse$outboundSchema: z.ZodType<
  CreateDestinationResponse$Outbound,
  z.ZodTypeDef,
  CreateDestinationResponse
> = z.union([
  z.lazy(() => CreateDestinationDestination$outboundSchema),
  z.lazy(() => CreateDestinationAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDestinationResponse$ {
  /** @deprecated use `CreateDestinationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateDestinationResponse$inboundSchema;
  /** @deprecated use `CreateDestinationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateDestinationResponse$outboundSchema;
  /** @deprecated use `CreateDestinationResponse$Outbound` instead. */
  export type Outbound = CreateDestinationResponse$Outbound;
}

export function createDestinationResponseToJSON(
  createDestinationResponse: CreateDestinationResponse,
): string {
  return JSON.stringify(
    CreateDestinationResponse$outboundSchema.parse(createDestinationResponse),
  );
}

export function createDestinationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateDestinationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDestinationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDestinationResponse' from JSON`,
  );
}
