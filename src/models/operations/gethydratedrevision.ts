/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetHydratedRevisionRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  /**
   * The revision ID.
   */
  revisionId: string;
  /**
   * The connection ID.
   */
  connectionId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetHydratedRevisionAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type HydratedIntegrationFieldIntegrationFieldMapping = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type One = {
  fieldName: string;
  displayName: string;
  /**
   * The field name to map to in the destination.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to in the destination.
   */
  mapToDisplayName?: string | undefined;
};

export type HydratedIntegrationField =
  | One
  | HydratedIntegrationFieldIntegrationFieldMapping;

export type GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

export type HydratedIntegrationField1 = {
  fieldName: string;
  displayName: string;
  /**
   * The field name to map to in the destination.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to in the destination.
   */
  mapToDisplayName?: string | undefined;
};

export type GetHydratedRevisionHydratedIntegrationField =
  | HydratedIntegrationField1
  | GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping;

export const GetHydratedRevisionOptionalFieldsAutoOption = {
  All: "all",
} as const;
export type GetHydratedRevisionOptionalFieldsAutoOption = ClosedEnum<
  typeof GetHydratedRevisionOptionalFieldsAutoOption
>;

export type GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

export type GetHydratedRevisionHydratedIntegrationField1 = {
  fieldName: string;
  displayName: string;
  /**
   * The field name to map to in the destination.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to in the destination.
   */
  mapToDisplayName?: string | undefined;
};

export type GetHydratedRevisionRevisionsHydratedIntegrationField =
  | GetHydratedRevisionHydratedIntegrationField1
  | GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping;

/**
 * A normalized field type
 */
export const GetHydratedRevisionValueType = {
  String: "string",
  Boolean: "boolean",
  SingleSelect: "singleSelect",
  MultiSelect: "multiSelect",
  Date: "date",
  Datetime: "datetime",
  Int: "int",
  Float: "float",
  Other: "other",
} as const;
/**
 * A normalized field type
 */
export type GetHydratedRevisionValueType = ClosedEnum<
  typeof GetHydratedRevisionValueType
>;

/**
 * Represents a field value
 */
export type GetHydratedRevisionFieldValue = {
  /**
   * The internal value used by the system
   */
  value: string;
  /**
   * The human-readable display value
   */
  displayValue: string;
};

export type GetHydratedRevisionFieldMetadata = {
  /**
   * The name of the field from the provider API.
   */
  fieldName: string;
  /**
   * The display name of the field from the provider API.
   */
  displayName: string;
  /**
   * A normalized field type
   */
  valueType?: GetHydratedRevisionValueType | undefined;
  /**
   * Raw field type from the provider API.
   */
  providerType?: string | undefined;
  /**
   * Whether the field is read-only.
   */
  readOnly?: boolean | undefined;
  /**
   * If the valueType is singleSelect or multiSelect, this is a list of possible values
   */
  values?: Array<GetHydratedRevisionFieldValue> | undefined;
};

export type GetHydratedRevisionDefaultPeriod = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type GetHydratedRevisionBackfill = {
  defaultPeriod: GetHydratedRevisionDefaultPeriod;
};

export type HydratedIntegrationObject = {
  /**
   * Error message if there was an issue hydrating this object.
   */
  error?: string | undefined;
  objectName: string;
  displayName: string;
  /**
   * An object name to map to.
   */
  mapToName?: string | undefined;
  /**
   * A display name to map to.
   */
  mapToDisplayName?: string | undefined;
  destination: string;
  schedule: string;
  requiredFields?:
    | Array<One | HydratedIntegrationFieldIntegrationFieldMapping>
    | undefined;
  optionalFields?:
    | Array<
      | HydratedIntegrationField1
      | GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping
    >
    | undefined;
  optionalFieldsAuto?: GetHydratedRevisionOptionalFieldsAutoOption | undefined;
  /**
   * This is a list of all fields on the object for a particular SaaS instance, including their display names.
   */
  allFields?:
    | Array<
      | GetHydratedRevisionHydratedIntegrationField1
      | GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping
    >
    | undefined;
  /**
   * This is a map of all fields on the object including their metadata (such as display name and type), the keys of the map are the field names.
   */
  allFieldsMetadata?:
    | { [k: string]: GetHydratedRevisionFieldMetadata }
    | undefined;
  backfill?: GetHydratedRevisionBackfill | undefined;
};

export type HydratedReadIntegration = {
  objects?: Array<HydratedIntegrationObject> | undefined;
};

/**
 * Configuration to set default write values for object fields.
 */
export type GetHydratedRevisionValueDefaults = {
  /**
   * If true, users can set default values for any field.
   */
  allowAnyFields?: boolean | undefined;
};

export type Objects = {
  objectName: string;
  displayName: string;
  /**
   * Configuration to set default write values for object fields.
   */
  valueDefaults?: GetHydratedRevisionValueDefaults | undefined;
};

export type Write = {
  objects?: Array<Objects> | undefined;
};

export type HydratedProxyIntegration = {
  enabled?: boolean | undefined;
};

export type HydratedIntegration = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: HydratedReadIntegration | undefined;
  write?: Write | undefined;
  proxy?: HydratedProxyIntegration | undefined;
};

/**
 * Hydrated revision
 */
export type GetHydratedRevisionHydratedRevision = {
  /**
   * The revision ID.
   */
  id: string;
  /**
   * The spec version string.
   */
  specVersion: string;
  /**
   * The time the revision was created.
   */
  createTime: Date;
  content: HydratedIntegration;
};

export type GetHydratedRevisionResponse =
  | GetHydratedRevisionHydratedRevision
  | GetHydratedRevisionAPIProblem;

/** @internal */
export const GetHydratedRevisionRequest$inboundSchema: z.ZodType<
  GetHydratedRevisionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  revisionId: z.string(),
  connectionId: z.string(),
});

/** @internal */
export type GetHydratedRevisionRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  revisionId: string;
  connectionId: string;
};

/** @internal */
export const GetHydratedRevisionRequest$outboundSchema: z.ZodType<
  GetHydratedRevisionRequest$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  revisionId: z.string(),
  connectionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionRequest$ {
  /** @deprecated use `GetHydratedRevisionRequest$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionRequest$inboundSchema;
  /** @deprecated use `GetHydratedRevisionRequest$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionRequest$outboundSchema;
  /** @deprecated use `GetHydratedRevisionRequest$Outbound` instead. */
  export type Outbound = GetHydratedRevisionRequest$Outbound;
}

export function getHydratedRevisionRequestToJSON(
  getHydratedRevisionRequest: GetHydratedRevisionRequest,
): string {
  return JSON.stringify(
    GetHydratedRevisionRequest$outboundSchema.parse(getHydratedRevisionRequest),
  );
}

export function getHydratedRevisionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionRequest' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionAPIProblem$inboundSchema: z.ZodType<
  GetHydratedRevisionAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetHydratedRevisionAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetHydratedRevisionAPIProblem$outboundSchema: z.ZodType<
  GetHydratedRevisionAPIProblem$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionAPIProblem$ {
  /** @deprecated use `GetHydratedRevisionAPIProblem$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionAPIProblem$inboundSchema;
  /** @deprecated use `GetHydratedRevisionAPIProblem$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionAPIProblem$outboundSchema;
  /** @deprecated use `GetHydratedRevisionAPIProblem$Outbound` instead. */
  export type Outbound = GetHydratedRevisionAPIProblem$Outbound;
}

export function getHydratedRevisionAPIProblemToJSON(
  getHydratedRevisionAPIProblem: GetHydratedRevisionAPIProblem,
): string {
  return JSON.stringify(
    GetHydratedRevisionAPIProblem$outboundSchema.parse(
      getHydratedRevisionAPIProblem,
    ),
  );
}

export function getHydratedRevisionAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionAPIProblem' from JSON`,
  );
}

/** @internal */
export const HydratedIntegrationFieldIntegrationFieldMapping$inboundSchema:
  z.ZodType<
    HydratedIntegrationFieldIntegrationFieldMapping,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/** @internal */
export type HydratedIntegrationFieldIntegrationFieldMapping$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const HydratedIntegrationFieldIntegrationFieldMapping$outboundSchema:
  z.ZodType<
    HydratedIntegrationFieldIntegrationFieldMapping$Outbound,
    z.ZodTypeDef,
    HydratedIntegrationFieldIntegrationFieldMapping
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HydratedIntegrationFieldIntegrationFieldMapping$ {
  /** @deprecated use `HydratedIntegrationFieldIntegrationFieldMapping$inboundSchema` instead. */
  export const inboundSchema =
    HydratedIntegrationFieldIntegrationFieldMapping$inboundSchema;
  /** @deprecated use `HydratedIntegrationFieldIntegrationFieldMapping$outboundSchema` instead. */
  export const outboundSchema =
    HydratedIntegrationFieldIntegrationFieldMapping$outboundSchema;
  /** @deprecated use `HydratedIntegrationFieldIntegrationFieldMapping$Outbound` instead. */
  export type Outbound =
    HydratedIntegrationFieldIntegrationFieldMapping$Outbound;
}

export function hydratedIntegrationFieldIntegrationFieldMappingToJSON(
  hydratedIntegrationFieldIntegrationFieldMapping:
    HydratedIntegrationFieldIntegrationFieldMapping,
): string {
  return JSON.stringify(
    HydratedIntegrationFieldIntegrationFieldMapping$outboundSchema.parse(
      hydratedIntegrationFieldIntegrationFieldMapping,
    ),
  );
}

export function hydratedIntegrationFieldIntegrationFieldMappingFromJSON(
  jsonString: string,
): SafeParseResult<
  HydratedIntegrationFieldIntegrationFieldMapping,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HydratedIntegrationFieldIntegrationFieldMapping$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HydratedIntegrationFieldIntegrationFieldMapping' from JSON`,
  );
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    fieldName: z.string(),
    displayName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/** @internal */
export type One$Outbound = {
  fieldName: string;
  displayName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    fieldName: z.string(),
    displayName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const HydratedIntegrationField$inboundSchema: z.ZodType<
  HydratedIntegrationField,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => One$inboundSchema),
  z.lazy(() => HydratedIntegrationFieldIntegrationFieldMapping$inboundSchema),
]);

/** @internal */
export type HydratedIntegrationField$Outbound =
  | One$Outbound
  | HydratedIntegrationFieldIntegrationFieldMapping$Outbound;

/** @internal */
export const HydratedIntegrationField$outboundSchema: z.ZodType<
  HydratedIntegrationField$Outbound,
  z.ZodTypeDef,
  HydratedIntegrationField
> = z.union([
  z.lazy(() => One$outboundSchema),
  z.lazy(() => HydratedIntegrationFieldIntegrationFieldMapping$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HydratedIntegrationField$ {
  /** @deprecated use `HydratedIntegrationField$inboundSchema` instead. */
  export const inboundSchema = HydratedIntegrationField$inboundSchema;
  /** @deprecated use `HydratedIntegrationField$outboundSchema` instead. */
  export const outboundSchema = HydratedIntegrationField$outboundSchema;
  /** @deprecated use `HydratedIntegrationField$Outbound` instead. */
  export type Outbound = HydratedIntegrationField$Outbound;
}

export function hydratedIntegrationFieldToJSON(
  hydratedIntegrationField: HydratedIntegrationField,
): string {
  return JSON.stringify(
    HydratedIntegrationField$outboundSchema.parse(hydratedIntegrationField),
  );
}

export function hydratedIntegrationFieldFromJSON(
  jsonString: string,
): SafeParseResult<HydratedIntegrationField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HydratedIntegrationField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HydratedIntegrationField' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$inboundSchema:
  z.ZodType<
    GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/** @internal */
export type GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$Outbound =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

/** @internal */
export const GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$outboundSchema:
  z.ZodType<
    GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$Outbound,
    z.ZodTypeDef,
    GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$ {
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$inboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$outboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$Outbound` instead. */
  export type Outbound =
    GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$Outbound;
}

export function getHydratedRevisionHydratedIntegrationFieldIntegrationFieldMappingToJSON(
  getHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping:
    GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping,
): string {
  return JSON.stringify(
    GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$outboundSchema
      .parse(
        getHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping,
      ),
  );
}

export function getHydratedRevisionHydratedIntegrationFieldIntegrationFieldMappingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping' from JSON`,
  );
}

/** @internal */
export const HydratedIntegrationField1$inboundSchema: z.ZodType<
  HydratedIntegrationField1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/** @internal */
export type HydratedIntegrationField1$Outbound = {
  fieldName: string;
  displayName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const HydratedIntegrationField1$outboundSchema: z.ZodType<
  HydratedIntegrationField1$Outbound,
  z.ZodTypeDef,
  HydratedIntegrationField1
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HydratedIntegrationField1$ {
  /** @deprecated use `HydratedIntegrationField1$inboundSchema` instead. */
  export const inboundSchema = HydratedIntegrationField1$inboundSchema;
  /** @deprecated use `HydratedIntegrationField1$outboundSchema` instead. */
  export const outboundSchema = HydratedIntegrationField1$outboundSchema;
  /** @deprecated use `HydratedIntegrationField1$Outbound` instead. */
  export type Outbound = HydratedIntegrationField1$Outbound;
}

export function hydratedIntegrationField1ToJSON(
  hydratedIntegrationField1: HydratedIntegrationField1,
): string {
  return JSON.stringify(
    HydratedIntegrationField1$outboundSchema.parse(hydratedIntegrationField1),
  );
}

export function hydratedIntegrationField1FromJSON(
  jsonString: string,
): SafeParseResult<HydratedIntegrationField1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HydratedIntegrationField1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HydratedIntegrationField1' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionHydratedIntegrationField$inboundSchema:
  z.ZodType<
    GetHydratedRevisionHydratedIntegrationField,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => HydratedIntegrationField1$inboundSchema),
    z.lazy(() =>
      GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$inboundSchema
    ),
  ]);

/** @internal */
export type GetHydratedRevisionHydratedIntegrationField$Outbound =
  | HydratedIntegrationField1$Outbound
  | GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$Outbound;

/** @internal */
export const GetHydratedRevisionHydratedIntegrationField$outboundSchema:
  z.ZodType<
    GetHydratedRevisionHydratedIntegrationField$Outbound,
    z.ZodTypeDef,
    GetHydratedRevisionHydratedIntegrationField
  > = z.union([
    z.lazy(() => HydratedIntegrationField1$outboundSchema),
    z.lazy(() =>
      GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionHydratedIntegrationField$ {
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationField$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionHydratedIntegrationField$inboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationField$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionHydratedIntegrationField$outboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationField$Outbound` instead. */
  export type Outbound = GetHydratedRevisionHydratedIntegrationField$Outbound;
}

export function getHydratedRevisionHydratedIntegrationFieldToJSON(
  getHydratedRevisionHydratedIntegrationField:
    GetHydratedRevisionHydratedIntegrationField,
): string {
  return JSON.stringify(
    GetHydratedRevisionHydratedIntegrationField$outboundSchema.parse(
      getHydratedRevisionHydratedIntegrationField,
    ),
  );
}

export function getHydratedRevisionHydratedIntegrationFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  GetHydratedRevisionHydratedIntegrationField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionHydratedIntegrationField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetHydratedRevisionHydratedIntegrationField' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionOptionalFieldsAutoOption$inboundSchema:
  z.ZodNativeEnum<typeof GetHydratedRevisionOptionalFieldsAutoOption> = z
    .nativeEnum(GetHydratedRevisionOptionalFieldsAutoOption);

/** @internal */
export const GetHydratedRevisionOptionalFieldsAutoOption$outboundSchema:
  z.ZodNativeEnum<typeof GetHydratedRevisionOptionalFieldsAutoOption> =
    GetHydratedRevisionOptionalFieldsAutoOption$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionOptionalFieldsAutoOption$ {
  /** @deprecated use `GetHydratedRevisionOptionalFieldsAutoOption$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionOptionalFieldsAutoOption$inboundSchema;
  /** @deprecated use `GetHydratedRevisionOptionalFieldsAutoOption$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionOptionalFieldsAutoOption$outboundSchema;
}

/** @internal */
export const GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$inboundSchema:
  z.ZodType<
    GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/** @internal */
export type GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$Outbound =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

/** @internal */
export const GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$outboundSchema:
  z.ZodType<
    GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$Outbound,
    z.ZodTypeDef,
    GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$ {
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$inboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$outboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$Outbound` instead. */
  export type Outbound =
    GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$Outbound;
}

export function getHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMappingToJSON(
  getHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping:
    GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping,
): string {
  return JSON.stringify(
    GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$outboundSchema
      .parse(
        getHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping,
      ),
  );
}

export function getHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMappingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionHydratedIntegrationField1$inboundSchema:
  z.ZodType<
    GetHydratedRevisionHydratedIntegrationField1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fieldName: z.string(),
    displayName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/** @internal */
export type GetHydratedRevisionHydratedIntegrationField1$Outbound = {
  fieldName: string;
  displayName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const GetHydratedRevisionHydratedIntegrationField1$outboundSchema:
  z.ZodType<
    GetHydratedRevisionHydratedIntegrationField1$Outbound,
    z.ZodTypeDef,
    GetHydratedRevisionHydratedIntegrationField1
  > = z.object({
    fieldName: z.string(),
    displayName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionHydratedIntegrationField1$ {
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationField1$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionHydratedIntegrationField1$inboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationField1$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionHydratedIntegrationField1$outboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedIntegrationField1$Outbound` instead. */
  export type Outbound = GetHydratedRevisionHydratedIntegrationField1$Outbound;
}

export function getHydratedRevisionHydratedIntegrationField1ToJSON(
  getHydratedRevisionHydratedIntegrationField1:
    GetHydratedRevisionHydratedIntegrationField1,
): string {
  return JSON.stringify(
    GetHydratedRevisionHydratedIntegrationField1$outboundSchema.parse(
      getHydratedRevisionHydratedIntegrationField1,
    ),
  );
}

export function getHydratedRevisionHydratedIntegrationField1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetHydratedRevisionHydratedIntegrationField1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionHydratedIntegrationField1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetHydratedRevisionHydratedIntegrationField1' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionRevisionsHydratedIntegrationField$inboundSchema:
  z.ZodType<
    GetHydratedRevisionRevisionsHydratedIntegrationField,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetHydratedRevisionHydratedIntegrationField1$inboundSchema),
    z.lazy(() =>
      GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$inboundSchema
    ),
  ]);

/** @internal */
export type GetHydratedRevisionRevisionsHydratedIntegrationField$Outbound =
  | GetHydratedRevisionHydratedIntegrationField1$Outbound
  | GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$Outbound;

/** @internal */
export const GetHydratedRevisionRevisionsHydratedIntegrationField$outboundSchema:
  z.ZodType<
    GetHydratedRevisionRevisionsHydratedIntegrationField$Outbound,
    z.ZodTypeDef,
    GetHydratedRevisionRevisionsHydratedIntegrationField
  > = z.union([
    z.lazy(() => GetHydratedRevisionHydratedIntegrationField1$outboundSchema),
    z.lazy(() =>
      GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionRevisionsHydratedIntegrationField$ {
  /** @deprecated use `GetHydratedRevisionRevisionsHydratedIntegrationField$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionRevisionsHydratedIntegrationField$inboundSchema;
  /** @deprecated use `GetHydratedRevisionRevisionsHydratedIntegrationField$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionRevisionsHydratedIntegrationField$outboundSchema;
  /** @deprecated use `GetHydratedRevisionRevisionsHydratedIntegrationField$Outbound` instead. */
  export type Outbound =
    GetHydratedRevisionRevisionsHydratedIntegrationField$Outbound;
}

export function getHydratedRevisionRevisionsHydratedIntegrationFieldToJSON(
  getHydratedRevisionRevisionsHydratedIntegrationField:
    GetHydratedRevisionRevisionsHydratedIntegrationField,
): string {
  return JSON.stringify(
    GetHydratedRevisionRevisionsHydratedIntegrationField$outboundSchema.parse(
      getHydratedRevisionRevisionsHydratedIntegrationField,
    ),
  );
}

export function getHydratedRevisionRevisionsHydratedIntegrationFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  GetHydratedRevisionRevisionsHydratedIntegrationField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionRevisionsHydratedIntegrationField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetHydratedRevisionRevisionsHydratedIntegrationField' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionValueType$inboundSchema: z.ZodNativeEnum<
  typeof GetHydratedRevisionValueType
> = z.nativeEnum(GetHydratedRevisionValueType);

/** @internal */
export const GetHydratedRevisionValueType$outboundSchema: z.ZodNativeEnum<
  typeof GetHydratedRevisionValueType
> = GetHydratedRevisionValueType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionValueType$ {
  /** @deprecated use `GetHydratedRevisionValueType$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionValueType$inboundSchema;
  /** @deprecated use `GetHydratedRevisionValueType$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionValueType$outboundSchema;
}

/** @internal */
export const GetHydratedRevisionFieldValue$inboundSchema: z.ZodType<
  GetHydratedRevisionFieldValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/** @internal */
export type GetHydratedRevisionFieldValue$Outbound = {
  value: string;
  displayValue: string;
};

/** @internal */
export const GetHydratedRevisionFieldValue$outboundSchema: z.ZodType<
  GetHydratedRevisionFieldValue$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionFieldValue
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionFieldValue$ {
  /** @deprecated use `GetHydratedRevisionFieldValue$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionFieldValue$inboundSchema;
  /** @deprecated use `GetHydratedRevisionFieldValue$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionFieldValue$outboundSchema;
  /** @deprecated use `GetHydratedRevisionFieldValue$Outbound` instead. */
  export type Outbound = GetHydratedRevisionFieldValue$Outbound;
}

export function getHydratedRevisionFieldValueToJSON(
  getHydratedRevisionFieldValue: GetHydratedRevisionFieldValue,
): string {
  return JSON.stringify(
    GetHydratedRevisionFieldValue$outboundSchema.parse(
      getHydratedRevisionFieldValue,
    ),
  );
}

export function getHydratedRevisionFieldValueFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionFieldValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionFieldValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionFieldValue' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionFieldMetadata$inboundSchema: z.ZodType<
  GetHydratedRevisionFieldMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  valueType: GetHydratedRevisionValueType$inboundSchema.optional(),
  providerType: z.string().optional(),
  readOnly: z.boolean().optional(),
  values: z.array(z.lazy(() => GetHydratedRevisionFieldValue$inboundSchema))
    .optional(),
});

/** @internal */
export type GetHydratedRevisionFieldMetadata$Outbound = {
  fieldName: string;
  displayName: string;
  valueType?: string | undefined;
  providerType?: string | undefined;
  readOnly?: boolean | undefined;
  values?: Array<GetHydratedRevisionFieldValue$Outbound> | undefined;
};

/** @internal */
export const GetHydratedRevisionFieldMetadata$outboundSchema: z.ZodType<
  GetHydratedRevisionFieldMetadata$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionFieldMetadata
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  valueType: GetHydratedRevisionValueType$outboundSchema.optional(),
  providerType: z.string().optional(),
  readOnly: z.boolean().optional(),
  values: z.array(z.lazy(() => GetHydratedRevisionFieldValue$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionFieldMetadata$ {
  /** @deprecated use `GetHydratedRevisionFieldMetadata$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionFieldMetadata$inboundSchema;
  /** @deprecated use `GetHydratedRevisionFieldMetadata$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionFieldMetadata$outboundSchema;
  /** @deprecated use `GetHydratedRevisionFieldMetadata$Outbound` instead. */
  export type Outbound = GetHydratedRevisionFieldMetadata$Outbound;
}

export function getHydratedRevisionFieldMetadataToJSON(
  getHydratedRevisionFieldMetadata: GetHydratedRevisionFieldMetadata,
): string {
  return JSON.stringify(
    GetHydratedRevisionFieldMetadata$outboundSchema.parse(
      getHydratedRevisionFieldMetadata,
    ),
  );
}

export function getHydratedRevisionFieldMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionFieldMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionFieldMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionFieldMetadata' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionDefaultPeriod$inboundSchema: z.ZodType<
  GetHydratedRevisionDefaultPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type GetHydratedRevisionDefaultPeriod$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const GetHydratedRevisionDefaultPeriod$outboundSchema: z.ZodType<
  GetHydratedRevisionDefaultPeriod$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionDefaultPeriod
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionDefaultPeriod$ {
  /** @deprecated use `GetHydratedRevisionDefaultPeriod$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionDefaultPeriod$inboundSchema;
  /** @deprecated use `GetHydratedRevisionDefaultPeriod$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionDefaultPeriod$outboundSchema;
  /** @deprecated use `GetHydratedRevisionDefaultPeriod$Outbound` instead. */
  export type Outbound = GetHydratedRevisionDefaultPeriod$Outbound;
}

export function getHydratedRevisionDefaultPeriodToJSON(
  getHydratedRevisionDefaultPeriod: GetHydratedRevisionDefaultPeriod,
): string {
  return JSON.stringify(
    GetHydratedRevisionDefaultPeriod$outboundSchema.parse(
      getHydratedRevisionDefaultPeriod,
    ),
  );
}

export function getHydratedRevisionDefaultPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionDefaultPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionDefaultPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionDefaultPeriod' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionBackfill$inboundSchema: z.ZodType<
  GetHydratedRevisionBackfill,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() => GetHydratedRevisionDefaultPeriod$inboundSchema),
});

/** @internal */
export type GetHydratedRevisionBackfill$Outbound = {
  defaultPeriod: GetHydratedRevisionDefaultPeriod$Outbound;
};

/** @internal */
export const GetHydratedRevisionBackfill$outboundSchema: z.ZodType<
  GetHydratedRevisionBackfill$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionBackfill
> = z.object({
  defaultPeriod: z.lazy(() => GetHydratedRevisionDefaultPeriod$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionBackfill$ {
  /** @deprecated use `GetHydratedRevisionBackfill$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionBackfill$inboundSchema;
  /** @deprecated use `GetHydratedRevisionBackfill$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionBackfill$outboundSchema;
  /** @deprecated use `GetHydratedRevisionBackfill$Outbound` instead. */
  export type Outbound = GetHydratedRevisionBackfill$Outbound;
}

export function getHydratedRevisionBackfillToJSON(
  getHydratedRevisionBackfill: GetHydratedRevisionBackfill,
): string {
  return JSON.stringify(
    GetHydratedRevisionBackfill$outboundSchema.parse(
      getHydratedRevisionBackfill,
    ),
  );
}

export function getHydratedRevisionBackfillFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionBackfill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionBackfill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionBackfill' from JSON`,
  );
}

/** @internal */
export const HydratedIntegrationObject$inboundSchema: z.ZodType<
  HydratedIntegrationObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string().optional(),
  objectName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  destination: z.string(),
  schedule: z.string(),
  requiredFields: z.array(
    z.union([
      z.lazy(() => One$inboundSchema),
      z.lazy(() =>
        HydratedIntegrationFieldIntegrationFieldMapping$inboundSchema
      ),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() => HydratedIntegrationField1$inboundSchema),
      z.lazy(() =>
        GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$inboundSchema
      ),
    ]),
  ).optional(),
  optionalFieldsAuto: GetHydratedRevisionOptionalFieldsAutoOption$inboundSchema
    .optional(),
  allFields: z.array(
    z.union([
      z.lazy(() => GetHydratedRevisionHydratedIntegrationField1$inboundSchema),
      z.lazy(() =>
        GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$inboundSchema
      ),
    ]),
  ).optional(),
  allFieldsMetadata: z.record(
    z.lazy(() => GetHydratedRevisionFieldMetadata$inboundSchema),
  ).optional(),
  backfill: z.lazy(() => GetHydratedRevisionBackfill$inboundSchema).optional(),
});

/** @internal */
export type HydratedIntegrationObject$Outbound = {
  error?: string | undefined;
  objectName: string;
  displayName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
  destination: string;
  schedule: string;
  requiredFields?:
    | Array<
      One$Outbound | HydratedIntegrationFieldIntegrationFieldMapping$Outbound
    >
    | undefined;
  optionalFields?:
    | Array<
      | HydratedIntegrationField1$Outbound
      | GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$Outbound
    >
    | undefined;
  optionalFieldsAuto?: string | undefined;
  allFields?:
    | Array<
      | GetHydratedRevisionHydratedIntegrationField1$Outbound
      | GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$Outbound
    >
    | undefined;
  allFieldsMetadata?:
    | { [k: string]: GetHydratedRevisionFieldMetadata$Outbound }
    | undefined;
  backfill?: GetHydratedRevisionBackfill$Outbound | undefined;
};

/** @internal */
export const HydratedIntegrationObject$outboundSchema: z.ZodType<
  HydratedIntegrationObject$Outbound,
  z.ZodTypeDef,
  HydratedIntegrationObject
> = z.object({
  error: z.string().optional(),
  objectName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  destination: z.string(),
  schedule: z.string(),
  requiredFields: z.array(
    z.union([
      z.lazy(() => One$outboundSchema),
      z.lazy(() =>
        HydratedIntegrationFieldIntegrationFieldMapping$outboundSchema
      ),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() => HydratedIntegrationField1$outboundSchema),
      z.lazy(() =>
        GetHydratedRevisionHydratedIntegrationFieldIntegrationFieldMapping$outboundSchema
      ),
    ]),
  ).optional(),
  optionalFieldsAuto: GetHydratedRevisionOptionalFieldsAutoOption$outboundSchema
    .optional(),
  allFields: z.array(
    z.union([
      z.lazy(() => GetHydratedRevisionHydratedIntegrationField1$outboundSchema),
      z.lazy(() =>
        GetHydratedRevisionHydratedIntegrationFieldRevisionsIntegrationFieldMapping$outboundSchema
      ),
    ]),
  ).optional(),
  allFieldsMetadata: z.record(
    z.lazy(() => GetHydratedRevisionFieldMetadata$outboundSchema),
  ).optional(),
  backfill: z.lazy(() => GetHydratedRevisionBackfill$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HydratedIntegrationObject$ {
  /** @deprecated use `HydratedIntegrationObject$inboundSchema` instead. */
  export const inboundSchema = HydratedIntegrationObject$inboundSchema;
  /** @deprecated use `HydratedIntegrationObject$outboundSchema` instead. */
  export const outboundSchema = HydratedIntegrationObject$outboundSchema;
  /** @deprecated use `HydratedIntegrationObject$Outbound` instead. */
  export type Outbound = HydratedIntegrationObject$Outbound;
}

export function hydratedIntegrationObjectToJSON(
  hydratedIntegrationObject: HydratedIntegrationObject,
): string {
  return JSON.stringify(
    HydratedIntegrationObject$outboundSchema.parse(hydratedIntegrationObject),
  );
}

export function hydratedIntegrationObjectFromJSON(
  jsonString: string,
): SafeParseResult<HydratedIntegrationObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HydratedIntegrationObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HydratedIntegrationObject' from JSON`,
  );
}

/** @internal */
export const HydratedReadIntegration$inboundSchema: z.ZodType<
  HydratedReadIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(z.lazy(() => HydratedIntegrationObject$inboundSchema))
    .optional(),
});

/** @internal */
export type HydratedReadIntegration$Outbound = {
  objects?: Array<HydratedIntegrationObject$Outbound> | undefined;
};

/** @internal */
export const HydratedReadIntegration$outboundSchema: z.ZodType<
  HydratedReadIntegration$Outbound,
  z.ZodTypeDef,
  HydratedReadIntegration
> = z.object({
  objects: z.array(z.lazy(() => HydratedIntegrationObject$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HydratedReadIntegration$ {
  /** @deprecated use `HydratedReadIntegration$inboundSchema` instead. */
  export const inboundSchema = HydratedReadIntegration$inboundSchema;
  /** @deprecated use `HydratedReadIntegration$outboundSchema` instead. */
  export const outboundSchema = HydratedReadIntegration$outboundSchema;
  /** @deprecated use `HydratedReadIntegration$Outbound` instead. */
  export type Outbound = HydratedReadIntegration$Outbound;
}

export function hydratedReadIntegrationToJSON(
  hydratedReadIntegration: HydratedReadIntegration,
): string {
  return JSON.stringify(
    HydratedReadIntegration$outboundSchema.parse(hydratedReadIntegration),
  );
}

export function hydratedReadIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<HydratedReadIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HydratedReadIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HydratedReadIntegration' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionValueDefaults$inboundSchema: z.ZodType<
  GetHydratedRevisionValueDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/** @internal */
export type GetHydratedRevisionValueDefaults$Outbound = {
  allowAnyFields?: boolean | undefined;
};

/** @internal */
export const GetHydratedRevisionValueDefaults$outboundSchema: z.ZodType<
  GetHydratedRevisionValueDefaults$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionValueDefaults
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionValueDefaults$ {
  /** @deprecated use `GetHydratedRevisionValueDefaults$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionValueDefaults$inboundSchema;
  /** @deprecated use `GetHydratedRevisionValueDefaults$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionValueDefaults$outboundSchema;
  /** @deprecated use `GetHydratedRevisionValueDefaults$Outbound` instead. */
  export type Outbound = GetHydratedRevisionValueDefaults$Outbound;
}

export function getHydratedRevisionValueDefaultsToJSON(
  getHydratedRevisionValueDefaults: GetHydratedRevisionValueDefaults,
): string {
  return JSON.stringify(
    GetHydratedRevisionValueDefaults$outboundSchema.parse(
      getHydratedRevisionValueDefaults,
    ),
  );
}

export function getHydratedRevisionValueDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionValueDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionValueDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionValueDefaults' from JSON`,
  );
}

/** @internal */
export const Objects$inboundSchema: z.ZodType<Objects, z.ZodTypeDef, unknown> =
  z.object({
    objectName: z.string(),
    displayName: z.string(),
    valueDefaults: z.lazy(() => GetHydratedRevisionValueDefaults$inboundSchema)
      .optional(),
  });

/** @internal */
export type Objects$Outbound = {
  objectName: string;
  displayName: string;
  valueDefaults?: GetHydratedRevisionValueDefaults$Outbound | undefined;
};

/** @internal */
export const Objects$outboundSchema: z.ZodType<
  Objects$Outbound,
  z.ZodTypeDef,
  Objects
> = z.object({
  objectName: z.string(),
  displayName: z.string(),
  valueDefaults: z.lazy(() => GetHydratedRevisionValueDefaults$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Objects$ {
  /** @deprecated use `Objects$inboundSchema` instead. */
  export const inboundSchema = Objects$inboundSchema;
  /** @deprecated use `Objects$outboundSchema` instead. */
  export const outboundSchema = Objects$outboundSchema;
  /** @deprecated use `Objects$Outbound` instead. */
  export type Outbound = Objects$Outbound;
}

export function objectsToJSON(objects: Objects): string {
  return JSON.stringify(Objects$outboundSchema.parse(objects));
}

export function objectsFromJSON(
  jsonString: string,
): SafeParseResult<Objects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Objects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Objects' from JSON`,
  );
}

/** @internal */
export const Write$inboundSchema: z.ZodType<Write, z.ZodTypeDef, unknown> = z
  .object({
    objects: z.array(z.lazy(() => Objects$inboundSchema)).optional(),
  });

/** @internal */
export type Write$Outbound = {
  objects?: Array<Objects$Outbound> | undefined;
};

/** @internal */
export const Write$outboundSchema: z.ZodType<
  Write$Outbound,
  z.ZodTypeDef,
  Write
> = z.object({
  objects: z.array(z.lazy(() => Objects$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Write$ {
  /** @deprecated use `Write$inboundSchema` instead. */
  export const inboundSchema = Write$inboundSchema;
  /** @deprecated use `Write$outboundSchema` instead. */
  export const outboundSchema = Write$outboundSchema;
  /** @deprecated use `Write$Outbound` instead. */
  export type Outbound = Write$Outbound;
}

export function writeToJSON(write: Write): string {
  return JSON.stringify(Write$outboundSchema.parse(write));
}

export function writeFromJSON(
  jsonString: string,
): SafeParseResult<Write, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Write$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Write' from JSON`,
  );
}

/** @internal */
export const HydratedProxyIntegration$inboundSchema: z.ZodType<
  HydratedProxyIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type HydratedProxyIntegration$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const HydratedProxyIntegration$outboundSchema: z.ZodType<
  HydratedProxyIntegration$Outbound,
  z.ZodTypeDef,
  HydratedProxyIntegration
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HydratedProxyIntegration$ {
  /** @deprecated use `HydratedProxyIntegration$inboundSchema` instead. */
  export const inboundSchema = HydratedProxyIntegration$inboundSchema;
  /** @deprecated use `HydratedProxyIntegration$outboundSchema` instead. */
  export const outboundSchema = HydratedProxyIntegration$outboundSchema;
  /** @deprecated use `HydratedProxyIntegration$Outbound` instead. */
  export type Outbound = HydratedProxyIntegration$Outbound;
}

export function hydratedProxyIntegrationToJSON(
  hydratedProxyIntegration: HydratedProxyIntegration,
): string {
  return JSON.stringify(
    HydratedProxyIntegration$outboundSchema.parse(hydratedProxyIntegration),
  );
}

export function hydratedProxyIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<HydratedProxyIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HydratedProxyIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HydratedProxyIntegration' from JSON`,
  );
}

/** @internal */
export const HydratedIntegration$inboundSchema: z.ZodType<
  HydratedIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => HydratedReadIntegration$inboundSchema).optional(),
  write: z.lazy(() => Write$inboundSchema).optional(),
  proxy: z.lazy(() => HydratedProxyIntegration$inboundSchema).optional(),
});

/** @internal */
export type HydratedIntegration$Outbound = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: HydratedReadIntegration$Outbound | undefined;
  write?: Write$Outbound | undefined;
  proxy?: HydratedProxyIntegration$Outbound | undefined;
};

/** @internal */
export const HydratedIntegration$outboundSchema: z.ZodType<
  HydratedIntegration$Outbound,
  z.ZodTypeDef,
  HydratedIntegration
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => HydratedReadIntegration$outboundSchema).optional(),
  write: z.lazy(() => Write$outboundSchema).optional(),
  proxy: z.lazy(() => HydratedProxyIntegration$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HydratedIntegration$ {
  /** @deprecated use `HydratedIntegration$inboundSchema` instead. */
  export const inboundSchema = HydratedIntegration$inboundSchema;
  /** @deprecated use `HydratedIntegration$outboundSchema` instead. */
  export const outboundSchema = HydratedIntegration$outboundSchema;
  /** @deprecated use `HydratedIntegration$Outbound` instead. */
  export type Outbound = HydratedIntegration$Outbound;
}

export function hydratedIntegrationToJSON(
  hydratedIntegration: HydratedIntegration,
): string {
  return JSON.stringify(
    HydratedIntegration$outboundSchema.parse(hydratedIntegration),
  );
}

export function hydratedIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<HydratedIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HydratedIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HydratedIntegration' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionHydratedRevision$inboundSchema: z.ZodType<
  GetHydratedRevisionHydratedRevision,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  content: z.lazy(() => HydratedIntegration$inboundSchema),
});

/** @internal */
export type GetHydratedRevisionHydratedRevision$Outbound = {
  id: string;
  specVersion: string;
  createTime: string;
  content: HydratedIntegration$Outbound;
};

/** @internal */
export const GetHydratedRevisionHydratedRevision$outboundSchema: z.ZodType<
  GetHydratedRevisionHydratedRevision$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionHydratedRevision
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  content: z.lazy(() => HydratedIntegration$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionHydratedRevision$ {
  /** @deprecated use `GetHydratedRevisionHydratedRevision$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionHydratedRevision$inboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedRevision$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionHydratedRevision$outboundSchema;
  /** @deprecated use `GetHydratedRevisionHydratedRevision$Outbound` instead. */
  export type Outbound = GetHydratedRevisionHydratedRevision$Outbound;
}

export function getHydratedRevisionHydratedRevisionToJSON(
  getHydratedRevisionHydratedRevision: GetHydratedRevisionHydratedRevision,
): string {
  return JSON.stringify(
    GetHydratedRevisionHydratedRevision$outboundSchema.parse(
      getHydratedRevisionHydratedRevision,
    ),
  );
}

export function getHydratedRevisionHydratedRevisionFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionHydratedRevision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionHydratedRevision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionHydratedRevision' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionResponse$inboundSchema: z.ZodType<
  GetHydratedRevisionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetHydratedRevisionHydratedRevision$inboundSchema),
  z.lazy(() => GetHydratedRevisionAPIProblem$inboundSchema),
]);

/** @internal */
export type GetHydratedRevisionResponse$Outbound =
  | GetHydratedRevisionHydratedRevision$Outbound
  | GetHydratedRevisionAPIProblem$Outbound;

/** @internal */
export const GetHydratedRevisionResponse$outboundSchema: z.ZodType<
  GetHydratedRevisionResponse$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionResponse
> = z.union([
  z.lazy(() => GetHydratedRevisionHydratedRevision$outboundSchema),
  z.lazy(() => GetHydratedRevisionAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionResponse$ {
  /** @deprecated use `GetHydratedRevisionResponse$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionResponse$inboundSchema;
  /** @deprecated use `GetHydratedRevisionResponse$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionResponse$outboundSchema;
  /** @deprecated use `GetHydratedRevisionResponse$Outbound` instead. */
  export type Outbound = GetHydratedRevisionResponse$Outbound;
}

export function getHydratedRevisionResponseToJSON(
  getHydratedRevisionResponse: GetHydratedRevisionResponse,
): string {
  return JSON.stringify(
    GetHydratedRevisionResponse$outboundSchema.parse(
      getHydratedRevisionResponse,
    ),
  );
}

export function getHydratedRevisionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionResponse' from JSON`,
  );
}
