/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetObjectMetadataForInstallationRequest = {
  /**
   * The unique identifier or name of the project.
   */
  projectIdOrName: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  /**
   * Object name (mapped or unmapped)
   */
  objectName: string;
  /**
   * The groupRef for the installation
   */
  groupRef?: string | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetObjectMetadataForInstallationAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * A normalized field type
 */
export const ValueType = {
  String: "string",
  Boolean: "boolean",
  SingleSelect: "singleSelect",
  MultiSelect: "multiSelect",
  Date: "date",
  Datetime: "datetime",
  Int: "int",
  Float: "float",
  Other: "other",
} as const;
/**
 * A normalized field type
 */
export type ValueType = ClosedEnum<typeof ValueType>;

/**
 * Represents a field value
 */
export type FieldValue = {
  /**
   * The internal value used by the system
   */
  value: string;
  /**
   * The human-readable display value
   */
  displayValue: string;
};

export type FieldMetadata = {
  /**
   * The name of the field from the provider API.
   */
  fieldName: string;
  /**
   * The display name of the field from the provider API.
   */
  displayName: string;
  /**
   * A normalized field type
   */
  valueType?: ValueType | undefined;
  /**
   * Raw field type from the provider API.
   */
  providerType?: string | undefined;
  /**
   * Whether the field is read-only.
   */
  readOnly?: boolean | undefined;
  /**
   * If the valueType is singleSelect or multiSelect, this is a list of possible values
   */
  values?: Array<FieldValue> | undefined;
};

/**
 * The retrieved object metadata
 */
export type GetObjectMetadataForInstallationObjectMetadata = {
  /**
   * The provider name of the object
   */
  name: string;
  /**
   * Human-readable name of the object
   */
  displayName?: string | undefined;
  mappedObjectName?: string | undefined;
  /**
   * Map of field metadata keyed by field name
   */
  fields: { [k: string]: FieldMetadata };
};

export type GetObjectMetadataForInstallationResponse =
  | GetObjectMetadataForInstallationObjectMetadata
  | GetObjectMetadataForInstallationAPIProblem;

/** @internal */
export const GetObjectMetadataForInstallationRequest$inboundSchema: z.ZodType<
  GetObjectMetadataForInstallationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  objectName: z.string(),
  groupRef: z.string().optional(),
});

/** @internal */
export type GetObjectMetadataForInstallationRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  objectName: string;
  groupRef?: string | undefined;
};

/** @internal */
export const GetObjectMetadataForInstallationRequest$outboundSchema: z.ZodType<
  GetObjectMetadataForInstallationRequest$Outbound,
  z.ZodTypeDef,
  GetObjectMetadataForInstallationRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  objectName: z.string(),
  groupRef: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForInstallationRequest$ {
  /** @deprecated use `GetObjectMetadataForInstallationRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForInstallationRequest$inboundSchema;
  /** @deprecated use `GetObjectMetadataForInstallationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForInstallationRequest$outboundSchema;
  /** @deprecated use `GetObjectMetadataForInstallationRequest$Outbound` instead. */
  export type Outbound = GetObjectMetadataForInstallationRequest$Outbound;
}

export function getObjectMetadataForInstallationRequestToJSON(
  getObjectMetadataForInstallationRequest:
    GetObjectMetadataForInstallationRequest,
): string {
  return JSON.stringify(
    GetObjectMetadataForInstallationRequest$outboundSchema.parse(
      getObjectMetadataForInstallationRequest,
    ),
  );
}

export function getObjectMetadataForInstallationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetObjectMetadataForInstallationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForInstallationRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetObjectMetadataForInstallationRequest' from JSON`,
  );
}

/** @internal */
export const GetObjectMetadataForInstallationAPIProblem$inboundSchema:
  z.ZodType<GetObjectMetadataForInstallationAPIProblem, z.ZodTypeDef, unknown> =
    z.object({
      type: z.string().default("about:blank"),
      href: z.string().optional(),
      title: z.string().optional(),
      status: z.number().int().optional(),
      detail: z.string().optional(),
      instance: z.string().optional(),
      subsystem: z.string().optional(),
      time: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
      requestId: z.string().optional(),
      causes: z.array(z.string()).optional(),
      remedy: z.string().optional(),
      supportEmail: z.string().optional(),
      supportPhone: z.string().optional(),
      supportUrl: z.string().optional(),
      retryable: z.boolean().optional(),
      retryAfter: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      context: z.record(z.any()).optional(),
    });

/** @internal */
export type GetObjectMetadataForInstallationAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetObjectMetadataForInstallationAPIProblem$outboundSchema:
  z.ZodType<
    GetObjectMetadataForInstallationAPIProblem$Outbound,
    z.ZodTypeDef,
    GetObjectMetadataForInstallationAPIProblem
  > = z.object({
    type: z.string().default("about:blank"),
    href: z.string().optional(),
    title: z.string().optional(),
    status: z.number().int().optional(),
    detail: z.string().optional(),
    instance: z.string().optional(),
    subsystem: z.string().optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    requestId: z.string().optional(),
    causes: z.array(z.string()).optional(),
    remedy: z.string().optional(),
    supportEmail: z.string().optional(),
    supportPhone: z.string().optional(),
    supportUrl: z.string().optional(),
    retryable: z.boolean().optional(),
    retryAfter: z.date().transform(v => v.toISOString()).optional(),
    context: z.record(z.any()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForInstallationAPIProblem$ {
  /** @deprecated use `GetObjectMetadataForInstallationAPIProblem$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForInstallationAPIProblem$inboundSchema;
  /** @deprecated use `GetObjectMetadataForInstallationAPIProblem$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForInstallationAPIProblem$outboundSchema;
  /** @deprecated use `GetObjectMetadataForInstallationAPIProblem$Outbound` instead. */
  export type Outbound = GetObjectMetadataForInstallationAPIProblem$Outbound;
}

export function getObjectMetadataForInstallationAPIProblemToJSON(
  getObjectMetadataForInstallationAPIProblem:
    GetObjectMetadataForInstallationAPIProblem,
): string {
  return JSON.stringify(
    GetObjectMetadataForInstallationAPIProblem$outboundSchema.parse(
      getObjectMetadataForInstallationAPIProblem,
    ),
  );
}

export function getObjectMetadataForInstallationAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<
  GetObjectMetadataForInstallationAPIProblem,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForInstallationAPIProblem$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetObjectMetadataForInstallationAPIProblem' from JSON`,
  );
}

/** @internal */
export const ValueType$inboundSchema: z.ZodNativeEnum<typeof ValueType> = z
  .nativeEnum(ValueType);

/** @internal */
export const ValueType$outboundSchema: z.ZodNativeEnum<typeof ValueType> =
  ValueType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueType$ {
  /** @deprecated use `ValueType$inboundSchema` instead. */
  export const inboundSchema = ValueType$inboundSchema;
  /** @deprecated use `ValueType$outboundSchema` instead. */
  export const outboundSchema = ValueType$outboundSchema;
}

/** @internal */
export const FieldValue$inboundSchema: z.ZodType<
  FieldValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/** @internal */
export type FieldValue$Outbound = {
  value: string;
  displayValue: string;
};

/** @internal */
export const FieldValue$outboundSchema: z.ZodType<
  FieldValue$Outbound,
  z.ZodTypeDef,
  FieldValue
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldValue$ {
  /** @deprecated use `FieldValue$inboundSchema` instead. */
  export const inboundSchema = FieldValue$inboundSchema;
  /** @deprecated use `FieldValue$outboundSchema` instead. */
  export const outboundSchema = FieldValue$outboundSchema;
  /** @deprecated use `FieldValue$Outbound` instead. */
  export type Outbound = FieldValue$Outbound;
}

export function fieldValueToJSON(fieldValue: FieldValue): string {
  return JSON.stringify(FieldValue$outboundSchema.parse(fieldValue));
}

export function fieldValueFromJSON(
  jsonString: string,
): SafeParseResult<FieldValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldValue' from JSON`,
  );
}

/** @internal */
export const FieldMetadata$inboundSchema: z.ZodType<
  FieldMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  valueType: ValueType$inboundSchema.optional(),
  providerType: z.string().optional(),
  readOnly: z.boolean().optional(),
  values: z.array(z.lazy(() => FieldValue$inboundSchema)).optional(),
});

/** @internal */
export type FieldMetadata$Outbound = {
  fieldName: string;
  displayName: string;
  valueType?: string | undefined;
  providerType?: string | undefined;
  readOnly?: boolean | undefined;
  values?: Array<FieldValue$Outbound> | undefined;
};

/** @internal */
export const FieldMetadata$outboundSchema: z.ZodType<
  FieldMetadata$Outbound,
  z.ZodTypeDef,
  FieldMetadata
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  valueType: ValueType$outboundSchema.optional(),
  providerType: z.string().optional(),
  readOnly: z.boolean().optional(),
  values: z.array(z.lazy(() => FieldValue$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetadata$ {
  /** @deprecated use `FieldMetadata$inboundSchema` instead. */
  export const inboundSchema = FieldMetadata$inboundSchema;
  /** @deprecated use `FieldMetadata$outboundSchema` instead. */
  export const outboundSchema = FieldMetadata$outboundSchema;
  /** @deprecated use `FieldMetadata$Outbound` instead. */
  export type Outbound = FieldMetadata$Outbound;
}

export function fieldMetadataToJSON(fieldMetadata: FieldMetadata): string {
  return JSON.stringify(FieldMetadata$outboundSchema.parse(fieldMetadata));
}

export function fieldMetadataFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetadata' from JSON`,
  );
}

/** @internal */
export const GetObjectMetadataForInstallationObjectMetadata$inboundSchema:
  z.ZodType<
    GetObjectMetadataForInstallationObjectMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    displayName: z.string().optional(),
    mappedObjectName: z.string().optional(),
    fields: z.record(z.lazy(() => FieldMetadata$inboundSchema)),
  });

/** @internal */
export type GetObjectMetadataForInstallationObjectMetadata$Outbound = {
  name: string;
  displayName?: string | undefined;
  mappedObjectName?: string | undefined;
  fields: { [k: string]: FieldMetadata$Outbound };
};

/** @internal */
export const GetObjectMetadataForInstallationObjectMetadata$outboundSchema:
  z.ZodType<
    GetObjectMetadataForInstallationObjectMetadata$Outbound,
    z.ZodTypeDef,
    GetObjectMetadataForInstallationObjectMetadata
  > = z.object({
    name: z.string(),
    displayName: z.string().optional(),
    mappedObjectName: z.string().optional(),
    fields: z.record(z.lazy(() => FieldMetadata$outboundSchema)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForInstallationObjectMetadata$ {
  /** @deprecated use `GetObjectMetadataForInstallationObjectMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForInstallationObjectMetadata$inboundSchema;
  /** @deprecated use `GetObjectMetadataForInstallationObjectMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForInstallationObjectMetadata$outboundSchema;
  /** @deprecated use `GetObjectMetadataForInstallationObjectMetadata$Outbound` instead. */
  export type Outbound =
    GetObjectMetadataForInstallationObjectMetadata$Outbound;
}

export function getObjectMetadataForInstallationObjectMetadataToJSON(
  getObjectMetadataForInstallationObjectMetadata:
    GetObjectMetadataForInstallationObjectMetadata,
): string {
  return JSON.stringify(
    GetObjectMetadataForInstallationObjectMetadata$outboundSchema.parse(
      getObjectMetadataForInstallationObjectMetadata,
    ),
  );
}

export function getObjectMetadataForInstallationObjectMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetObjectMetadataForInstallationObjectMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForInstallationObjectMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetObjectMetadataForInstallationObjectMetadata' from JSON`,
  );
}

/** @internal */
export const GetObjectMetadataForInstallationResponse$inboundSchema: z.ZodType<
  GetObjectMetadataForInstallationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetObjectMetadataForInstallationObjectMetadata$inboundSchema),
  z.lazy(() => GetObjectMetadataForInstallationAPIProblem$inboundSchema),
]);

/** @internal */
export type GetObjectMetadataForInstallationResponse$Outbound =
  | GetObjectMetadataForInstallationObjectMetadata$Outbound
  | GetObjectMetadataForInstallationAPIProblem$Outbound;

/** @internal */
export const GetObjectMetadataForInstallationResponse$outboundSchema: z.ZodType<
  GetObjectMetadataForInstallationResponse$Outbound,
  z.ZodTypeDef,
  GetObjectMetadataForInstallationResponse
> = z.union([
  z.lazy(() => GetObjectMetadataForInstallationObjectMetadata$outboundSchema),
  z.lazy(() => GetObjectMetadataForInstallationAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForInstallationResponse$ {
  /** @deprecated use `GetObjectMetadataForInstallationResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForInstallationResponse$inboundSchema;
  /** @deprecated use `GetObjectMetadataForInstallationResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForInstallationResponse$outboundSchema;
  /** @deprecated use `GetObjectMetadataForInstallationResponse$Outbound` instead. */
  export type Outbound = GetObjectMetadataForInstallationResponse$Outbound;
}

export function getObjectMetadataForInstallationResponseToJSON(
  getObjectMetadataForInstallationResponse:
    GetObjectMetadataForInstallationResponse,
): string {
  return JSON.stringify(
    GetObjectMetadataForInstallationResponse$outboundSchema.parse(
      getObjectMetadataForInstallationResponse,
    ),
  );
}

export function getObjectMetadataForInstallationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetObjectMetadataForInstallationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForInstallationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetObjectMetadataForInstallationResponse' from JSON`,
  );
}
