/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The source of the metadata field
 */
export const UpdateConnectionSource = {
  Input: "input",
  Token: "token",
  Provider: "provider",
} as const;
/**
 * The source of the metadata field
 */
export type UpdateConnectionSource = ClosedEnum<typeof UpdateConnectionSource>;

export type UpdateConnectionProviderMetadataInfo = {
  /**
   * The value of the metadata field
   */
  value: string;
  /**
   * The source of the metadata field
   */
  source: UpdateConnectionSource;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
};

export type UpdateConnectionBasicAuth = {
  /**
   * The username to use for the connection.
   */
  username: string;
  /**
   * The password to use for the connection.
   */
  password: string;
};

export type UpdateConnectionOauth2ClientCredentials = {
  /**
   * The client ID to use for the connection.
   */
  clientId: string;
  /**
   * The client secret to use for the connection.
   */
  clientSecret: string;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

export type UpdateConnectionOauth2PasswordCredentials = {
  /**
   * The username to use for the connection.
   */
  username: string;
  /**
   * The password to use for the connection.
   */
  password: string;
  /**
   * The client ID to use for the connection.
   */
  clientId: string;
  /**
   * The client secret to use for the connection.
   */
  clientSecret: string;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

/**
 * The access token for the connection.
 */
export type UpdateConnectionAccessToken = {
  token: string;
  expiresAt?: Date | undefined;
  issuedAt?: Date | undefined;
};

/**
 * The refresh token to use for the connection.
 */
export type UpdateConnectionRefreshToken = {
  token: string;
  expiresAt?: Date | undefined;
  issuedAt?: Date | undefined;
};

export type UpdateConnectionOAuth2AuthorizationCode = {
  /**
   * The access token for the connection.
   */
  accessToken?: UpdateConnectionAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: UpdateConnectionRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

export type ConnectionRequestBody = {
  /**
   * The ID of the provider workspace that this connection belongs to.
   */
  providerWorkspaceRef?: string | undefined;
  providerMetadata?:
    | { [k: string]: UpdateConnectionProviderMetadataInfo }
    | undefined;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName?: string | undefined;
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef?: string | undefined;
  /**
   * The name of the consumer that has access to this installation.
   */
  consumerName?: string | undefined;
  /**
   * The consumer reference.
   */
  consumerRef?: string | undefined;
  /**
   * The provider name (e.g. "salesforce", "hubspot")
   */
  provider?: string | undefined;
  /**
   * The API key to use for the connection.
   */
  apiKey?: string | undefined;
  basicAuth?: UpdateConnectionBasicAuth | undefined;
  oauth2ClientCredentials?: UpdateConnectionOauth2ClientCredentials | undefined;
  oauth2PasswordCredentials?:
    | UpdateConnectionOauth2PasswordCredentials
    | undefined;
  oauth2AuthorizationCode?: UpdateConnectionOAuth2AuthorizationCode | undefined;
};

export type UpdateConnectionUpdateConnectionRequest = {
  /**
   * The fields to update.
   */
  updateMask: Array<string>;
  connection: ConnectionRequestBody;
};

export type UpdateConnectionRequest = {
  /**
   * Project ID or Name.
   */
  projectIdOrName: string;
  /**
   * Connection ID.
   */
  connectionId: string;
  requestBody: UpdateConnectionUpdateConnectionRequest;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type UpdateConnectionAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type UpdateConnectionProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type UpdateConnectionGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type UpdateConnectionConsumer = {
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The name of the consumer.
   */
  consumerName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the consumer was created.
   */
  createTime: Date;
  /**
   * The time the consumer was last updated.
   */
  updateTime?: Date | undefined;
};

/**
 * The authentication scheme used for this connection.
 */
export const UpdateConnectionAuthScheme = {
  None: "none",
  ApiKey: "apiKey",
  Basic: "basic",
  Oauth2AuthorizationCode: "oauth2/authorizationCode",
  Oauth2AuthorizationCodePKCE: "oauth2/authorizationCodePKCE",
  Oauth2ClientCredentials: "oauth2/clientCredentials",
  Oauth2Password: "oauth2/password",
} as const;
/**
 * The authentication scheme used for this connection.
 */
export type UpdateConnectionAuthScheme = ClosedEnum<
  typeof UpdateConnectionAuthScheme
>;

/**
 * The status of the connection.
 */
export const UpdateConnectionStatus = {
  Created: "created",
  Working: "working",
  BadCredentials: "bad_credentials",
} as const;
/**
 * The status of the connection.
 */
export type UpdateConnectionStatus = ClosedEnum<typeof UpdateConnectionStatus>;

/**
 * The access token for the connection.
 */
export type UpdateConnectionConnectionsAccessToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

/**
 * The refresh token to use for the connection.
 */
export type UpdateConnectionConnectionsRefreshToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

export type UpdateConnectionOAuth2AuthorizationCodeToken = {
  /**
   * The access token for the connection.
   */
  accessToken?: UpdateConnectionConnectionsAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: UpdateConnectionConnectionsRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

/**
 * The source of the metadata field
 */
export const UpdateConnectionConnectionsSource = {
  Input: "input",
  Token: "token",
  Provider: "provider",
} as const;
/**
 * The source of the metadata field
 */
export type UpdateConnectionConnectionsSource = ClosedEnum<
  typeof UpdateConnectionConnectionsSource
>;

export type UpdateConnectionConnectionsProviderMetadataInfo = {
  /**
   * The value of the metadata field
   */
  value: string;
  /**
   * The source of the metadata field
   */
  source: UpdateConnectionConnectionsSource;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
};

/**
 * Connection updated successfully.
 */
export type UpdateConnectionConnection = {
  /**
   * The connection ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The SaaS provider that this Connection is for.
   */
  provider: string;
  providerApp?: UpdateConnectionProviderApp | undefined;
  group: UpdateConnectionGroup;
  consumer: UpdateConnectionConsumer;
  /**
   * If available, the identifier for the provider workspace (e.g. the Salesforce subdomain)
   */
  providerWorkspaceRef?: string | undefined;
  /**
   * If available, the ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
   */
  providerConsumerRef?: string | undefined;
  /**
   * The time the connection was created.
   */
  createTime: Date;
  /**
   * The time the connection was last updated.
   */
  updateTime?: Date | undefined;
  /**
   * The authentication scheme used for this connection.
   */
  authScheme: UpdateConnectionAuthScheme;
  /**
   * The status of the connection.
   */
  status: UpdateConnectionStatus;
  oauth2AuthorizationCode?:
    | UpdateConnectionOAuth2AuthorizationCodeToken
    | undefined;
  /**
   * The API key used while making the connection.
   */
  apiKey?: string | undefined;
  providerMetadata?: {
    [k: string]: UpdateConnectionConnectionsProviderMetadataInfo;
  } | undefined;
};

export type UpdateConnectionResponse =
  | UpdateConnectionConnection
  | UpdateConnectionAPIProblem;

/** @internal */
export const UpdateConnectionSource$inboundSchema: z.ZodNativeEnum<
  typeof UpdateConnectionSource
> = z.nativeEnum(UpdateConnectionSource);

/** @internal */
export const UpdateConnectionSource$outboundSchema: z.ZodNativeEnum<
  typeof UpdateConnectionSource
> = UpdateConnectionSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionSource$ {
  /** @deprecated use `UpdateConnectionSource$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionSource$inboundSchema;
  /** @deprecated use `UpdateConnectionSource$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionSource$outboundSchema;
}

/** @internal */
export const UpdateConnectionProviderMetadataInfo$inboundSchema: z.ZodType<
  UpdateConnectionProviderMetadataInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  source: UpdateConnectionSource$inboundSchema,
  displayName: z.string().optional(),
});

/** @internal */
export type UpdateConnectionProviderMetadataInfo$Outbound = {
  value: string;
  source: string;
  displayName?: string | undefined;
};

/** @internal */
export const UpdateConnectionProviderMetadataInfo$outboundSchema: z.ZodType<
  UpdateConnectionProviderMetadataInfo$Outbound,
  z.ZodTypeDef,
  UpdateConnectionProviderMetadataInfo
> = z.object({
  value: z.string(),
  source: UpdateConnectionSource$outboundSchema,
  displayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionProviderMetadataInfo$ {
  /** @deprecated use `UpdateConnectionProviderMetadataInfo$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionProviderMetadataInfo$inboundSchema;
  /** @deprecated use `UpdateConnectionProviderMetadataInfo$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionProviderMetadataInfo$outboundSchema;
  /** @deprecated use `UpdateConnectionProviderMetadataInfo$Outbound` instead. */
  export type Outbound = UpdateConnectionProviderMetadataInfo$Outbound;
}

export function updateConnectionProviderMetadataInfoToJSON(
  updateConnectionProviderMetadataInfo: UpdateConnectionProviderMetadataInfo,
): string {
  return JSON.stringify(
    UpdateConnectionProviderMetadataInfo$outboundSchema.parse(
      updateConnectionProviderMetadataInfo,
    ),
  );
}

export function updateConnectionProviderMetadataInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionProviderMetadataInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionProviderMetadataInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionProviderMetadataInfo' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionBasicAuth$inboundSchema: z.ZodType<
  UpdateConnectionBasicAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  password: z.string(),
});

/** @internal */
export type UpdateConnectionBasicAuth$Outbound = {
  username: string;
  password: string;
};

/** @internal */
export const UpdateConnectionBasicAuth$outboundSchema: z.ZodType<
  UpdateConnectionBasicAuth$Outbound,
  z.ZodTypeDef,
  UpdateConnectionBasicAuth
> = z.object({
  username: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionBasicAuth$ {
  /** @deprecated use `UpdateConnectionBasicAuth$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionBasicAuth$inboundSchema;
  /** @deprecated use `UpdateConnectionBasicAuth$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionBasicAuth$outboundSchema;
  /** @deprecated use `UpdateConnectionBasicAuth$Outbound` instead. */
  export type Outbound = UpdateConnectionBasicAuth$Outbound;
}

export function updateConnectionBasicAuthToJSON(
  updateConnectionBasicAuth: UpdateConnectionBasicAuth,
): string {
  return JSON.stringify(
    UpdateConnectionBasicAuth$outboundSchema.parse(updateConnectionBasicAuth),
  );
}

export function updateConnectionBasicAuthFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionBasicAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionBasicAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionBasicAuth' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionOauth2ClientCredentials$inboundSchema: z.ZodType<
  UpdateConnectionOauth2ClientCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateConnectionOauth2ClientCredentials$Outbound = {
  clientId: string;
  clientSecret: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const UpdateConnectionOauth2ClientCredentials$outboundSchema: z.ZodType<
  UpdateConnectionOauth2ClientCredentials$Outbound,
  z.ZodTypeDef,
  UpdateConnectionOauth2ClientCredentials
> = z.object({
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionOauth2ClientCredentials$ {
  /** @deprecated use `UpdateConnectionOauth2ClientCredentials$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionOauth2ClientCredentials$inboundSchema;
  /** @deprecated use `UpdateConnectionOauth2ClientCredentials$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionOauth2ClientCredentials$outboundSchema;
  /** @deprecated use `UpdateConnectionOauth2ClientCredentials$Outbound` instead. */
  export type Outbound = UpdateConnectionOauth2ClientCredentials$Outbound;
}

export function updateConnectionOauth2ClientCredentialsToJSON(
  updateConnectionOauth2ClientCredentials:
    UpdateConnectionOauth2ClientCredentials,
): string {
  return JSON.stringify(
    UpdateConnectionOauth2ClientCredentials$outboundSchema.parse(
      updateConnectionOauth2ClientCredentials,
    ),
  );
}

export function updateConnectionOauth2ClientCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConnectionOauth2ClientCredentials,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionOauth2ClientCredentials$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConnectionOauth2ClientCredentials' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionOauth2PasswordCredentials$inboundSchema: z.ZodType<
  UpdateConnectionOauth2PasswordCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  password: z.string(),
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateConnectionOauth2PasswordCredentials$Outbound = {
  username: string;
  password: string;
  clientId: string;
  clientSecret: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const UpdateConnectionOauth2PasswordCredentials$outboundSchema:
  z.ZodType<
    UpdateConnectionOauth2PasswordCredentials$Outbound,
    z.ZodTypeDef,
    UpdateConnectionOauth2PasswordCredentials
  > = z.object({
    username: z.string(),
    password: z.string(),
    clientId: z.string(),
    clientSecret: z.string(),
    scopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionOauth2PasswordCredentials$ {
  /** @deprecated use `UpdateConnectionOauth2PasswordCredentials$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionOauth2PasswordCredentials$inboundSchema;
  /** @deprecated use `UpdateConnectionOauth2PasswordCredentials$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionOauth2PasswordCredentials$outboundSchema;
  /** @deprecated use `UpdateConnectionOauth2PasswordCredentials$Outbound` instead. */
  export type Outbound = UpdateConnectionOauth2PasswordCredentials$Outbound;
}

export function updateConnectionOauth2PasswordCredentialsToJSON(
  updateConnectionOauth2PasswordCredentials:
    UpdateConnectionOauth2PasswordCredentials,
): string {
  return JSON.stringify(
    UpdateConnectionOauth2PasswordCredentials$outboundSchema.parse(
      updateConnectionOauth2PasswordCredentials,
    ),
  );
}

export function updateConnectionOauth2PasswordCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConnectionOauth2PasswordCredentials,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionOauth2PasswordCredentials$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConnectionOauth2PasswordCredentials' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionAccessToken$inboundSchema: z.ZodType<
  UpdateConnectionAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateConnectionAccessToken$Outbound = {
  token: string;
  expiresAt?: string | undefined;
  issuedAt?: string | undefined;
};

/** @internal */
export const UpdateConnectionAccessToken$outboundSchema: z.ZodType<
  UpdateConnectionAccessToken$Outbound,
  z.ZodTypeDef,
  UpdateConnectionAccessToken
> = z.object({
  token: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionAccessToken$ {
  /** @deprecated use `UpdateConnectionAccessToken$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionAccessToken$inboundSchema;
  /** @deprecated use `UpdateConnectionAccessToken$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionAccessToken$outboundSchema;
  /** @deprecated use `UpdateConnectionAccessToken$Outbound` instead. */
  export type Outbound = UpdateConnectionAccessToken$Outbound;
}

export function updateConnectionAccessTokenToJSON(
  updateConnectionAccessToken: UpdateConnectionAccessToken,
): string {
  return JSON.stringify(
    UpdateConnectionAccessToken$outboundSchema.parse(
      updateConnectionAccessToken,
    ),
  );
}

export function updateConnectionAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionAccessToken' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionRefreshToken$inboundSchema: z.ZodType<
  UpdateConnectionRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateConnectionRefreshToken$Outbound = {
  token: string;
  expiresAt?: string | undefined;
  issuedAt?: string | undefined;
};

/** @internal */
export const UpdateConnectionRefreshToken$outboundSchema: z.ZodType<
  UpdateConnectionRefreshToken$Outbound,
  z.ZodTypeDef,
  UpdateConnectionRefreshToken
> = z.object({
  token: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionRefreshToken$ {
  /** @deprecated use `UpdateConnectionRefreshToken$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionRefreshToken$inboundSchema;
  /** @deprecated use `UpdateConnectionRefreshToken$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionRefreshToken$outboundSchema;
  /** @deprecated use `UpdateConnectionRefreshToken$Outbound` instead. */
  export type Outbound = UpdateConnectionRefreshToken$Outbound;
}

export function updateConnectionRefreshTokenToJSON(
  updateConnectionRefreshToken: UpdateConnectionRefreshToken,
): string {
  return JSON.stringify(
    UpdateConnectionRefreshToken$outboundSchema.parse(
      updateConnectionRefreshToken,
    ),
  );
}

export function updateConnectionRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionRefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionRefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionRefreshToken' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionOAuth2AuthorizationCode$inboundSchema: z.ZodType<
  UpdateConnectionOAuth2AuthorizationCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.lazy(() => UpdateConnectionAccessToken$inboundSchema)
    .optional(),
  refreshToken: z.lazy(() => UpdateConnectionRefreshToken$inboundSchema)
    .optional(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateConnectionOAuth2AuthorizationCode$Outbound = {
  accessToken?: UpdateConnectionAccessToken$Outbound | undefined;
  refreshToken?: UpdateConnectionRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const UpdateConnectionOAuth2AuthorizationCode$outboundSchema: z.ZodType<
  UpdateConnectionOAuth2AuthorizationCode$Outbound,
  z.ZodTypeDef,
  UpdateConnectionOAuth2AuthorizationCode
> = z.object({
  accessToken: z.lazy(() => UpdateConnectionAccessToken$outboundSchema)
    .optional(),
  refreshToken: z.lazy(() => UpdateConnectionRefreshToken$outboundSchema)
    .optional(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionOAuth2AuthorizationCode$ {
  /** @deprecated use `UpdateConnectionOAuth2AuthorizationCode$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionOAuth2AuthorizationCode$inboundSchema;
  /** @deprecated use `UpdateConnectionOAuth2AuthorizationCode$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionOAuth2AuthorizationCode$outboundSchema;
  /** @deprecated use `UpdateConnectionOAuth2AuthorizationCode$Outbound` instead. */
  export type Outbound = UpdateConnectionOAuth2AuthorizationCode$Outbound;
}

export function updateConnectionOAuth2AuthorizationCodeToJSON(
  updateConnectionOAuth2AuthorizationCode:
    UpdateConnectionOAuth2AuthorizationCode,
): string {
  return JSON.stringify(
    UpdateConnectionOAuth2AuthorizationCode$outboundSchema.parse(
      updateConnectionOAuth2AuthorizationCode,
    ),
  );
}

export function updateConnectionOAuth2AuthorizationCodeFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConnectionOAuth2AuthorizationCode,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionOAuth2AuthorizationCode$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConnectionOAuth2AuthorizationCode' from JSON`,
  );
}

/** @internal */
export const ConnectionRequestBody$inboundSchema: z.ZodType<
  ConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  providerWorkspaceRef: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => UpdateConnectionProviderMetadataInfo$inboundSchema),
  ).optional(),
  groupName: z.string().optional(),
  groupRef: z.string().optional(),
  consumerName: z.string().optional(),
  consumerRef: z.string().optional(),
  provider: z.string().optional(),
  apiKey: z.string().optional(),
  basicAuth: z.lazy(() => UpdateConnectionBasicAuth$inboundSchema).optional(),
  oauth2ClientCredentials: z.lazy(() =>
    UpdateConnectionOauth2ClientCredentials$inboundSchema
  ).optional(),
  oauth2PasswordCredentials: z.lazy(() =>
    UpdateConnectionOauth2PasswordCredentials$inboundSchema
  ).optional(),
  oauth2AuthorizationCode: z.lazy(() =>
    UpdateConnectionOAuth2AuthorizationCode$inboundSchema
  ).optional(),
});

/** @internal */
export type ConnectionRequestBody$Outbound = {
  providerWorkspaceRef?: string | undefined;
  providerMetadata?: {
    [k: string]: UpdateConnectionProviderMetadataInfo$Outbound;
  } | undefined;
  groupName?: string | undefined;
  groupRef?: string | undefined;
  consumerName?: string | undefined;
  consumerRef?: string | undefined;
  provider?: string | undefined;
  apiKey?: string | undefined;
  basicAuth?: UpdateConnectionBasicAuth$Outbound | undefined;
  oauth2ClientCredentials?:
    | UpdateConnectionOauth2ClientCredentials$Outbound
    | undefined;
  oauth2PasswordCredentials?:
    | UpdateConnectionOauth2PasswordCredentials$Outbound
    | undefined;
  oauth2AuthorizationCode?:
    | UpdateConnectionOAuth2AuthorizationCode$Outbound
    | undefined;
};

/** @internal */
export const ConnectionRequestBody$outboundSchema: z.ZodType<
  ConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  ConnectionRequestBody
> = z.object({
  providerWorkspaceRef: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => UpdateConnectionProviderMetadataInfo$outboundSchema),
  ).optional(),
  groupName: z.string().optional(),
  groupRef: z.string().optional(),
  consumerName: z.string().optional(),
  consumerRef: z.string().optional(),
  provider: z.string().optional(),
  apiKey: z.string().optional(),
  basicAuth: z.lazy(() => UpdateConnectionBasicAuth$outboundSchema).optional(),
  oauth2ClientCredentials: z.lazy(() =>
    UpdateConnectionOauth2ClientCredentials$outboundSchema
  ).optional(),
  oauth2PasswordCredentials: z.lazy(() =>
    UpdateConnectionOauth2PasswordCredentials$outboundSchema
  ).optional(),
  oauth2AuthorizationCode: z.lazy(() =>
    UpdateConnectionOAuth2AuthorizationCode$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionRequestBody$ {
  /** @deprecated use `ConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = ConnectionRequestBody$inboundSchema;
  /** @deprecated use `ConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = ConnectionRequestBody$outboundSchema;
  /** @deprecated use `ConnectionRequestBody$Outbound` instead. */
  export type Outbound = ConnectionRequestBody$Outbound;
}

export function connectionRequestBodyToJSON(
  connectionRequestBody: ConnectionRequestBody,
): string {
  return JSON.stringify(
    ConnectionRequestBody$outboundSchema.parse(connectionRequestBody),
  );
}

export function connectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionUpdateConnectionRequest$inboundSchema: z.ZodType<
  UpdateConnectionUpdateConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  updateMask: z.array(z.string()),
  connection: z.lazy(() => ConnectionRequestBody$inboundSchema),
});

/** @internal */
export type UpdateConnectionUpdateConnectionRequest$Outbound = {
  updateMask: Array<string>;
  connection: ConnectionRequestBody$Outbound;
};

/** @internal */
export const UpdateConnectionUpdateConnectionRequest$outboundSchema: z.ZodType<
  UpdateConnectionUpdateConnectionRequest$Outbound,
  z.ZodTypeDef,
  UpdateConnectionUpdateConnectionRequest
> = z.object({
  updateMask: z.array(z.string()),
  connection: z.lazy(() => ConnectionRequestBody$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionUpdateConnectionRequest$ {
  /** @deprecated use `UpdateConnectionUpdateConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionUpdateConnectionRequest$inboundSchema;
  /** @deprecated use `UpdateConnectionUpdateConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionUpdateConnectionRequest$outboundSchema;
  /** @deprecated use `UpdateConnectionUpdateConnectionRequest$Outbound` instead. */
  export type Outbound = UpdateConnectionUpdateConnectionRequest$Outbound;
}

export function updateConnectionUpdateConnectionRequestToJSON(
  updateConnectionUpdateConnectionRequest:
    UpdateConnectionUpdateConnectionRequest,
): string {
  return JSON.stringify(
    UpdateConnectionUpdateConnectionRequest$outboundSchema.parse(
      updateConnectionUpdateConnectionRequest,
    ),
  );
}

export function updateConnectionUpdateConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConnectionUpdateConnectionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionUpdateConnectionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConnectionUpdateConnectionRequest' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionRequest$inboundSchema: z.ZodType<
  UpdateConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  connectionId: z.string(),
  RequestBody: z.lazy(() =>
    UpdateConnectionUpdateConnectionRequest$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateConnectionRequest$Outbound = {
  projectIdOrName: string;
  connectionId: string;
  RequestBody: UpdateConnectionUpdateConnectionRequest$Outbound;
};

/** @internal */
export const UpdateConnectionRequest$outboundSchema: z.ZodType<
  UpdateConnectionRequest$Outbound,
  z.ZodTypeDef,
  UpdateConnectionRequest
> = z.object({
  projectIdOrName: z.string(),
  connectionId: z.string(),
  requestBody: z.lazy(() =>
    UpdateConnectionUpdateConnectionRequest$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionRequest$ {
  /** @deprecated use `UpdateConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionRequest$inboundSchema;
  /** @deprecated use `UpdateConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionRequest$outboundSchema;
  /** @deprecated use `UpdateConnectionRequest$Outbound` instead. */
  export type Outbound = UpdateConnectionRequest$Outbound;
}

export function updateConnectionRequestToJSON(
  updateConnectionRequest: UpdateConnectionRequest,
): string {
  return JSON.stringify(
    UpdateConnectionRequest$outboundSchema.parse(updateConnectionRequest),
  );
}

export function updateConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionRequest' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionAPIProblem$inboundSchema: z.ZodType<
  UpdateConnectionAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateConnectionAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateConnectionAPIProblem$outboundSchema: z.ZodType<
  UpdateConnectionAPIProblem$Outbound,
  z.ZodTypeDef,
  UpdateConnectionAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionAPIProblem$ {
  /** @deprecated use `UpdateConnectionAPIProblem$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionAPIProblem$inboundSchema;
  /** @deprecated use `UpdateConnectionAPIProblem$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionAPIProblem$outboundSchema;
  /** @deprecated use `UpdateConnectionAPIProblem$Outbound` instead. */
  export type Outbound = UpdateConnectionAPIProblem$Outbound;
}

export function updateConnectionAPIProblemToJSON(
  updateConnectionAPIProblem: UpdateConnectionAPIProblem,
): string {
  return JSON.stringify(
    UpdateConnectionAPIProblem$outboundSchema.parse(updateConnectionAPIProblem),
  );
}

export function updateConnectionAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionAPIProblem' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionProviderApp$inboundSchema: z.ZodType<
  UpdateConnectionProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateConnectionProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateConnectionProviderApp$outboundSchema: z.ZodType<
  UpdateConnectionProviderApp$Outbound,
  z.ZodTypeDef,
  UpdateConnectionProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionProviderApp$ {
  /** @deprecated use `UpdateConnectionProviderApp$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionProviderApp$inboundSchema;
  /** @deprecated use `UpdateConnectionProviderApp$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionProviderApp$outboundSchema;
  /** @deprecated use `UpdateConnectionProviderApp$Outbound` instead. */
  export type Outbound = UpdateConnectionProviderApp$Outbound;
}

export function updateConnectionProviderAppToJSON(
  updateConnectionProviderApp: UpdateConnectionProviderApp,
): string {
  return JSON.stringify(
    UpdateConnectionProviderApp$outboundSchema.parse(
      updateConnectionProviderApp,
    ),
  );
}

export function updateConnectionProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionProviderApp' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionGroup$inboundSchema: z.ZodType<
  UpdateConnectionGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateConnectionGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateConnectionGroup$outboundSchema: z.ZodType<
  UpdateConnectionGroup$Outbound,
  z.ZodTypeDef,
  UpdateConnectionGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionGroup$ {
  /** @deprecated use `UpdateConnectionGroup$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionGroup$inboundSchema;
  /** @deprecated use `UpdateConnectionGroup$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionGroup$outboundSchema;
  /** @deprecated use `UpdateConnectionGroup$Outbound` instead. */
  export type Outbound = UpdateConnectionGroup$Outbound;
}

export function updateConnectionGroupToJSON(
  updateConnectionGroup: UpdateConnectionGroup,
): string {
  return JSON.stringify(
    UpdateConnectionGroup$outboundSchema.parse(updateConnectionGroup),
  );
}

export function updateConnectionGroupFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionGroup' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionConsumer$inboundSchema: z.ZodType<
  UpdateConnectionConsumer,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateConnectionConsumer$Outbound = {
  consumerRef: string;
  consumerName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateConnectionConsumer$outboundSchema: z.ZodType<
  UpdateConnectionConsumer$Outbound,
  z.ZodTypeDef,
  UpdateConnectionConsumer
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionConsumer$ {
  /** @deprecated use `UpdateConnectionConsumer$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionConsumer$inboundSchema;
  /** @deprecated use `UpdateConnectionConsumer$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionConsumer$outboundSchema;
  /** @deprecated use `UpdateConnectionConsumer$Outbound` instead. */
  export type Outbound = UpdateConnectionConsumer$Outbound;
}

export function updateConnectionConsumerToJSON(
  updateConnectionConsumer: UpdateConnectionConsumer,
): string {
  return JSON.stringify(
    UpdateConnectionConsumer$outboundSchema.parse(updateConnectionConsumer),
  );
}

export function updateConnectionConsumerFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionConsumer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionConsumer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionConsumer' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionAuthScheme$inboundSchema: z.ZodNativeEnum<
  typeof UpdateConnectionAuthScheme
> = z.nativeEnum(UpdateConnectionAuthScheme);

/** @internal */
export const UpdateConnectionAuthScheme$outboundSchema: z.ZodNativeEnum<
  typeof UpdateConnectionAuthScheme
> = UpdateConnectionAuthScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionAuthScheme$ {
  /** @deprecated use `UpdateConnectionAuthScheme$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionAuthScheme$inboundSchema;
  /** @deprecated use `UpdateConnectionAuthScheme$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionAuthScheme$outboundSchema;
}

/** @internal */
export const UpdateConnectionStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateConnectionStatus
> = z.nativeEnum(UpdateConnectionStatus);

/** @internal */
export const UpdateConnectionStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateConnectionStatus
> = UpdateConnectionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionStatus$ {
  /** @deprecated use `UpdateConnectionStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionStatus$inboundSchema;
  /** @deprecated use `UpdateConnectionStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionStatus$outboundSchema;
}

/** @internal */
export const UpdateConnectionConnectionsAccessToken$inboundSchema: z.ZodType<
  UpdateConnectionConnectionsAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateConnectionConnectionsAccessToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const UpdateConnectionConnectionsAccessToken$outboundSchema: z.ZodType<
  UpdateConnectionConnectionsAccessToken$Outbound,
  z.ZodTypeDef,
  UpdateConnectionConnectionsAccessToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionConnectionsAccessToken$ {
  /** @deprecated use `UpdateConnectionConnectionsAccessToken$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionConnectionsAccessToken$inboundSchema;
  /** @deprecated use `UpdateConnectionConnectionsAccessToken$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionConnectionsAccessToken$outboundSchema;
  /** @deprecated use `UpdateConnectionConnectionsAccessToken$Outbound` instead. */
  export type Outbound = UpdateConnectionConnectionsAccessToken$Outbound;
}

export function updateConnectionConnectionsAccessTokenToJSON(
  updateConnectionConnectionsAccessToken:
    UpdateConnectionConnectionsAccessToken,
): string {
  return JSON.stringify(
    UpdateConnectionConnectionsAccessToken$outboundSchema.parse(
      updateConnectionConnectionsAccessToken,
    ),
  );
}

export function updateConnectionConnectionsAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionConnectionsAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionConnectionsAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionConnectionsAccessToken' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionConnectionsRefreshToken$inboundSchema: z.ZodType<
  UpdateConnectionConnectionsRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateConnectionConnectionsRefreshToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const UpdateConnectionConnectionsRefreshToken$outboundSchema: z.ZodType<
  UpdateConnectionConnectionsRefreshToken$Outbound,
  z.ZodTypeDef,
  UpdateConnectionConnectionsRefreshToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionConnectionsRefreshToken$ {
  /** @deprecated use `UpdateConnectionConnectionsRefreshToken$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionConnectionsRefreshToken$inboundSchema;
  /** @deprecated use `UpdateConnectionConnectionsRefreshToken$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionConnectionsRefreshToken$outboundSchema;
  /** @deprecated use `UpdateConnectionConnectionsRefreshToken$Outbound` instead. */
  export type Outbound = UpdateConnectionConnectionsRefreshToken$Outbound;
}

export function updateConnectionConnectionsRefreshTokenToJSON(
  updateConnectionConnectionsRefreshToken:
    UpdateConnectionConnectionsRefreshToken,
): string {
  return JSON.stringify(
    UpdateConnectionConnectionsRefreshToken$outboundSchema.parse(
      updateConnectionConnectionsRefreshToken,
    ),
  );
}

export function updateConnectionConnectionsRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConnectionConnectionsRefreshToken,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionConnectionsRefreshToken$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConnectionConnectionsRefreshToken' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionOAuth2AuthorizationCodeToken$inboundSchema:
  z.ZodType<
    UpdateConnectionOAuth2AuthorizationCodeToken,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessToken: z.lazy(() =>
      UpdateConnectionConnectionsAccessToken$inboundSchema
    ).optional(),
    refreshToken: z.lazy(() =>
      UpdateConnectionConnectionsRefreshToken$inboundSchema
    ).optional(),
    scopes: z.array(z.string()).optional(),
  });

/** @internal */
export type UpdateConnectionOAuth2AuthorizationCodeToken$Outbound = {
  accessToken?: UpdateConnectionConnectionsAccessToken$Outbound | undefined;
  refreshToken?: UpdateConnectionConnectionsRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const UpdateConnectionOAuth2AuthorizationCodeToken$outboundSchema:
  z.ZodType<
    UpdateConnectionOAuth2AuthorizationCodeToken$Outbound,
    z.ZodTypeDef,
    UpdateConnectionOAuth2AuthorizationCodeToken
  > = z.object({
    accessToken: z.lazy(() =>
      UpdateConnectionConnectionsAccessToken$outboundSchema
    ).optional(),
    refreshToken: z.lazy(() =>
      UpdateConnectionConnectionsRefreshToken$outboundSchema
    ).optional(),
    scopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionOAuth2AuthorizationCodeToken$ {
  /** @deprecated use `UpdateConnectionOAuth2AuthorizationCodeToken$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionOAuth2AuthorizationCodeToken$inboundSchema;
  /** @deprecated use `UpdateConnectionOAuth2AuthorizationCodeToken$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionOAuth2AuthorizationCodeToken$outboundSchema;
  /** @deprecated use `UpdateConnectionOAuth2AuthorizationCodeToken$Outbound` instead. */
  export type Outbound = UpdateConnectionOAuth2AuthorizationCodeToken$Outbound;
}

export function updateConnectionOAuth2AuthorizationCodeTokenToJSON(
  updateConnectionOAuth2AuthorizationCodeToken:
    UpdateConnectionOAuth2AuthorizationCodeToken,
): string {
  return JSON.stringify(
    UpdateConnectionOAuth2AuthorizationCodeToken$outboundSchema.parse(
      updateConnectionOAuth2AuthorizationCodeToken,
    ),
  );
}

export function updateConnectionOAuth2AuthorizationCodeTokenFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConnectionOAuth2AuthorizationCodeToken,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionOAuth2AuthorizationCodeToken$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConnectionOAuth2AuthorizationCodeToken' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionConnectionsSource$inboundSchema: z.ZodNativeEnum<
  typeof UpdateConnectionConnectionsSource
> = z.nativeEnum(UpdateConnectionConnectionsSource);

/** @internal */
export const UpdateConnectionConnectionsSource$outboundSchema: z.ZodNativeEnum<
  typeof UpdateConnectionConnectionsSource
> = UpdateConnectionConnectionsSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionConnectionsSource$ {
  /** @deprecated use `UpdateConnectionConnectionsSource$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionConnectionsSource$inboundSchema;
  /** @deprecated use `UpdateConnectionConnectionsSource$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionConnectionsSource$outboundSchema;
}

/** @internal */
export const UpdateConnectionConnectionsProviderMetadataInfo$inboundSchema:
  z.ZodType<
    UpdateConnectionConnectionsProviderMetadataInfo,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
    source: UpdateConnectionConnectionsSource$inboundSchema,
    displayName: z.string().optional(),
  });

/** @internal */
export type UpdateConnectionConnectionsProviderMetadataInfo$Outbound = {
  value: string;
  source: string;
  displayName?: string | undefined;
};

/** @internal */
export const UpdateConnectionConnectionsProviderMetadataInfo$outboundSchema:
  z.ZodType<
    UpdateConnectionConnectionsProviderMetadataInfo$Outbound,
    z.ZodTypeDef,
    UpdateConnectionConnectionsProviderMetadataInfo
  > = z.object({
    value: z.string(),
    source: UpdateConnectionConnectionsSource$outboundSchema,
    displayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionConnectionsProviderMetadataInfo$ {
  /** @deprecated use `UpdateConnectionConnectionsProviderMetadataInfo$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConnectionConnectionsProviderMetadataInfo$inboundSchema;
  /** @deprecated use `UpdateConnectionConnectionsProviderMetadataInfo$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConnectionConnectionsProviderMetadataInfo$outboundSchema;
  /** @deprecated use `UpdateConnectionConnectionsProviderMetadataInfo$Outbound` instead. */
  export type Outbound =
    UpdateConnectionConnectionsProviderMetadataInfo$Outbound;
}

export function updateConnectionConnectionsProviderMetadataInfoToJSON(
  updateConnectionConnectionsProviderMetadataInfo:
    UpdateConnectionConnectionsProviderMetadataInfo,
): string {
  return JSON.stringify(
    UpdateConnectionConnectionsProviderMetadataInfo$outboundSchema.parse(
      updateConnectionConnectionsProviderMetadataInfo,
    ),
  );
}

export function updateConnectionConnectionsProviderMetadataInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConnectionConnectionsProviderMetadataInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConnectionConnectionsProviderMetadataInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConnectionConnectionsProviderMetadataInfo' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionConnection$inboundSchema: z.ZodType<
  UpdateConnectionConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => UpdateConnectionProviderApp$inboundSchema)
    .optional(),
  group: z.lazy(() => UpdateConnectionGroup$inboundSchema),
  consumer: z.lazy(() => UpdateConnectionConsumer$inboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  authScheme: UpdateConnectionAuthScheme$inboundSchema,
  status: UpdateConnectionStatus$inboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    UpdateConnectionOAuth2AuthorizationCodeToken$inboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => UpdateConnectionConnectionsProviderMetadataInfo$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateConnectionConnection$Outbound = {
  id: string;
  projectId: string;
  provider: string;
  providerApp?: UpdateConnectionProviderApp$Outbound | undefined;
  group: UpdateConnectionGroup$Outbound;
  consumer: UpdateConnectionConsumer$Outbound;
  providerWorkspaceRef?: string | undefined;
  providerConsumerRef?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  authScheme: string;
  status: string;
  oauth2AuthorizationCode?:
    | UpdateConnectionOAuth2AuthorizationCodeToken$Outbound
    | undefined;
  apiKey?: string | undefined;
  providerMetadata?: {
    [k: string]: UpdateConnectionConnectionsProviderMetadataInfo$Outbound;
  } | undefined;
};

/** @internal */
export const UpdateConnectionConnection$outboundSchema: z.ZodType<
  UpdateConnectionConnection$Outbound,
  z.ZodTypeDef,
  UpdateConnectionConnection
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => UpdateConnectionProviderApp$outboundSchema)
    .optional(),
  group: z.lazy(() => UpdateConnectionGroup$outboundSchema),
  consumer: z.lazy(() => UpdateConnectionConsumer$outboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  authScheme: UpdateConnectionAuthScheme$outboundSchema,
  status: UpdateConnectionStatus$outboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    UpdateConnectionOAuth2AuthorizationCodeToken$outboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() =>
      UpdateConnectionConnectionsProviderMetadataInfo$outboundSchema
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionConnection$ {
  /** @deprecated use `UpdateConnectionConnection$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionConnection$inboundSchema;
  /** @deprecated use `UpdateConnectionConnection$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionConnection$outboundSchema;
  /** @deprecated use `UpdateConnectionConnection$Outbound` instead. */
  export type Outbound = UpdateConnectionConnection$Outbound;
}

export function updateConnectionConnectionToJSON(
  updateConnectionConnection: UpdateConnectionConnection,
): string {
  return JSON.stringify(
    UpdateConnectionConnection$outboundSchema.parse(updateConnectionConnection),
  );
}

export function updateConnectionConnectionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionConnection' from JSON`,
  );
}

/** @internal */
export const UpdateConnectionResponse$inboundSchema: z.ZodType<
  UpdateConnectionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateConnectionConnection$inboundSchema),
  z.lazy(() => UpdateConnectionAPIProblem$inboundSchema),
]);

/** @internal */
export type UpdateConnectionResponse$Outbound =
  | UpdateConnectionConnection$Outbound
  | UpdateConnectionAPIProblem$Outbound;

/** @internal */
export const UpdateConnectionResponse$outboundSchema: z.ZodType<
  UpdateConnectionResponse$Outbound,
  z.ZodTypeDef,
  UpdateConnectionResponse
> = z.union([
  z.lazy(() => UpdateConnectionConnection$outboundSchema),
  z.lazy(() => UpdateConnectionAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionResponse$ {
  /** @deprecated use `UpdateConnectionResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionResponse$inboundSchema;
  /** @deprecated use `UpdateConnectionResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionResponse$outboundSchema;
  /** @deprecated use `UpdateConnectionResponse$Outbound` instead. */
  export type Outbound = UpdateConnectionResponse$Outbound;
}

export function updateConnectionResponseToJSON(
  updateConnectionResponse: UpdateConnectionResponse,
): string {
  return JSON.stringify(
    UpdateConnectionResponse$outboundSchema.parse(updateConnectionResponse),
  );
}

export function updateConnectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionResponse' from JSON`,
  );
}
