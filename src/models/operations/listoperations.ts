/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListOperationsRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  /**
   * The Ampersand installation ID.
   */
  installationId: string;
  /**
   * The number of operations to return.
   */
  pageSize?: number | undefined;
  /**
   * A cursor that can be passed to paginate through multiple pages of operations.
   */
  pageToken?: string | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListOperationsAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * Metadata associated with the operation.
 */
export type ListOperationsMetadata = {};

export type Operation = {
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  /**
   * The config ID.
   */
  configId: string;
  /**
   * The action type to perform for the given object.
   */
  actionType: string;
  /**
   * The operation ID.
   */
  id: string;
  /**
   * The Ampersand installation ID.
   */
  installationId: string;
  /**
   * The status of the operation.
   */
  status: string;
  /**
   * The result of the operation.
   */
  result?: string | undefined;
  /**
   * Metadata associated with the operation.
   */
  metadata?: ListOperationsMetadata | undefined;
  /**
   * The time the operation was created.
   */
  createTime?: Date | undefined;
};

export type PaginationInformation = {
  /**
   * If set to true, this is the last page of results for the given operation. There are no more results & there will be no nextPageToken sent when done is true.
   */
  done: boolean;
  /**
   * If present, set this value against your 'pageToken' query parameter in the next API call, which will retrieve the next set of results.
   */
  nextPageToken?: string | undefined;
};

/**
 * List of operations
 */
export type ListOperationsResponseBody = {
  results: Array<Operation>;
  pagination: PaginationInformation;
};

export type ListOperationsResponse =
  | ListOperationsResponseBody
  | ListOperationsAPIProblem;

/** @internal */
export const ListOperationsRequest$inboundSchema: z.ZodType<
  ListOperationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  installationId: z.string(),
  pageSize: z.number().int().default(200),
  pageToken: z.string().optional(),
});

/** @internal */
export type ListOperationsRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  installationId: string;
  pageSize: number;
  pageToken?: string | undefined;
};

/** @internal */
export const ListOperationsRequest$outboundSchema: z.ZodType<
  ListOperationsRequest$Outbound,
  z.ZodTypeDef,
  ListOperationsRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  installationId: z.string(),
  pageSize: z.number().int().default(200),
  pageToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOperationsRequest$ {
  /** @deprecated use `ListOperationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListOperationsRequest$inboundSchema;
  /** @deprecated use `ListOperationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListOperationsRequest$outboundSchema;
  /** @deprecated use `ListOperationsRequest$Outbound` instead. */
  export type Outbound = ListOperationsRequest$Outbound;
}

export function listOperationsRequestToJSON(
  listOperationsRequest: ListOperationsRequest,
): string {
  return JSON.stringify(
    ListOperationsRequest$outboundSchema.parse(listOperationsRequest),
  );
}

export function listOperationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOperationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOperationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOperationsRequest' from JSON`,
  );
}

/** @internal */
export const ListOperationsAPIProblem$inboundSchema: z.ZodType<
  ListOperationsAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListOperationsAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListOperationsAPIProblem$outboundSchema: z.ZodType<
  ListOperationsAPIProblem$Outbound,
  z.ZodTypeDef,
  ListOperationsAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOperationsAPIProblem$ {
  /** @deprecated use `ListOperationsAPIProblem$inboundSchema` instead. */
  export const inboundSchema = ListOperationsAPIProblem$inboundSchema;
  /** @deprecated use `ListOperationsAPIProblem$outboundSchema` instead. */
  export const outboundSchema = ListOperationsAPIProblem$outboundSchema;
  /** @deprecated use `ListOperationsAPIProblem$Outbound` instead. */
  export type Outbound = ListOperationsAPIProblem$Outbound;
}

export function listOperationsAPIProblemToJSON(
  listOperationsAPIProblem: ListOperationsAPIProblem,
): string {
  return JSON.stringify(
    ListOperationsAPIProblem$outboundSchema.parse(listOperationsAPIProblem),
  );
}

export function listOperationsAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<ListOperationsAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOperationsAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOperationsAPIProblem' from JSON`,
  );
}

/** @internal */
export const ListOperationsMetadata$inboundSchema: z.ZodType<
  ListOperationsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListOperationsMetadata$Outbound = {};

/** @internal */
export const ListOperationsMetadata$outboundSchema: z.ZodType<
  ListOperationsMetadata$Outbound,
  z.ZodTypeDef,
  ListOperationsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOperationsMetadata$ {
  /** @deprecated use `ListOperationsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListOperationsMetadata$inboundSchema;
  /** @deprecated use `ListOperationsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListOperationsMetadata$outboundSchema;
  /** @deprecated use `ListOperationsMetadata$Outbound` instead. */
  export type Outbound = ListOperationsMetadata$Outbound;
}

export function listOperationsMetadataToJSON(
  listOperationsMetadata: ListOperationsMetadata,
): string {
  return JSON.stringify(
    ListOperationsMetadata$outboundSchema.parse(listOperationsMetadata),
  );
}

export function listOperationsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListOperationsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOperationsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOperationsMetadata' from JSON`,
  );
}

/** @internal */
export const Operation$inboundSchema: z.ZodType<
  Operation,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  integrationId: z.string(),
  configId: z.string(),
  actionType: z.string(),
  id: z.string(),
  installationId: z.string(),
  status: z.string(),
  result: z.string().optional(),
  metadata: z.lazy(() => ListOperationsMetadata$inboundSchema).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Operation$Outbound = {
  projectId: string;
  integrationId: string;
  configId: string;
  actionType: string;
  id: string;
  installationId: string;
  status: string;
  result?: string | undefined;
  metadata?: ListOperationsMetadata$Outbound | undefined;
  createTime?: string | undefined;
};

/** @internal */
export const Operation$outboundSchema: z.ZodType<
  Operation$Outbound,
  z.ZodTypeDef,
  Operation
> = z.object({
  projectId: z.string(),
  integrationId: z.string(),
  configId: z.string(),
  actionType: z.string(),
  id: z.string(),
  installationId: z.string(),
  status: z.string(),
  result: z.string().optional(),
  metadata: z.lazy(() => ListOperationsMetadata$outboundSchema).optional(),
  createTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operation$ {
  /** @deprecated use `Operation$inboundSchema` instead. */
  export const inboundSchema = Operation$inboundSchema;
  /** @deprecated use `Operation$outboundSchema` instead. */
  export const outboundSchema = Operation$outboundSchema;
  /** @deprecated use `Operation$Outbound` instead. */
  export type Outbound = Operation$Outbound;
}

export function operationToJSON(operation: Operation): string {
  return JSON.stringify(Operation$outboundSchema.parse(operation));
}

export function operationFromJSON(
  jsonString: string,
): SafeParseResult<Operation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Operation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Operation' from JSON`,
  );
}

/** @internal */
export const PaginationInformation$inboundSchema: z.ZodType<
  PaginationInformation,
  z.ZodTypeDef,
  unknown
> = z.object({
  done: z.boolean(),
  nextPageToken: z.string().optional(),
});

/** @internal */
export type PaginationInformation$Outbound = {
  done: boolean;
  nextPageToken?: string | undefined;
};

/** @internal */
export const PaginationInformation$outboundSchema: z.ZodType<
  PaginationInformation$Outbound,
  z.ZodTypeDef,
  PaginationInformation
> = z.object({
  done: z.boolean(),
  nextPageToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationInformation$ {
  /** @deprecated use `PaginationInformation$inboundSchema` instead. */
  export const inboundSchema = PaginationInformation$inboundSchema;
  /** @deprecated use `PaginationInformation$outboundSchema` instead. */
  export const outboundSchema = PaginationInformation$outboundSchema;
  /** @deprecated use `PaginationInformation$Outbound` instead. */
  export type Outbound = PaginationInformation$Outbound;
}

export function paginationInformationToJSON(
  paginationInformation: PaginationInformation,
): string {
  return JSON.stringify(
    PaginationInformation$outboundSchema.parse(paginationInformation),
  );
}

export function paginationInformationFromJSON(
  jsonString: string,
): SafeParseResult<PaginationInformation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationInformation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationInformation' from JSON`,
  );
}

/** @internal */
export const ListOperationsResponseBody$inboundSchema: z.ZodType<
  ListOperationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(z.lazy(() => Operation$inboundSchema)),
  pagination: z.lazy(() => PaginationInformation$inboundSchema),
});

/** @internal */
export type ListOperationsResponseBody$Outbound = {
  results: Array<Operation$Outbound>;
  pagination: PaginationInformation$Outbound;
};

/** @internal */
export const ListOperationsResponseBody$outboundSchema: z.ZodType<
  ListOperationsResponseBody$Outbound,
  z.ZodTypeDef,
  ListOperationsResponseBody
> = z.object({
  results: z.array(z.lazy(() => Operation$outboundSchema)),
  pagination: z.lazy(() => PaginationInformation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOperationsResponseBody$ {
  /** @deprecated use `ListOperationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListOperationsResponseBody$inboundSchema;
  /** @deprecated use `ListOperationsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListOperationsResponseBody$outboundSchema;
  /** @deprecated use `ListOperationsResponseBody$Outbound` instead. */
  export type Outbound = ListOperationsResponseBody$Outbound;
}

export function listOperationsResponseBodyToJSON(
  listOperationsResponseBody: ListOperationsResponseBody,
): string {
  return JSON.stringify(
    ListOperationsResponseBody$outboundSchema.parse(listOperationsResponseBody),
  );
}

export function listOperationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListOperationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOperationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOperationsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListOperationsResponse$inboundSchema: z.ZodType<
  ListOperationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListOperationsResponseBody$inboundSchema),
  z.lazy(() => ListOperationsAPIProblem$inboundSchema),
]);

/** @internal */
export type ListOperationsResponse$Outbound =
  | ListOperationsResponseBody$Outbound
  | ListOperationsAPIProblem$Outbound;

/** @internal */
export const ListOperationsResponse$outboundSchema: z.ZodType<
  ListOperationsResponse$Outbound,
  z.ZodTypeDef,
  ListOperationsResponse
> = z.union([
  z.lazy(() => ListOperationsResponseBody$outboundSchema),
  z.lazy(() => ListOperationsAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOperationsResponse$ {
  /** @deprecated use `ListOperationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListOperationsResponse$inboundSchema;
  /** @deprecated use `ListOperationsResponse$outboundSchema` instead. */
  export const outboundSchema = ListOperationsResponse$outboundSchema;
  /** @deprecated use `ListOperationsResponse$Outbound` instead. */
  export type Outbound = ListOperationsResponse$Outbound;
}

export function listOperationsResponseToJSON(
  listOperationsResponse: ListOperationsResponse,
): string {
  return JSON.stringify(
    ListOperationsResponse$outboundSchema.parse(listOperationsResponse),
  );
}

export function listOperationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListOperationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOperationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOperationsResponse' from JSON`,
  );
}
