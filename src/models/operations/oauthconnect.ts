/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The source of the metadata field
 */
export const Source = {
  Input: "input",
  Token: "token",
  Provider: "provider",
} as const;
/**
 * The source of the metadata field
 */
export type Source = ClosedEnum<typeof Source>;

export type ProviderMetadataInfo = {
  /**
   * The value of the metadata field
   */
  value: string;
  /**
   * The source of the metadata field
   */
  source: Source;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
};

export type OauthConnectRequestBody = {
  /**
   * The identifier for the provider workspace (e.g. the Salesforce subdomain).
   */
  providerWorkspaceRef?: string | undefined;
  providerMetadata?: { [k: string]: ProviderMetadataInfo } | undefined;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID that your app uses to identify the group of users for this Connection, this can be an Org ID, workspace ID, etc.
   */
  groupRef: string;
  /**
   * The display name for the group. Defaults to groupRef if not provided.
   */
  groupName?: string | undefined;
  /**
   * The ID that your app uses to identify the user whose SaaS credential will be used for this OAuth flow.
   */
  consumerRef: string;
  /**
   * The display name for the consumer. Defaults to consumerRef if not provided.
   */
  consumerName?: string | undefined;
  /**
   * ID of the provider app, returned from a CreateProviderApp call. If omitted, the default provider app that was set up on the Ampersand Dashboard is assumed.
   */
  providerAppId?: string | undefined;
  /**
   * The provider that this app connects to.
   */
  provider: string;
  enableCSRFProtection?: boolean | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type OauthConnectAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type OauthConnectResponse = OauthConnectAPIProblem | string;

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const ProviderMetadataInfo$inboundSchema: z.ZodType<
  ProviderMetadataInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  source: Source$inboundSchema,
  displayName: z.string().optional(),
});

/** @internal */
export type ProviderMetadataInfo$Outbound = {
  value: string;
  source: string;
  displayName?: string | undefined;
};

/** @internal */
export const ProviderMetadataInfo$outboundSchema: z.ZodType<
  ProviderMetadataInfo$Outbound,
  z.ZodTypeDef,
  ProviderMetadataInfo
> = z.object({
  value: z.string(),
  source: Source$outboundSchema,
  displayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderMetadataInfo$ {
  /** @deprecated use `ProviderMetadataInfo$inboundSchema` instead. */
  export const inboundSchema = ProviderMetadataInfo$inboundSchema;
  /** @deprecated use `ProviderMetadataInfo$outboundSchema` instead. */
  export const outboundSchema = ProviderMetadataInfo$outboundSchema;
  /** @deprecated use `ProviderMetadataInfo$Outbound` instead. */
  export type Outbound = ProviderMetadataInfo$Outbound;
}

export function providerMetadataInfoToJSON(
  providerMetadataInfo: ProviderMetadataInfo,
): string {
  return JSON.stringify(
    ProviderMetadataInfo$outboundSchema.parse(providerMetadataInfo),
  );
}

export function providerMetadataInfoFromJSON(
  jsonString: string,
): SafeParseResult<ProviderMetadataInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProviderMetadataInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProviderMetadataInfo' from JSON`,
  );
}

/** @internal */
export const OauthConnectRequestBody$inboundSchema: z.ZodType<
  OauthConnectRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  providerWorkspaceRef: z.string().optional(),
  providerMetadata: z.record(z.lazy(() => ProviderMetadataInfo$inboundSchema))
    .optional(),
  projectId: z.string(),
  groupRef: z.string(),
  groupName: z.string().optional(),
  consumerRef: z.string(),
  consumerName: z.string().optional(),
  providerAppId: z.string().optional(),
  provider: z.string(),
  enableCSRFProtection: z.boolean().optional(),
});

/** @internal */
export type OauthConnectRequestBody$Outbound = {
  providerWorkspaceRef?: string | undefined;
  providerMetadata?: { [k: string]: ProviderMetadataInfo$Outbound } | undefined;
  projectId: string;
  groupRef: string;
  groupName?: string | undefined;
  consumerRef: string;
  consumerName?: string | undefined;
  providerAppId?: string | undefined;
  provider: string;
  enableCSRFProtection?: boolean | undefined;
};

/** @internal */
export const OauthConnectRequestBody$outboundSchema: z.ZodType<
  OauthConnectRequestBody$Outbound,
  z.ZodTypeDef,
  OauthConnectRequestBody
> = z.object({
  providerWorkspaceRef: z.string().optional(),
  providerMetadata: z.record(z.lazy(() => ProviderMetadataInfo$outboundSchema))
    .optional(),
  projectId: z.string(),
  groupRef: z.string(),
  groupName: z.string().optional(),
  consumerRef: z.string(),
  consumerName: z.string().optional(),
  providerAppId: z.string().optional(),
  provider: z.string(),
  enableCSRFProtection: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthConnectRequestBody$ {
  /** @deprecated use `OauthConnectRequestBody$inboundSchema` instead. */
  export const inboundSchema = OauthConnectRequestBody$inboundSchema;
  /** @deprecated use `OauthConnectRequestBody$outboundSchema` instead. */
  export const outboundSchema = OauthConnectRequestBody$outboundSchema;
  /** @deprecated use `OauthConnectRequestBody$Outbound` instead. */
  export type Outbound = OauthConnectRequestBody$Outbound;
}

export function oauthConnectRequestBodyToJSON(
  oauthConnectRequestBody: OauthConnectRequestBody,
): string {
  return JSON.stringify(
    OauthConnectRequestBody$outboundSchema.parse(oauthConnectRequestBody),
  );
}

export function oauthConnectRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<OauthConnectRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthConnectRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthConnectRequestBody' from JSON`,
  );
}

/** @internal */
export const OauthConnectAPIProblem$inboundSchema: z.ZodType<
  OauthConnectAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type OauthConnectAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const OauthConnectAPIProblem$outboundSchema: z.ZodType<
  OauthConnectAPIProblem$Outbound,
  z.ZodTypeDef,
  OauthConnectAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthConnectAPIProblem$ {
  /** @deprecated use `OauthConnectAPIProblem$inboundSchema` instead. */
  export const inboundSchema = OauthConnectAPIProblem$inboundSchema;
  /** @deprecated use `OauthConnectAPIProblem$outboundSchema` instead. */
  export const outboundSchema = OauthConnectAPIProblem$outboundSchema;
  /** @deprecated use `OauthConnectAPIProblem$Outbound` instead. */
  export type Outbound = OauthConnectAPIProblem$Outbound;
}

export function oauthConnectAPIProblemToJSON(
  oauthConnectAPIProblem: OauthConnectAPIProblem,
): string {
  return JSON.stringify(
    OauthConnectAPIProblem$outboundSchema.parse(oauthConnectAPIProblem),
  );
}

export function oauthConnectAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<OauthConnectAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthConnectAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthConnectAPIProblem' from JSON`,
  );
}

/** @internal */
export const OauthConnectResponse$inboundSchema: z.ZodType<
  OauthConnectResponse,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => OauthConnectAPIProblem$inboundSchema), z.string()]);

/** @internal */
export type OauthConnectResponse$Outbound =
  | OauthConnectAPIProblem$Outbound
  | string;

/** @internal */
export const OauthConnectResponse$outboundSchema: z.ZodType<
  OauthConnectResponse$Outbound,
  z.ZodTypeDef,
  OauthConnectResponse
> = z.union([z.lazy(() => OauthConnectAPIProblem$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthConnectResponse$ {
  /** @deprecated use `OauthConnectResponse$inboundSchema` instead. */
  export const inboundSchema = OauthConnectResponse$inboundSchema;
  /** @deprecated use `OauthConnectResponse$outboundSchema` instead. */
  export const outboundSchema = OauthConnectResponse$outboundSchema;
  /** @deprecated use `OauthConnectResponse$Outbound` instead. */
  export type Outbound = OauthConnectResponse$Outbound;
}

export function oauthConnectResponseToJSON(
  oauthConnectResponse: OauthConnectResponse,
): string {
  return JSON.stringify(
    OauthConnectResponse$outboundSchema.parse(oauthConnectResponse),
  );
}

export function oauthConnectResponseFromJSON(
  jsonString: string,
): SafeParseResult<OauthConnectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthConnectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthConnectResponse' from JSON`,
  );
}
