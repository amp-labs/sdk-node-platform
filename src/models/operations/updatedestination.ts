/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateDestinationMetadata = {
  /**
   * Webhook URL
   */
  url?: string | undefined;
  /**
   * Additional headers to add when Ampersand sends a webhook message
   */
  headers?: { [k: string]: string } | null | undefined;
};

export type Destination = {
  /**
   * User-friendly name for the destination
   */
  name?: string | undefined;
  metadata?: UpdateDestinationMetadata | undefined;
};

export type UpdateDestinationRequestBody = {
  updateMask: Array<string>;
  destination: Destination;
};

export type UpdateDestinationRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  /**
   * The destination ID.
   */
  destination: string;
  requestBody: UpdateDestinationRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type UpdateDestinationAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type UpdateDestinationDestinationsMetadata = {
  /**
   * Webhook URL
   */
  url?: string | undefined;
  /**
   * Additional headers to add when Ampersand sends a webhook message
   */
  headers?: { [k: string]: string } | null | undefined;
};

/**
 * Updated
 */
export type UpdateDestinationDestination = {
  /**
   * The destination ID.
   */
  id: string;
  /**
   * User-defined name for the destination
   */
  name: string;
  /**
   * The type of the destination
   */
  type: string;
  metadata: UpdateDestinationDestinationsMetadata;
  /**
   * The time the destination was created.
   */
  createTime: Date;
  /**
   * The time the destination was updated.
   */
  updateTime?: Date | undefined;
};

export type UpdateDestinationResponse =
  | UpdateDestinationDestination
  | UpdateDestinationAPIProblem;

/** @internal */
export const UpdateDestinationMetadata$inboundSchema: z.ZodType<
  UpdateDestinationMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  headers: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type UpdateDestinationMetadata$Outbound = {
  url?: string | undefined;
  headers?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const UpdateDestinationMetadata$outboundSchema: z.ZodType<
  UpdateDestinationMetadata$Outbound,
  z.ZodTypeDef,
  UpdateDestinationMetadata
> = z.object({
  url: z.string().optional(),
  headers: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDestinationMetadata$ {
  /** @deprecated use `UpdateDestinationMetadata$inboundSchema` instead. */
  export const inboundSchema = UpdateDestinationMetadata$inboundSchema;
  /** @deprecated use `UpdateDestinationMetadata$outboundSchema` instead. */
  export const outboundSchema = UpdateDestinationMetadata$outboundSchema;
  /** @deprecated use `UpdateDestinationMetadata$Outbound` instead. */
  export type Outbound = UpdateDestinationMetadata$Outbound;
}

export function updateDestinationMetadataToJSON(
  updateDestinationMetadata: UpdateDestinationMetadata,
): string {
  return JSON.stringify(
    UpdateDestinationMetadata$outboundSchema.parse(updateDestinationMetadata),
  );
}

export function updateDestinationMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDestinationMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDestinationMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDestinationMetadata' from JSON`,
  );
}

/** @internal */
export const Destination$inboundSchema: z.ZodType<
  Destination,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  metadata: z.lazy(() => UpdateDestinationMetadata$inboundSchema).optional(),
});

/** @internal */
export type Destination$Outbound = {
  name?: string | undefined;
  metadata?: UpdateDestinationMetadata$Outbound | undefined;
};

/** @internal */
export const Destination$outboundSchema: z.ZodType<
  Destination$Outbound,
  z.ZodTypeDef,
  Destination
> = z.object({
  name: z.string().optional(),
  metadata: z.lazy(() => UpdateDestinationMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Destination$ {
  /** @deprecated use `Destination$inboundSchema` instead. */
  export const inboundSchema = Destination$inboundSchema;
  /** @deprecated use `Destination$outboundSchema` instead. */
  export const outboundSchema = Destination$outboundSchema;
  /** @deprecated use `Destination$Outbound` instead. */
  export type Outbound = Destination$Outbound;
}

export function destinationToJSON(destination: Destination): string {
  return JSON.stringify(Destination$outboundSchema.parse(destination));
}

export function destinationFromJSON(
  jsonString: string,
): SafeParseResult<Destination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Destination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Destination' from JSON`,
  );
}

/** @internal */
export const UpdateDestinationRequestBody$inboundSchema: z.ZodType<
  UpdateDestinationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  updateMask: z.array(z.string()),
  destination: z.lazy(() => Destination$inboundSchema),
});

/** @internal */
export type UpdateDestinationRequestBody$Outbound = {
  updateMask: Array<string>;
  destination: Destination$Outbound;
};

/** @internal */
export const UpdateDestinationRequestBody$outboundSchema: z.ZodType<
  UpdateDestinationRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateDestinationRequestBody
> = z.object({
  updateMask: z.array(z.string()),
  destination: z.lazy(() => Destination$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDestinationRequestBody$ {
  /** @deprecated use `UpdateDestinationRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDestinationRequestBody$inboundSchema;
  /** @deprecated use `UpdateDestinationRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateDestinationRequestBody$outboundSchema;
  /** @deprecated use `UpdateDestinationRequestBody$Outbound` instead. */
  export type Outbound = UpdateDestinationRequestBody$Outbound;
}

export function updateDestinationRequestBodyToJSON(
  updateDestinationRequestBody: UpdateDestinationRequestBody,
): string {
  return JSON.stringify(
    UpdateDestinationRequestBody$outboundSchema.parse(
      updateDestinationRequestBody,
    ),
  );
}

export function updateDestinationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDestinationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDestinationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDestinationRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateDestinationRequest$inboundSchema: z.ZodType<
  UpdateDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  destination: z.string(),
  RequestBody: z.lazy(() => UpdateDestinationRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateDestinationRequest$Outbound = {
  projectIdOrName: string;
  destination: string;
  RequestBody: UpdateDestinationRequestBody$Outbound;
};

/** @internal */
export const UpdateDestinationRequest$outboundSchema: z.ZodType<
  UpdateDestinationRequest$Outbound,
  z.ZodTypeDef,
  UpdateDestinationRequest
> = z.object({
  projectIdOrName: z.string(),
  destination: z.string(),
  requestBody: z.lazy(() => UpdateDestinationRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDestinationRequest$ {
  /** @deprecated use `UpdateDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDestinationRequest$inboundSchema;
  /** @deprecated use `UpdateDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDestinationRequest$outboundSchema;
  /** @deprecated use `UpdateDestinationRequest$Outbound` instead. */
  export type Outbound = UpdateDestinationRequest$Outbound;
}

export function updateDestinationRequestToJSON(
  updateDestinationRequest: UpdateDestinationRequest,
): string {
  return JSON.stringify(
    UpdateDestinationRequest$outboundSchema.parse(updateDestinationRequest),
  );
}

export function updateDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDestinationRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDestinationAPIProblem$inboundSchema: z.ZodType<
  UpdateDestinationAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateDestinationAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateDestinationAPIProblem$outboundSchema: z.ZodType<
  UpdateDestinationAPIProblem$Outbound,
  z.ZodTypeDef,
  UpdateDestinationAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDestinationAPIProblem$ {
  /** @deprecated use `UpdateDestinationAPIProblem$inboundSchema` instead. */
  export const inboundSchema = UpdateDestinationAPIProblem$inboundSchema;
  /** @deprecated use `UpdateDestinationAPIProblem$outboundSchema` instead. */
  export const outboundSchema = UpdateDestinationAPIProblem$outboundSchema;
  /** @deprecated use `UpdateDestinationAPIProblem$Outbound` instead. */
  export type Outbound = UpdateDestinationAPIProblem$Outbound;
}

export function updateDestinationAPIProblemToJSON(
  updateDestinationAPIProblem: UpdateDestinationAPIProblem,
): string {
  return JSON.stringify(
    UpdateDestinationAPIProblem$outboundSchema.parse(
      updateDestinationAPIProblem,
    ),
  );
}

export function updateDestinationAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDestinationAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDestinationAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDestinationAPIProblem' from JSON`,
  );
}

/** @internal */
export const UpdateDestinationDestinationsMetadata$inboundSchema: z.ZodType<
  UpdateDestinationDestinationsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  headers: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type UpdateDestinationDestinationsMetadata$Outbound = {
  url?: string | undefined;
  headers?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const UpdateDestinationDestinationsMetadata$outboundSchema: z.ZodType<
  UpdateDestinationDestinationsMetadata$Outbound,
  z.ZodTypeDef,
  UpdateDestinationDestinationsMetadata
> = z.object({
  url: z.string().optional(),
  headers: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDestinationDestinationsMetadata$ {
  /** @deprecated use `UpdateDestinationDestinationsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDestinationDestinationsMetadata$inboundSchema;
  /** @deprecated use `UpdateDestinationDestinationsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDestinationDestinationsMetadata$outboundSchema;
  /** @deprecated use `UpdateDestinationDestinationsMetadata$Outbound` instead. */
  export type Outbound = UpdateDestinationDestinationsMetadata$Outbound;
}

export function updateDestinationDestinationsMetadataToJSON(
  updateDestinationDestinationsMetadata: UpdateDestinationDestinationsMetadata,
): string {
  return JSON.stringify(
    UpdateDestinationDestinationsMetadata$outboundSchema.parse(
      updateDestinationDestinationsMetadata,
    ),
  );
}

export function updateDestinationDestinationsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDestinationDestinationsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDestinationDestinationsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDestinationDestinationsMetadata' from JSON`,
  );
}

/** @internal */
export const UpdateDestinationDestination$inboundSchema: z.ZodType<
  UpdateDestinationDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  metadata: z.lazy(() => UpdateDestinationDestinationsMetadata$inboundSchema),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateDestinationDestination$Outbound = {
  id: string;
  name: string;
  type: string;
  metadata: UpdateDestinationDestinationsMetadata$Outbound;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateDestinationDestination$outboundSchema: z.ZodType<
  UpdateDestinationDestination$Outbound,
  z.ZodTypeDef,
  UpdateDestinationDestination
> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  metadata: z.lazy(() => UpdateDestinationDestinationsMetadata$outboundSchema),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDestinationDestination$ {
  /** @deprecated use `UpdateDestinationDestination$inboundSchema` instead. */
  export const inboundSchema = UpdateDestinationDestination$inboundSchema;
  /** @deprecated use `UpdateDestinationDestination$outboundSchema` instead. */
  export const outboundSchema = UpdateDestinationDestination$outboundSchema;
  /** @deprecated use `UpdateDestinationDestination$Outbound` instead. */
  export type Outbound = UpdateDestinationDestination$Outbound;
}

export function updateDestinationDestinationToJSON(
  updateDestinationDestination: UpdateDestinationDestination,
): string {
  return JSON.stringify(
    UpdateDestinationDestination$outboundSchema.parse(
      updateDestinationDestination,
    ),
  );
}

export function updateDestinationDestinationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDestinationDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDestinationDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDestinationDestination' from JSON`,
  );
}

/** @internal */
export const UpdateDestinationResponse$inboundSchema: z.ZodType<
  UpdateDestinationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDestinationDestination$inboundSchema),
  z.lazy(() => UpdateDestinationAPIProblem$inboundSchema),
]);

/** @internal */
export type UpdateDestinationResponse$Outbound =
  | UpdateDestinationDestination$Outbound
  | UpdateDestinationAPIProblem$Outbound;

/** @internal */
export const UpdateDestinationResponse$outboundSchema: z.ZodType<
  UpdateDestinationResponse$Outbound,
  z.ZodTypeDef,
  UpdateDestinationResponse
> = z.union([
  z.lazy(() => UpdateDestinationDestination$outboundSchema),
  z.lazy(() => UpdateDestinationAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDestinationResponse$ {
  /** @deprecated use `UpdateDestinationResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateDestinationResponse$inboundSchema;
  /** @deprecated use `UpdateDestinationResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateDestinationResponse$outboundSchema;
  /** @deprecated use `UpdateDestinationResponse$Outbound` instead. */
  export type Outbound = UpdateDestinationResponse$Outbound;
}

export function updateDestinationResponseToJSON(
  updateDestinationResponse: UpdateDestinationResponse,
): string {
  return JSON.stringify(
    UpdateDestinationResponse$outboundSchema.parse(updateDestinationResponse),
  );
}

export function updateDestinationResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDestinationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDestinationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDestinationResponse' from JSON`,
  );
}
