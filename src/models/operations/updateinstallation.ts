/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export const UpdateInstallationSelectedFieldsAutoConfig = {
  All: "all",
} as const;
/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export type UpdateInstallationSelectedFieldsAutoConfig = ClosedEnum<
  typeof UpdateInstallationSelectedFieldsAutoConfig
>;

export type UpdateInstallationDefaultPeriodConfig = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type UpdateInstallationBackfillConfig = {
  defaultPeriod: UpdateInstallationDefaultPeriodConfig;
};

export type BaseReadConfigObject = {
  /**
   * The name of the object to read from.
   */
  objectName?: string | undefined;
  /**
   * The schedule for reading the object, in cron syntax.
   */
  schedule?: string | undefined;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination?: string | undefined;
  /**
   * This is a map of field names to booleans indicating whether they should be read. If a field is already included in `selectedFieldMappings`, it does not need to be included here.
   */
  selectedFields?: { [k: string]: boolean } | undefined;
  /**
   * This is a map of field names to their value mappings.
   */
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  /**
   * This is a map of mapToNames to field names. (A mapTo name is the name the builder wants to map a field to when it lands in their destination.)
   */
  selectedFieldMappings?: { [k: string]: string } | undefined;
  /**
   * If selectedFieldsAuto is set to all, all fields will be read.
   */
  selectedFieldsAuto?: UpdateInstallationSelectedFieldsAutoConfig | undefined;
  backfill?: UpdateInstallationBackfillConfig | undefined;
};

export type BaseReadConfig = {
  /**
   * This is a map of object names to their configuration.
   */
  objects?: { [k: string]: BaseReadConfigObject } | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate =
  {
    Always: "always",
    Never: "never",
  } as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate =
  ClosedEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate
  >;

export type ValueDefaultLegacyValueDefaultBoolean = {
  /**
   * The value to be used as a default.
   */
  value: boolean;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate
    | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate =
  ClosedEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate
  >;

export type ValueDefaultLegacyValueDefaultInteger = {
  /**
   * The value to be used as a default.
   */
  value: number;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate
    | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const UpdateInstallationValueDefaultLegacyApplyOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type UpdateInstallationValueDefaultLegacyApplyOnUpdate = ClosedEnum<
  typeof UpdateInstallationValueDefaultLegacyApplyOnUpdate
>;

export type ValueDefaultLegacyValueDefaultString = {
  /**
   * The value to be used as a default.
   */
  value: string;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?: UpdateInstallationValueDefaultLegacyApplyOnUpdate | undefined;
};

/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type UpdateInstallationValueDefaultLegacy =
  | ValueDefaultLegacyValueDefaultString
  | ValueDefaultLegacyValueDefaultInteger
  | ValueDefaultLegacyValueDefaultBoolean;

/**
 * Only use one of stringValue, integerValue, booleanValue.
 */
export type UpdateInstallationDefaultValueForAField = {
  /**
   * The default string value to apply to a field
   */
  stringValue?: string | undefined;
  /**
   * The default integer value to apply to a field
   */
  integerValue?: number | undefined;
  /**
   * The default boolean value to apply to a field
   */
  booleanValue?: boolean | undefined;
};

/**
 * Whether the default value should be applied when creating a record.
 */
export const UpdateInstallationWriteOnCreate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when creating a record.
 */
export type UpdateInstallationWriteOnCreate = ClosedEnum<
  typeof UpdateInstallationWriteOnCreate
>;

/**
 * Whether the default value should be applied when updating a record.
 */
export const UpdateInstallationWriteOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 */
export type UpdateInstallationWriteOnUpdate = ClosedEnum<
  typeof UpdateInstallationWriteOnUpdate
>;

export type UpdateInstallationFieldSetting = {
  /**
   * Only use one of stringValue, integerValue, booleanValue.
   */
  default?: UpdateInstallationDefaultValueForAField | undefined;
  /**
   * Whether the default value should be applied when creating a record.
   */
  writeOnCreate?: UpdateInstallationWriteOnCreate | undefined;
  /**
   * Whether the default value should be applied when updating a record.
   */
  writeOnUpdate?: UpdateInstallationWriteOnUpdate | undefined;
};

export type BaseWriteConfigObject = {
  /**
   * The name of the object to write to.
   */
  objectName: string;
  /**
   * This is a map of field names to default values. These values will be used when writing to the object.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  selectedValueDefaults?: {
    [k: string]:
      | ValueDefaultLegacyValueDefaultString
      | ValueDefaultLegacyValueDefaultInteger
      | ValueDefaultLegacyValueDefaultBoolean;
  } | undefined;
  /**
   * This is a map of field names to their settings.
   */
  selectedFieldSettings?:
    | { [k: string]: UpdateInstallationFieldSetting }
    | undefined;
};

export type BaseWriteConfig = {
  /**
   * This is a map of object names to their configuration.
   */
  objects?: { [k: string]: BaseWriteConfigObject } | undefined;
};

export type UpdateInstallationBaseProxyConfig = {
  enabled?: boolean | undefined;
};

/**
 * The content of the config.
 */
export type UpdateInstallationConfigContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider?: string | undefined;
  read?: BaseReadConfig | undefined;
  write?: BaseWriteConfig | undefined;
  proxy?: UpdateInstallationBaseProxyConfig | undefined;
};

/**
 * The config of the installation.
 */
export type UpdateInstallationConfig = {
  /**
   * The ID of the revision that this config is based on.
   */
  revisionId?: string | undefined;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy?: string | undefined;
  /**
   * The content of the config.
   */
  content?: UpdateInstallationConfigContent | undefined;
};

/**
 * The installation fields to update. (Only include the fields you'd like to update.)
 */
export type Installation = {
  /**
   * The ID of the SaaS connection tied to this installation.
   */
  connectionId?: string | undefined;
  /**
   * The config of the installation.
   */
  config?: UpdateInstallationConfig | undefined;
};

export type UpdateInstallationRequestBody = {
  updateMask: Array<string>;
  /**
   * The installation fields to update. (Only include the fields you'd like to update.)
   */
  installation: Installation;
};

export type UpdateInstallationRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  /**
   * The Ampersand installation ID.
   */
  installationId: string;
  requestBody: UpdateInstallationRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type UpdateInstallationAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type UpdateInstallationGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type UpdateInstallationProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type UpdateInstallationInstallationsGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type UpdateInstallationConsumer = {
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The name of the consumer.
   */
  consumerName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the consumer was created.
   */
  createTime: Date;
  /**
   * The time the consumer was last updated.
   */
  updateTime?: Date | undefined;
};

/**
 * The authentication scheme used for this connection.
 */
export const UpdateInstallationAuthScheme = {
  None: "none",
  ApiKey: "apiKey",
  Basic: "basic",
  Oauth2AuthorizationCode: "oauth2/authorizationCode",
  Oauth2AuthorizationCodePKCE: "oauth2/authorizationCodePKCE",
  Oauth2ClientCredentials: "oauth2/clientCredentials",
  Oauth2Password: "oauth2/password",
} as const;
/**
 * The authentication scheme used for this connection.
 */
export type UpdateInstallationAuthScheme = ClosedEnum<
  typeof UpdateInstallationAuthScheme
>;

/**
 * The status of the connection.
 */
export const UpdateInstallationStatus = {
  Created: "created",
  Working: "working",
  BadCredentials: "bad_credentials",
} as const;
/**
 * The status of the connection.
 */
export type UpdateInstallationStatus = ClosedEnum<
  typeof UpdateInstallationStatus
>;

/**
 * The access token for the connection.
 */
export type UpdateInstallationAccessToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

/**
 * The refresh token to use for the connection.
 */
export type UpdateInstallationRefreshToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

export type UpdateInstallationOAuth2AuthorizationCodeToken = {
  /**
   * The access token for the connection.
   */
  accessToken?: UpdateInstallationAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: UpdateInstallationRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

/**
 * The source of the metadata field
 */
export const UpdateInstallationSource = {
  Input: "input",
  Token: "token",
  Provider: "provider",
} as const;
/**
 * The source of the metadata field
 */
export type UpdateInstallationSource = ClosedEnum<
  typeof UpdateInstallationSource
>;

export type UpdateInstallationProviderMetadataInfo = {
  /**
   * The value of the metadata field
   */
  value: string;
  /**
   * The source of the metadata field
   */
  source: UpdateInstallationSource;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
};

export type UpdateInstallationConnection = {
  /**
   * The connection ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The SaaS provider that this Connection is for.
   */
  provider: string;
  providerApp?: UpdateInstallationProviderApp | undefined;
  group: UpdateInstallationInstallationsGroup;
  consumer: UpdateInstallationConsumer;
  /**
   * If available, the identifier for the provider workspace (e.g. the Salesforce subdomain)
   */
  providerWorkspaceRef?: string | undefined;
  /**
   * If available, the ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
   */
  providerConsumerRef?: string | undefined;
  /**
   * The time the connection was created.
   */
  createTime: Date;
  /**
   * The time the connection was last updated.
   */
  updateTime?: Date | undefined;
  /**
   * The authentication scheme used for this connection.
   */
  authScheme: UpdateInstallationAuthScheme;
  /**
   * The status of the connection.
   */
  status: UpdateInstallationStatus;
  oauth2AuthorizationCode?:
    | UpdateInstallationOAuth2AuthorizationCodeToken
    | undefined;
  /**
   * The API key used while making the connection.
   */
  apiKey?: string | undefined;
  providerMetadata?:
    | { [k: string]: UpdateInstallationProviderMetadataInfo }
    | undefined;
};

/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export const UpdateInstallationInstallationsSelectedFieldsAutoConfig = {
  All: "all",
} as const;
/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export type UpdateInstallationInstallationsSelectedFieldsAutoConfig =
  ClosedEnum<typeof UpdateInstallationInstallationsSelectedFieldsAutoConfig>;

export type UpdateInstallationInstallationsDefaultPeriodConfig = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type UpdateInstallationInstallationsBackfillConfig = {
  defaultPeriod: UpdateInstallationInstallationsDefaultPeriodConfig;
};

export type UpdateInstallationReadConfigObject = {
  /**
   * The name of the object to read from.
   */
  objectName: string;
  /**
   * The schedule for reading the object, in cron syntax.
   */
  schedule: string;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination: string;
  /**
   * This is a map of field names to booleans indicating whether they should be read. If a field is already included in `selectedFieldMappings`, it does not need to be included here.
   */
  selectedFields: { [k: string]: boolean };
  /**
   * This is a map of field names to their value mappings.
   */
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  /**
   * This is a map of mapToNames to field names. (A mapTo name is the name the builder wants to map a field to when it lands in their destination.)
   */
  selectedFieldMappings: { [k: string]: string };
  /**
   * If selectedFieldsAuto is set to all, all fields will be read.
   */
  selectedFieldsAuto?:
    | UpdateInstallationInstallationsSelectedFieldsAutoConfig
    | undefined;
  backfill?: UpdateInstallationInstallationsBackfillConfig | undefined;
};

export type UpdateInstallationReadConfig = {
  objects: { [k: string]: UpdateInstallationReadConfigObject };
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate =
  {
    Always: "always",
    Never: "never",
  } as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate =
  ClosedEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate
  >;

export type UpdateInstallationValueDefaultLegacyValueDefaultBoolean = {
  /**
   * The value to be used as a default.
   */
  value: boolean;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate
    | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate =
  {
    Always: "always",
    Never: "never",
  } as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate =
  ClosedEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate
  >;

export type UpdateInstallationValueDefaultLegacyValueDefaultInteger = {
  /**
   * The value to be used as a default.
   */
  value: number;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate
    | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate =
  {
    Always: "always",
    Never: "never",
  } as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate =
  ClosedEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate
  >;

export type UpdateInstallationValueDefaultLegacyValueDefaultString = {
  /**
   * The value to be used as a default.
   */
  value: string;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate
    | undefined;
};

/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type UpdateInstallationInstallationsValueDefaultLegacy =
  | UpdateInstallationValueDefaultLegacyValueDefaultString
  | UpdateInstallationValueDefaultLegacyValueDefaultInteger
  | UpdateInstallationValueDefaultLegacyValueDefaultBoolean;

/**
 * Only use one of stringValue, integerValue, booleanValue.
 */
export type UpdateInstallationInstallationsDefaultValueForAField = {
  /**
   * The default string value to apply to a field
   */
  stringValue?: string | undefined;
  /**
   * The default integer value to apply to a field
   */
  integerValue?: number | undefined;
  /**
   * The default boolean value to apply to a field
   */
  booleanValue?: boolean | undefined;
};

/**
 * Whether the default value should be applied when creating a record.
 */
export const UpdateInstallationInstallationsWriteOnCreate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when creating a record.
 */
export type UpdateInstallationInstallationsWriteOnCreate = ClosedEnum<
  typeof UpdateInstallationInstallationsWriteOnCreate
>;

/**
 * Whether the default value should be applied when updating a record.
 */
export const UpdateInstallationInstallationsWriteOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 */
export type UpdateInstallationInstallationsWriteOnUpdate = ClosedEnum<
  typeof UpdateInstallationInstallationsWriteOnUpdate
>;

export type UpdateInstallationInstallationsFieldSetting = {
  /**
   * Only use one of stringValue, integerValue, booleanValue.
   */
  default?: UpdateInstallationInstallationsDefaultValueForAField | undefined;
  /**
   * Whether the default value should be applied when creating a record.
   */
  writeOnCreate?: UpdateInstallationInstallationsWriteOnCreate | undefined;
  /**
   * Whether the default value should be applied when updating a record.
   */
  writeOnUpdate?: UpdateInstallationInstallationsWriteOnUpdate | undefined;
};

export type UpdateInstallationWriteConfigObject = {
  /**
   * The name of the object to write to.
   */
  objectName: string;
  /**
   * This is a map of field names to default values. These values will be used when writing to the object.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  selectedValueDefaults?: {
    [k: string]:
      | UpdateInstallationValueDefaultLegacyValueDefaultString
      | UpdateInstallationValueDefaultLegacyValueDefaultInteger
      | UpdateInstallationValueDefaultLegacyValueDefaultBoolean;
  } | undefined;
  /**
   * This is a map of field names to their settings.
   */
  selectedFieldSettings?: {
    [k: string]: UpdateInstallationInstallationsFieldSetting;
  } | undefined;
};

export type UpdateInstallationWriteConfig = {
  objects?: { [k: string]: UpdateInstallationWriteConfigObject } | undefined;
};

export type UpdateInstallationInstallationsBaseProxyConfig = {
  enabled?: boolean | undefined;
};

/**
 * Conditions to enable create events.
 */
export const UpdateInstallationEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable create events.
 */
export type UpdateInstallationEnabled = ClosedEnum<
  typeof UpdateInstallationEnabled
>;

export type UpdateInstallationCreateEvent = {
  /**
   * Conditions to enable create events.
   */
  enabled: UpdateInstallationEnabled;
};

/**
 * Conditions to enable update events.
 */
export const UpdateInstallationInstallationsEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable update events.
 */
export type UpdateInstallationInstallationsEnabled = ClosedEnum<
  typeof UpdateInstallationInstallationsEnabled
>;

/**
 * Whether to watch fields all fields automatically.
 */
export const UpdateInstallationWatchFieldsAuto = {
  All: "all",
} as const;
/**
 * Whether to watch fields all fields automatically.
 */
export type UpdateInstallationWatchFieldsAuto = ClosedEnum<
  typeof UpdateInstallationWatchFieldsAuto
>;

export type UpdateInstallationUpdateEvent = {
  /**
   * Conditions to enable update events.
   */
  enabled: UpdateInstallationInstallationsEnabled;
  /**
   * Whether to watch fields all fields automatically.
   */
  watchFieldsAuto?: UpdateInstallationWatchFieldsAuto | undefined;
  /**
   * The fields that should be watched.
   */
  requiredWatchFields?: Array<string> | undefined;
};

/**
 * Conditions to enable delete events.
 */
export const UpdateInstallationInstallationsResponseEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable delete events.
 */
export type UpdateInstallationInstallationsResponseEnabled = ClosedEnum<
  typeof UpdateInstallationInstallationsResponseEnabled
>;

export type UpdateInstallationDeleteEvent = {
  /**
   * Conditions to enable delete events.
   */
  enabled: UpdateInstallationInstallationsResponseEnabled;
};

export type UpdateInstallationSubscribeConfigObject = {
  /**
   * Whether to inherit fields and mappings from the read config.
   */
  inheritFieldsAndMappings: boolean;
  /**
   * The name of the object to subscribe to.
   */
  objectName: string;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination: string;
  createEvent?: UpdateInstallationCreateEvent | undefined;
  updateEvent?: UpdateInstallationUpdateEvent | undefined;
  deleteEvent?: UpdateInstallationDeleteEvent | undefined;
};

export type UpdateInstallationSubscribeConfig = {
  objects: { [k: string]: UpdateInstallationSubscribeConfigObject };
};

export type UpdateInstallationInstallationsConfigContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider: string;
  read?: UpdateInstallationReadConfig | undefined;
  write?: UpdateInstallationWriteConfig | undefined;
  proxy?: UpdateInstallationInstallationsBaseProxyConfig | undefined;
  subscribe?: UpdateInstallationSubscribeConfig | undefined;
};

export type UpdateInstallationInstallationsConfig = {
  /**
   * The config ID.
   */
  id: string;
  /**
   * The ID of the revision that this config is based on.
   */
  revisionId: string;
  /**
   * The time the config was created.
   */
  createTime: Date;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy: string;
  content: UpdateInstallationInstallationsConfigContent;
};

/**
 * The updated installation
 */
export type UpdateInstallationInstallation = {
  /**
   * The installation ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  group?: UpdateInstallationGroup | undefined;
  /**
   * The health status of the installation ("healthy", "unhealthy").
   */
  healthStatus: string;
  connection: UpdateInstallationConnection;
  /**
   * The time the integration was first installed.
   */
  createTime: Date;
  /**
   * The person who did the installation, in the format of "consumer:{consumer-id}".
   */
  createdBy: string;
  /**
   * The time the installation was last updated with a new config.
   */
  updateTime?: Date | undefined;
  config: UpdateInstallationInstallationsConfig;
};

export type UpdateInstallationResponse =
  | UpdateInstallationInstallation
  | UpdateInstallationAPIProblem;

/** @internal */
export const UpdateInstallationSelectedFieldsAutoConfig$inboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationSelectedFieldsAutoConfig> = z
    .nativeEnum(UpdateInstallationSelectedFieldsAutoConfig);

/** @internal */
export const UpdateInstallationSelectedFieldsAutoConfig$outboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationSelectedFieldsAutoConfig> =
    UpdateInstallationSelectedFieldsAutoConfig$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationSelectedFieldsAutoConfig$ {
  /** @deprecated use `UpdateInstallationSelectedFieldsAutoConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationSelectedFieldsAutoConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationSelectedFieldsAutoConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationSelectedFieldsAutoConfig$outboundSchema;
}

/** @internal */
export const UpdateInstallationDefaultPeriodConfig$inboundSchema: z.ZodType<
  UpdateInstallationDefaultPeriodConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type UpdateInstallationDefaultPeriodConfig$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const UpdateInstallationDefaultPeriodConfig$outboundSchema: z.ZodType<
  UpdateInstallationDefaultPeriodConfig$Outbound,
  z.ZodTypeDef,
  UpdateInstallationDefaultPeriodConfig
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationDefaultPeriodConfig$ {
  /** @deprecated use `UpdateInstallationDefaultPeriodConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationDefaultPeriodConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationDefaultPeriodConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationDefaultPeriodConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationDefaultPeriodConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationDefaultPeriodConfig$Outbound;
}

export function updateInstallationDefaultPeriodConfigToJSON(
  updateInstallationDefaultPeriodConfig: UpdateInstallationDefaultPeriodConfig,
): string {
  return JSON.stringify(
    UpdateInstallationDefaultPeriodConfig$outboundSchema.parse(
      updateInstallationDefaultPeriodConfig,
    ),
  );
}

export function updateInstallationDefaultPeriodConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationDefaultPeriodConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationDefaultPeriodConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationDefaultPeriodConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationBackfillConfig$inboundSchema: z.ZodType<
  UpdateInstallationBackfillConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() =>
    UpdateInstallationDefaultPeriodConfig$inboundSchema
  ),
});

/** @internal */
export type UpdateInstallationBackfillConfig$Outbound = {
  defaultPeriod: UpdateInstallationDefaultPeriodConfig$Outbound;
};

/** @internal */
export const UpdateInstallationBackfillConfig$outboundSchema: z.ZodType<
  UpdateInstallationBackfillConfig$Outbound,
  z.ZodTypeDef,
  UpdateInstallationBackfillConfig
> = z.object({
  defaultPeriod: z.lazy(() =>
    UpdateInstallationDefaultPeriodConfig$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationBackfillConfig$ {
  /** @deprecated use `UpdateInstallationBackfillConfig$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationBackfillConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationBackfillConfig$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationBackfillConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationBackfillConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationBackfillConfig$Outbound;
}

export function updateInstallationBackfillConfigToJSON(
  updateInstallationBackfillConfig: UpdateInstallationBackfillConfig,
): string {
  return JSON.stringify(
    UpdateInstallationBackfillConfig$outboundSchema.parse(
      updateInstallationBackfillConfig,
    ),
  );
}

export function updateInstallationBackfillConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationBackfillConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationBackfillConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationBackfillConfig' from JSON`,
  );
}

/** @internal */
export const BaseReadConfigObject$inboundSchema: z.ZodType<
  BaseReadConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string().optional(),
  schedule: z.string().optional(),
  destination: z.string().optional(),
  selectedFields: z.record(z.boolean()).optional(),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()).optional(),
  selectedFieldsAuto: UpdateInstallationSelectedFieldsAutoConfig$inboundSchema
    .optional(),
  backfill: z.lazy(() => UpdateInstallationBackfillConfig$inboundSchema)
    .optional(),
});

/** @internal */
export type BaseReadConfigObject$Outbound = {
  objectName?: string | undefined;
  schedule?: string | undefined;
  destination?: string | undefined;
  selectedFields?: { [k: string]: boolean } | undefined;
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  selectedFieldMappings?: { [k: string]: string } | undefined;
  selectedFieldsAuto?: string | undefined;
  backfill?: UpdateInstallationBackfillConfig$Outbound | undefined;
};

/** @internal */
export const BaseReadConfigObject$outboundSchema: z.ZodType<
  BaseReadConfigObject$Outbound,
  z.ZodTypeDef,
  BaseReadConfigObject
> = z.object({
  objectName: z.string().optional(),
  schedule: z.string().optional(),
  destination: z.string().optional(),
  selectedFields: z.record(z.boolean()).optional(),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()).optional(),
  selectedFieldsAuto: UpdateInstallationSelectedFieldsAutoConfig$outboundSchema
    .optional(),
  backfill: z.lazy(() => UpdateInstallationBackfillConfig$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseReadConfigObject$ {
  /** @deprecated use `BaseReadConfigObject$inboundSchema` instead. */
  export const inboundSchema = BaseReadConfigObject$inboundSchema;
  /** @deprecated use `BaseReadConfigObject$outboundSchema` instead. */
  export const outboundSchema = BaseReadConfigObject$outboundSchema;
  /** @deprecated use `BaseReadConfigObject$Outbound` instead. */
  export type Outbound = BaseReadConfigObject$Outbound;
}

export function baseReadConfigObjectToJSON(
  baseReadConfigObject: BaseReadConfigObject,
): string {
  return JSON.stringify(
    BaseReadConfigObject$outboundSchema.parse(baseReadConfigObject),
  );
}

export function baseReadConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<BaseReadConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseReadConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseReadConfigObject' from JSON`,
  );
}

/** @internal */
export const BaseReadConfig$inboundSchema: z.ZodType<
  BaseReadConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(z.lazy(() => BaseReadConfigObject$inboundSchema))
    .optional(),
});

/** @internal */
export type BaseReadConfig$Outbound = {
  objects?: { [k: string]: BaseReadConfigObject$Outbound } | undefined;
};

/** @internal */
export const BaseReadConfig$outboundSchema: z.ZodType<
  BaseReadConfig$Outbound,
  z.ZodTypeDef,
  BaseReadConfig
> = z.object({
  objects: z.record(z.lazy(() => BaseReadConfigObject$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseReadConfig$ {
  /** @deprecated use `BaseReadConfig$inboundSchema` instead. */
  export const inboundSchema = BaseReadConfig$inboundSchema;
  /** @deprecated use `BaseReadConfig$outboundSchema` instead. */
  export const outboundSchema = BaseReadConfig$outboundSchema;
  /** @deprecated use `BaseReadConfig$Outbound` instead. */
  export type Outbound = BaseReadConfig$Outbound;
}

export function baseReadConfigToJSON(baseReadConfig: BaseReadConfig): string {
  return JSON.stringify(BaseReadConfig$outboundSchema.parse(baseReadConfig));
}

export function baseReadConfigFromJSON(
  jsonString: string,
): SafeParseResult<BaseReadConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseReadConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseReadConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate
  > = z.nativeEnum(
    UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate,
  );

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate
  > =
    UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ValueDefaultLegacyValueDefaultBoolean$inboundSchema: z.ZodType<
  ValueDefaultLegacyValueDefaultBoolean,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.boolean(),
  applyOnUpdate:
    UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$inboundSchema
      .optional(),
});

/** @internal */
export type ValueDefaultLegacyValueDefaultBoolean$Outbound = {
  value: boolean;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ValueDefaultLegacyValueDefaultBoolean$outboundSchema: z.ZodType<
  ValueDefaultLegacyValueDefaultBoolean$Outbound,
  z.ZodTypeDef,
  ValueDefaultLegacyValueDefaultBoolean
> = z.object({
  value: z.boolean(),
  applyOnUpdate:
    UpdateInstallationValueDefaultLegacyInstallationsRequestApplyOnUpdate$outboundSchema
      .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDefaultLegacyValueDefaultBoolean$ {
  /** @deprecated use `ValueDefaultLegacyValueDefaultBoolean$inboundSchema` instead. */
  export const inboundSchema =
    ValueDefaultLegacyValueDefaultBoolean$inboundSchema;
  /** @deprecated use `ValueDefaultLegacyValueDefaultBoolean$outboundSchema` instead. */
  export const outboundSchema =
    ValueDefaultLegacyValueDefaultBoolean$outboundSchema;
  /** @deprecated use `ValueDefaultLegacyValueDefaultBoolean$Outbound` instead. */
  export type Outbound = ValueDefaultLegacyValueDefaultBoolean$Outbound;
}

export function valueDefaultLegacyValueDefaultBooleanToJSON(
  valueDefaultLegacyValueDefaultBoolean: ValueDefaultLegacyValueDefaultBoolean,
): string {
  return JSON.stringify(
    ValueDefaultLegacyValueDefaultBoolean$outboundSchema.parse(
      valueDefaultLegacyValueDefaultBoolean,
    ),
  );
}

export function valueDefaultLegacyValueDefaultBooleanFromJSON(
  jsonString: string,
): SafeParseResult<ValueDefaultLegacyValueDefaultBoolean, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ValueDefaultLegacyValueDefaultBoolean$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueDefaultLegacyValueDefaultBoolean' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate
  > = z.nativeEnum(
    UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate,
  );

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate
  > =
    UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ValueDefaultLegacyValueDefaultInteger$inboundSchema: z.ZodType<
  ValueDefaultLegacyValueDefaultInteger,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.number().int(),
  applyOnUpdate:
    UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema
      .optional(),
});

/** @internal */
export type ValueDefaultLegacyValueDefaultInteger$Outbound = {
  value: number;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ValueDefaultLegacyValueDefaultInteger$outboundSchema: z.ZodType<
  ValueDefaultLegacyValueDefaultInteger$Outbound,
  z.ZodTypeDef,
  ValueDefaultLegacyValueDefaultInteger
> = z.object({
  value: z.number().int(),
  applyOnUpdate:
    UpdateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema
      .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDefaultLegacyValueDefaultInteger$ {
  /** @deprecated use `ValueDefaultLegacyValueDefaultInteger$inboundSchema` instead. */
  export const inboundSchema =
    ValueDefaultLegacyValueDefaultInteger$inboundSchema;
  /** @deprecated use `ValueDefaultLegacyValueDefaultInteger$outboundSchema` instead. */
  export const outboundSchema =
    ValueDefaultLegacyValueDefaultInteger$outboundSchema;
  /** @deprecated use `ValueDefaultLegacyValueDefaultInteger$Outbound` instead. */
  export type Outbound = ValueDefaultLegacyValueDefaultInteger$Outbound;
}

export function valueDefaultLegacyValueDefaultIntegerToJSON(
  valueDefaultLegacyValueDefaultInteger: ValueDefaultLegacyValueDefaultInteger,
): string {
  return JSON.stringify(
    ValueDefaultLegacyValueDefaultInteger$outboundSchema.parse(
      valueDefaultLegacyValueDefaultInteger,
    ),
  );
}

export function valueDefaultLegacyValueDefaultIntegerFromJSON(
  jsonString: string,
): SafeParseResult<ValueDefaultLegacyValueDefaultInteger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ValueDefaultLegacyValueDefaultInteger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueDefaultLegacyValueDefaultInteger' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationValueDefaultLegacyApplyOnUpdate> = z
    .nativeEnum(UpdateInstallationValueDefaultLegacyApplyOnUpdate);

/** @internal */
export const UpdateInstallationValueDefaultLegacyApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationValueDefaultLegacyApplyOnUpdate> =
    UpdateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyApplyOnUpdate$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ValueDefaultLegacyValueDefaultString$inboundSchema: z.ZodType<
  ValueDefaultLegacyValueDefaultString,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  applyOnUpdate: UpdateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema
    .optional(),
});

/** @internal */
export type ValueDefaultLegacyValueDefaultString$Outbound = {
  value: string;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ValueDefaultLegacyValueDefaultString$outboundSchema: z.ZodType<
  ValueDefaultLegacyValueDefaultString$Outbound,
  z.ZodTypeDef,
  ValueDefaultLegacyValueDefaultString
> = z.object({
  value: z.string(),
  applyOnUpdate:
    UpdateInstallationValueDefaultLegacyApplyOnUpdate$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDefaultLegacyValueDefaultString$ {
  /** @deprecated use `ValueDefaultLegacyValueDefaultString$inboundSchema` instead. */
  export const inboundSchema =
    ValueDefaultLegacyValueDefaultString$inboundSchema;
  /** @deprecated use `ValueDefaultLegacyValueDefaultString$outboundSchema` instead. */
  export const outboundSchema =
    ValueDefaultLegacyValueDefaultString$outboundSchema;
  /** @deprecated use `ValueDefaultLegacyValueDefaultString$Outbound` instead. */
  export type Outbound = ValueDefaultLegacyValueDefaultString$Outbound;
}

export function valueDefaultLegacyValueDefaultStringToJSON(
  valueDefaultLegacyValueDefaultString: ValueDefaultLegacyValueDefaultString,
): string {
  return JSON.stringify(
    ValueDefaultLegacyValueDefaultString$outboundSchema.parse(
      valueDefaultLegacyValueDefaultString,
    ),
  );
}

export function valueDefaultLegacyValueDefaultStringFromJSON(
  jsonString: string,
): SafeParseResult<ValueDefaultLegacyValueDefaultString, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ValueDefaultLegacyValueDefaultString$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueDefaultLegacyValueDefaultString' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationValueDefaultLegacy$inboundSchema: z.ZodType<
  UpdateInstallationValueDefaultLegacy,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ValueDefaultLegacyValueDefaultString$inboundSchema),
  z.lazy(() => ValueDefaultLegacyValueDefaultInteger$inboundSchema),
  z.lazy(() => ValueDefaultLegacyValueDefaultBoolean$inboundSchema),
]);

/** @internal */
export type UpdateInstallationValueDefaultLegacy$Outbound =
  | ValueDefaultLegacyValueDefaultString$Outbound
  | ValueDefaultLegacyValueDefaultInteger$Outbound
  | ValueDefaultLegacyValueDefaultBoolean$Outbound;

/** @internal */
export const UpdateInstallationValueDefaultLegacy$outboundSchema: z.ZodType<
  UpdateInstallationValueDefaultLegacy$Outbound,
  z.ZodTypeDef,
  UpdateInstallationValueDefaultLegacy
> = z.union([
  z.lazy(() => ValueDefaultLegacyValueDefaultString$outboundSchema),
  z.lazy(() => ValueDefaultLegacyValueDefaultInteger$outboundSchema),
  z.lazy(() => ValueDefaultLegacyValueDefaultBoolean$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacy$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacy$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacy$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacy$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacy$outboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacy$Outbound` instead. */
  export type Outbound = UpdateInstallationValueDefaultLegacy$Outbound;
}

export function updateInstallationValueDefaultLegacyToJSON(
  updateInstallationValueDefaultLegacy: UpdateInstallationValueDefaultLegacy,
): string {
  return JSON.stringify(
    UpdateInstallationValueDefaultLegacy$outboundSchema.parse(
      updateInstallationValueDefaultLegacy,
    ),
  );
}

export function updateInstallationValueDefaultLegacyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationValueDefaultLegacy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationValueDefaultLegacy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationValueDefaultLegacy' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationDefaultValueForAField$inboundSchema: z.ZodType<
  UpdateInstallationDefaultValueForAField,
  z.ZodTypeDef,
  unknown
> = z.object({
  stringValue: z.string().optional(),
  integerValue: z.number().int().optional(),
  booleanValue: z.boolean().optional(),
});

/** @internal */
export type UpdateInstallationDefaultValueForAField$Outbound = {
  stringValue?: string | undefined;
  integerValue?: number | undefined;
  booleanValue?: boolean | undefined;
};

/** @internal */
export const UpdateInstallationDefaultValueForAField$outboundSchema: z.ZodType<
  UpdateInstallationDefaultValueForAField$Outbound,
  z.ZodTypeDef,
  UpdateInstallationDefaultValueForAField
> = z.object({
  stringValue: z.string().optional(),
  integerValue: z.number().int().optional(),
  booleanValue: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationDefaultValueForAField$ {
  /** @deprecated use `UpdateInstallationDefaultValueForAField$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationDefaultValueForAField$inboundSchema;
  /** @deprecated use `UpdateInstallationDefaultValueForAField$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationDefaultValueForAField$outboundSchema;
  /** @deprecated use `UpdateInstallationDefaultValueForAField$Outbound` instead. */
  export type Outbound = UpdateInstallationDefaultValueForAField$Outbound;
}

export function updateInstallationDefaultValueForAFieldToJSON(
  updateInstallationDefaultValueForAField:
    UpdateInstallationDefaultValueForAField,
): string {
  return JSON.stringify(
    UpdateInstallationDefaultValueForAField$outboundSchema.parse(
      updateInstallationDefaultValueForAField,
    ),
  );
}

export function updateInstallationDefaultValueForAFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationDefaultValueForAField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationDefaultValueForAField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationDefaultValueForAField' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationWriteOnCreate$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationWriteOnCreate
> = z.nativeEnum(UpdateInstallationWriteOnCreate);

/** @internal */
export const UpdateInstallationWriteOnCreate$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationWriteOnCreate
> = UpdateInstallationWriteOnCreate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationWriteOnCreate$ {
  /** @deprecated use `UpdateInstallationWriteOnCreate$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationWriteOnCreate$inboundSchema;
  /** @deprecated use `UpdateInstallationWriteOnCreate$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationWriteOnCreate$outboundSchema;
}

/** @internal */
export const UpdateInstallationWriteOnUpdate$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationWriteOnUpdate
> = z.nativeEnum(UpdateInstallationWriteOnUpdate);

/** @internal */
export const UpdateInstallationWriteOnUpdate$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationWriteOnUpdate
> = UpdateInstallationWriteOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationWriteOnUpdate$ {
  /** @deprecated use `UpdateInstallationWriteOnUpdate$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationWriteOnUpdate$inboundSchema;
  /** @deprecated use `UpdateInstallationWriteOnUpdate$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationWriteOnUpdate$outboundSchema;
}

/** @internal */
export const UpdateInstallationFieldSetting$inboundSchema: z.ZodType<
  UpdateInstallationFieldSetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.lazy(() => UpdateInstallationDefaultValueForAField$inboundSchema)
    .optional(),
  writeOnCreate: UpdateInstallationWriteOnCreate$inboundSchema.default(
    "always",
  ),
  writeOnUpdate: UpdateInstallationWriteOnUpdate$inboundSchema.default(
    "always",
  ),
});

/** @internal */
export type UpdateInstallationFieldSetting$Outbound = {
  default?: UpdateInstallationDefaultValueForAField$Outbound | undefined;
  writeOnCreate: string;
  writeOnUpdate: string;
};

/** @internal */
export const UpdateInstallationFieldSetting$outboundSchema: z.ZodType<
  UpdateInstallationFieldSetting$Outbound,
  z.ZodTypeDef,
  UpdateInstallationFieldSetting
> = z.object({
  default: z.lazy(() => UpdateInstallationDefaultValueForAField$outboundSchema)
    .optional(),
  writeOnCreate: UpdateInstallationWriteOnCreate$outboundSchema.default(
    "always",
  ),
  writeOnUpdate: UpdateInstallationWriteOnUpdate$outboundSchema.default(
    "always",
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationFieldSetting$ {
  /** @deprecated use `UpdateInstallationFieldSetting$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationFieldSetting$inboundSchema;
  /** @deprecated use `UpdateInstallationFieldSetting$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationFieldSetting$outboundSchema;
  /** @deprecated use `UpdateInstallationFieldSetting$Outbound` instead. */
  export type Outbound = UpdateInstallationFieldSetting$Outbound;
}

export function updateInstallationFieldSettingToJSON(
  updateInstallationFieldSetting: UpdateInstallationFieldSetting,
): string {
  return JSON.stringify(
    UpdateInstallationFieldSetting$outboundSchema.parse(
      updateInstallationFieldSetting,
    ),
  );
}

export function updateInstallationFieldSettingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationFieldSetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationFieldSetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationFieldSetting' from JSON`,
  );
}

/** @internal */
export const BaseWriteConfigObject$inboundSchema: z.ZodType<
  BaseWriteConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() => ValueDefaultLegacyValueDefaultString$inboundSchema),
      z.lazy(() => ValueDefaultLegacyValueDefaultInteger$inboundSchema),
      z.lazy(() => ValueDefaultLegacyValueDefaultBoolean$inboundSchema),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(
    z.lazy(() => UpdateInstallationFieldSetting$inboundSchema),
  ).optional(),
});

/** @internal */
export type BaseWriteConfigObject$Outbound = {
  objectName: string;
  selectedValueDefaults?: {
    [k: string]:
      | ValueDefaultLegacyValueDefaultString$Outbound
      | ValueDefaultLegacyValueDefaultInteger$Outbound
      | ValueDefaultLegacyValueDefaultBoolean$Outbound;
  } | undefined;
  selectedFieldSettings?: {
    [k: string]: UpdateInstallationFieldSetting$Outbound;
  } | undefined;
};

/** @internal */
export const BaseWriteConfigObject$outboundSchema: z.ZodType<
  BaseWriteConfigObject$Outbound,
  z.ZodTypeDef,
  BaseWriteConfigObject
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() => ValueDefaultLegacyValueDefaultString$outboundSchema),
      z.lazy(() => ValueDefaultLegacyValueDefaultInteger$outboundSchema),
      z.lazy(() => ValueDefaultLegacyValueDefaultBoolean$outboundSchema),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(
    z.lazy(() => UpdateInstallationFieldSetting$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseWriteConfigObject$ {
  /** @deprecated use `BaseWriteConfigObject$inboundSchema` instead. */
  export const inboundSchema = BaseWriteConfigObject$inboundSchema;
  /** @deprecated use `BaseWriteConfigObject$outboundSchema` instead. */
  export const outboundSchema = BaseWriteConfigObject$outboundSchema;
  /** @deprecated use `BaseWriteConfigObject$Outbound` instead. */
  export type Outbound = BaseWriteConfigObject$Outbound;
}

export function baseWriteConfigObjectToJSON(
  baseWriteConfigObject: BaseWriteConfigObject,
): string {
  return JSON.stringify(
    BaseWriteConfigObject$outboundSchema.parse(baseWriteConfigObject),
  );
}

export function baseWriteConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<BaseWriteConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseWriteConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseWriteConfigObject' from JSON`,
  );
}

/** @internal */
export const BaseWriteConfig$inboundSchema: z.ZodType<
  BaseWriteConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(z.lazy(() => BaseWriteConfigObject$inboundSchema))
    .optional(),
});

/** @internal */
export type BaseWriteConfig$Outbound = {
  objects?: { [k: string]: BaseWriteConfigObject$Outbound } | undefined;
};

/** @internal */
export const BaseWriteConfig$outboundSchema: z.ZodType<
  BaseWriteConfig$Outbound,
  z.ZodTypeDef,
  BaseWriteConfig
> = z.object({
  objects: z.record(z.lazy(() => BaseWriteConfigObject$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseWriteConfig$ {
  /** @deprecated use `BaseWriteConfig$inboundSchema` instead. */
  export const inboundSchema = BaseWriteConfig$inboundSchema;
  /** @deprecated use `BaseWriteConfig$outboundSchema` instead. */
  export const outboundSchema = BaseWriteConfig$outboundSchema;
  /** @deprecated use `BaseWriteConfig$Outbound` instead. */
  export type Outbound = BaseWriteConfig$Outbound;
}

export function baseWriteConfigToJSON(
  baseWriteConfig: BaseWriteConfig,
): string {
  return JSON.stringify(BaseWriteConfig$outboundSchema.parse(baseWriteConfig));
}

export function baseWriteConfigFromJSON(
  jsonString: string,
): SafeParseResult<BaseWriteConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseWriteConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseWriteConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationBaseProxyConfig$inboundSchema: z.ZodType<
  UpdateInstallationBaseProxyConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type UpdateInstallationBaseProxyConfig$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const UpdateInstallationBaseProxyConfig$outboundSchema: z.ZodType<
  UpdateInstallationBaseProxyConfig$Outbound,
  z.ZodTypeDef,
  UpdateInstallationBaseProxyConfig
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationBaseProxyConfig$ {
  /** @deprecated use `UpdateInstallationBaseProxyConfig$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationBaseProxyConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationBaseProxyConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationBaseProxyConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationBaseProxyConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationBaseProxyConfig$Outbound;
}

export function updateInstallationBaseProxyConfigToJSON(
  updateInstallationBaseProxyConfig: UpdateInstallationBaseProxyConfig,
): string {
  return JSON.stringify(
    UpdateInstallationBaseProxyConfig$outboundSchema.parse(
      updateInstallationBaseProxyConfig,
    ),
  );
}

export function updateInstallationBaseProxyConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationBaseProxyConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationBaseProxyConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationBaseProxyConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationConfigContent$inboundSchema: z.ZodType<
  UpdateInstallationConfigContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string().optional(),
  read: z.lazy(() => BaseReadConfig$inboundSchema).optional(),
  write: z.lazy(() => BaseWriteConfig$inboundSchema).optional(),
  proxy: z.lazy(() => UpdateInstallationBaseProxyConfig$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateInstallationConfigContent$Outbound = {
  provider?: string | undefined;
  read?: BaseReadConfig$Outbound | undefined;
  write?: BaseWriteConfig$Outbound | undefined;
  proxy?: UpdateInstallationBaseProxyConfig$Outbound | undefined;
};

/** @internal */
export const UpdateInstallationConfigContent$outboundSchema: z.ZodType<
  UpdateInstallationConfigContent$Outbound,
  z.ZodTypeDef,
  UpdateInstallationConfigContent
> = z.object({
  provider: z.string().optional(),
  read: z.lazy(() => BaseReadConfig$outboundSchema).optional(),
  write: z.lazy(() => BaseWriteConfig$outboundSchema).optional(),
  proxy: z.lazy(() => UpdateInstallationBaseProxyConfig$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationConfigContent$ {
  /** @deprecated use `UpdateInstallationConfigContent$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationConfigContent$inboundSchema;
  /** @deprecated use `UpdateInstallationConfigContent$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationConfigContent$outboundSchema;
  /** @deprecated use `UpdateInstallationConfigContent$Outbound` instead. */
  export type Outbound = UpdateInstallationConfigContent$Outbound;
}

export function updateInstallationConfigContentToJSON(
  updateInstallationConfigContent: UpdateInstallationConfigContent,
): string {
  return JSON.stringify(
    UpdateInstallationConfigContent$outboundSchema.parse(
      updateInstallationConfigContent,
    ),
  );
}

export function updateInstallationConfigContentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationConfigContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationConfigContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationConfigContent' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationConfig$inboundSchema: z.ZodType<
  UpdateInstallationConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  revisionId: z.string().optional(),
  createdBy: z.string().optional(),
  content: z.lazy(() => UpdateInstallationConfigContent$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateInstallationConfig$Outbound = {
  revisionId?: string | undefined;
  createdBy?: string | undefined;
  content?: UpdateInstallationConfigContent$Outbound | undefined;
};

/** @internal */
export const UpdateInstallationConfig$outboundSchema: z.ZodType<
  UpdateInstallationConfig$Outbound,
  z.ZodTypeDef,
  UpdateInstallationConfig
> = z.object({
  revisionId: z.string().optional(),
  createdBy: z.string().optional(),
  content: z.lazy(() => UpdateInstallationConfigContent$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationConfig$ {
  /** @deprecated use `UpdateInstallationConfig$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationConfig$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationConfig$Outbound;
}

export function updateInstallationConfigToJSON(
  updateInstallationConfig: UpdateInstallationConfig,
): string {
  return JSON.stringify(
    UpdateInstallationConfig$outboundSchema.parse(updateInstallationConfig),
  );
}

export function updateInstallationConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationConfig' from JSON`,
  );
}

/** @internal */
export const Installation$inboundSchema: z.ZodType<
  Installation,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectionId: z.string().optional(),
  config: z.lazy(() => UpdateInstallationConfig$inboundSchema).optional(),
});

/** @internal */
export type Installation$Outbound = {
  connectionId?: string | undefined;
  config?: UpdateInstallationConfig$Outbound | undefined;
};

/** @internal */
export const Installation$outboundSchema: z.ZodType<
  Installation$Outbound,
  z.ZodTypeDef,
  Installation
> = z.object({
  connectionId: z.string().optional(),
  config: z.lazy(() => UpdateInstallationConfig$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Installation$ {
  /** @deprecated use `Installation$inboundSchema` instead. */
  export const inboundSchema = Installation$inboundSchema;
  /** @deprecated use `Installation$outboundSchema` instead. */
  export const outboundSchema = Installation$outboundSchema;
  /** @deprecated use `Installation$Outbound` instead. */
  export type Outbound = Installation$Outbound;
}

export function installationToJSON(installation: Installation): string {
  return JSON.stringify(Installation$outboundSchema.parse(installation));
}

export function installationFromJSON(
  jsonString: string,
): SafeParseResult<Installation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Installation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Installation' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationRequestBody$inboundSchema: z.ZodType<
  UpdateInstallationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  updateMask: z.array(z.string()),
  installation: z.lazy(() => Installation$inboundSchema),
});

/** @internal */
export type UpdateInstallationRequestBody$Outbound = {
  updateMask: Array<string>;
  installation: Installation$Outbound;
};

/** @internal */
export const UpdateInstallationRequestBody$outboundSchema: z.ZodType<
  UpdateInstallationRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateInstallationRequestBody
> = z.object({
  updateMask: z.array(z.string()),
  installation: z.lazy(() => Installation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationRequestBody$ {
  /** @deprecated use `UpdateInstallationRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationRequestBody$inboundSchema;
  /** @deprecated use `UpdateInstallationRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationRequestBody$outboundSchema;
  /** @deprecated use `UpdateInstallationRequestBody$Outbound` instead. */
  export type Outbound = UpdateInstallationRequestBody$Outbound;
}

export function updateInstallationRequestBodyToJSON(
  updateInstallationRequestBody: UpdateInstallationRequestBody,
): string {
  return JSON.stringify(
    UpdateInstallationRequestBody$outboundSchema.parse(
      updateInstallationRequestBody,
    ),
  );
}

export function updateInstallationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationRequest$inboundSchema: z.ZodType<
  UpdateInstallationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  installationId: z.string(),
  RequestBody: z.lazy(() => UpdateInstallationRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateInstallationRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  installationId: string;
  RequestBody: UpdateInstallationRequestBody$Outbound;
};

/** @internal */
export const UpdateInstallationRequest$outboundSchema: z.ZodType<
  UpdateInstallationRequest$Outbound,
  z.ZodTypeDef,
  UpdateInstallationRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  installationId: z.string(),
  requestBody: z.lazy(() => UpdateInstallationRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationRequest$ {
  /** @deprecated use `UpdateInstallationRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationRequest$inboundSchema;
  /** @deprecated use `UpdateInstallationRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationRequest$outboundSchema;
  /** @deprecated use `UpdateInstallationRequest$Outbound` instead. */
  export type Outbound = UpdateInstallationRequest$Outbound;
}

export function updateInstallationRequestToJSON(
  updateInstallationRequest: UpdateInstallationRequest,
): string {
  return JSON.stringify(
    UpdateInstallationRequest$outboundSchema.parse(updateInstallationRequest),
  );
}

export function updateInstallationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationRequest' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationAPIProblem$inboundSchema: z.ZodType<
  UpdateInstallationAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateInstallationAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateInstallationAPIProblem$outboundSchema: z.ZodType<
  UpdateInstallationAPIProblem$Outbound,
  z.ZodTypeDef,
  UpdateInstallationAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationAPIProblem$ {
  /** @deprecated use `UpdateInstallationAPIProblem$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationAPIProblem$inboundSchema;
  /** @deprecated use `UpdateInstallationAPIProblem$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationAPIProblem$outboundSchema;
  /** @deprecated use `UpdateInstallationAPIProblem$Outbound` instead. */
  export type Outbound = UpdateInstallationAPIProblem$Outbound;
}

export function updateInstallationAPIProblemToJSON(
  updateInstallationAPIProblem: UpdateInstallationAPIProblem,
): string {
  return JSON.stringify(
    UpdateInstallationAPIProblem$outboundSchema.parse(
      updateInstallationAPIProblem,
    ),
  );
}

export function updateInstallationAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationAPIProblem' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationGroup$inboundSchema: z.ZodType<
  UpdateInstallationGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateInstallationGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateInstallationGroup$outboundSchema: z.ZodType<
  UpdateInstallationGroup$Outbound,
  z.ZodTypeDef,
  UpdateInstallationGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationGroup$ {
  /** @deprecated use `UpdateInstallationGroup$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationGroup$inboundSchema;
  /** @deprecated use `UpdateInstallationGroup$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationGroup$outboundSchema;
  /** @deprecated use `UpdateInstallationGroup$Outbound` instead. */
  export type Outbound = UpdateInstallationGroup$Outbound;
}

export function updateInstallationGroupToJSON(
  updateInstallationGroup: UpdateInstallationGroup,
): string {
  return JSON.stringify(
    UpdateInstallationGroup$outboundSchema.parse(updateInstallationGroup),
  );
}

export function updateInstallationGroupFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationGroup' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationProviderApp$inboundSchema: z.ZodType<
  UpdateInstallationProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateInstallationProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateInstallationProviderApp$outboundSchema: z.ZodType<
  UpdateInstallationProviderApp$Outbound,
  z.ZodTypeDef,
  UpdateInstallationProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationProviderApp$ {
  /** @deprecated use `UpdateInstallationProviderApp$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationProviderApp$inboundSchema;
  /** @deprecated use `UpdateInstallationProviderApp$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationProviderApp$outboundSchema;
  /** @deprecated use `UpdateInstallationProviderApp$Outbound` instead. */
  export type Outbound = UpdateInstallationProviderApp$Outbound;
}

export function updateInstallationProviderAppToJSON(
  updateInstallationProviderApp: UpdateInstallationProviderApp,
): string {
  return JSON.stringify(
    UpdateInstallationProviderApp$outboundSchema.parse(
      updateInstallationProviderApp,
    ),
  );
}

export function updateInstallationProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationProviderApp' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsGroup$inboundSchema: z.ZodType<
  UpdateInstallationInstallationsGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateInstallationInstallationsGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateInstallationInstallationsGroup$outboundSchema: z.ZodType<
  UpdateInstallationInstallationsGroup$Outbound,
  z.ZodTypeDef,
  UpdateInstallationInstallationsGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsGroup$ {
  /** @deprecated use `UpdateInstallationInstallationsGroup$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsGroup$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsGroup$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsGroup$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsGroup$Outbound` instead. */
  export type Outbound = UpdateInstallationInstallationsGroup$Outbound;
}

export function updateInstallationInstallationsGroupToJSON(
  updateInstallationInstallationsGroup: UpdateInstallationInstallationsGroup,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsGroup$outboundSchema.parse(
      updateInstallationInstallationsGroup,
    ),
  );
}

export function updateInstallationInstallationsGroupFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationInstallationsGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationInstallationsGroup' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationConsumer$inboundSchema: z.ZodType<
  UpdateInstallationConsumer,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateInstallationConsumer$Outbound = {
  consumerRef: string;
  consumerName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateInstallationConsumer$outboundSchema: z.ZodType<
  UpdateInstallationConsumer$Outbound,
  z.ZodTypeDef,
  UpdateInstallationConsumer
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationConsumer$ {
  /** @deprecated use `UpdateInstallationConsumer$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationConsumer$inboundSchema;
  /** @deprecated use `UpdateInstallationConsumer$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationConsumer$outboundSchema;
  /** @deprecated use `UpdateInstallationConsumer$Outbound` instead. */
  export type Outbound = UpdateInstallationConsumer$Outbound;
}

export function updateInstallationConsumerToJSON(
  updateInstallationConsumer: UpdateInstallationConsumer,
): string {
  return JSON.stringify(
    UpdateInstallationConsumer$outboundSchema.parse(updateInstallationConsumer),
  );
}

export function updateInstallationConsumerFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationConsumer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationConsumer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationConsumer' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationAuthScheme$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationAuthScheme
> = z.nativeEnum(UpdateInstallationAuthScheme);

/** @internal */
export const UpdateInstallationAuthScheme$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationAuthScheme
> = UpdateInstallationAuthScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationAuthScheme$ {
  /** @deprecated use `UpdateInstallationAuthScheme$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationAuthScheme$inboundSchema;
  /** @deprecated use `UpdateInstallationAuthScheme$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationAuthScheme$outboundSchema;
}

/** @internal */
export const UpdateInstallationStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationStatus
> = z.nativeEnum(UpdateInstallationStatus);

/** @internal */
export const UpdateInstallationStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationStatus
> = UpdateInstallationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationStatus$ {
  /** @deprecated use `UpdateInstallationStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationStatus$inboundSchema;
  /** @deprecated use `UpdateInstallationStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationStatus$outboundSchema;
}

/** @internal */
export const UpdateInstallationAccessToken$inboundSchema: z.ZodType<
  UpdateInstallationAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateInstallationAccessToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const UpdateInstallationAccessToken$outboundSchema: z.ZodType<
  UpdateInstallationAccessToken$Outbound,
  z.ZodTypeDef,
  UpdateInstallationAccessToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationAccessToken$ {
  /** @deprecated use `UpdateInstallationAccessToken$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationAccessToken$inboundSchema;
  /** @deprecated use `UpdateInstallationAccessToken$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationAccessToken$outboundSchema;
  /** @deprecated use `UpdateInstallationAccessToken$Outbound` instead. */
  export type Outbound = UpdateInstallationAccessToken$Outbound;
}

export function updateInstallationAccessTokenToJSON(
  updateInstallationAccessToken: UpdateInstallationAccessToken,
): string {
  return JSON.stringify(
    UpdateInstallationAccessToken$outboundSchema.parse(
      updateInstallationAccessToken,
    ),
  );
}

export function updateInstallationAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationAccessToken' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationRefreshToken$inboundSchema: z.ZodType<
  UpdateInstallationRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateInstallationRefreshToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const UpdateInstallationRefreshToken$outboundSchema: z.ZodType<
  UpdateInstallationRefreshToken$Outbound,
  z.ZodTypeDef,
  UpdateInstallationRefreshToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationRefreshToken$ {
  /** @deprecated use `UpdateInstallationRefreshToken$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationRefreshToken$inboundSchema;
  /** @deprecated use `UpdateInstallationRefreshToken$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationRefreshToken$outboundSchema;
  /** @deprecated use `UpdateInstallationRefreshToken$Outbound` instead. */
  export type Outbound = UpdateInstallationRefreshToken$Outbound;
}

export function updateInstallationRefreshTokenToJSON(
  updateInstallationRefreshToken: UpdateInstallationRefreshToken,
): string {
  return JSON.stringify(
    UpdateInstallationRefreshToken$outboundSchema.parse(
      updateInstallationRefreshToken,
    ),
  );
}

export function updateInstallationRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationRefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationRefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationRefreshToken' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationOAuth2AuthorizationCodeToken$inboundSchema:
  z.ZodType<
    UpdateInstallationOAuth2AuthorizationCodeToken,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessToken: z.lazy(() => UpdateInstallationAccessToken$inboundSchema)
      .optional(),
    refreshToken: z.lazy(() => UpdateInstallationRefreshToken$inboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/** @internal */
export type UpdateInstallationOAuth2AuthorizationCodeToken$Outbound = {
  accessToken?: UpdateInstallationAccessToken$Outbound | undefined;
  refreshToken?: UpdateInstallationRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const UpdateInstallationOAuth2AuthorizationCodeToken$outboundSchema:
  z.ZodType<
    UpdateInstallationOAuth2AuthorizationCodeToken$Outbound,
    z.ZodTypeDef,
    UpdateInstallationOAuth2AuthorizationCodeToken
  > = z.object({
    accessToken: z.lazy(() => UpdateInstallationAccessToken$outboundSchema)
      .optional(),
    refreshToken: z.lazy(() => UpdateInstallationRefreshToken$outboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationOAuth2AuthorizationCodeToken$ {
  /** @deprecated use `UpdateInstallationOAuth2AuthorizationCodeToken$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationOAuth2AuthorizationCodeToken$inboundSchema;
  /** @deprecated use `UpdateInstallationOAuth2AuthorizationCodeToken$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationOAuth2AuthorizationCodeToken$outboundSchema;
  /** @deprecated use `UpdateInstallationOAuth2AuthorizationCodeToken$Outbound` instead. */
  export type Outbound =
    UpdateInstallationOAuth2AuthorizationCodeToken$Outbound;
}

export function updateInstallationOAuth2AuthorizationCodeTokenToJSON(
  updateInstallationOAuth2AuthorizationCodeToken:
    UpdateInstallationOAuth2AuthorizationCodeToken,
): string {
  return JSON.stringify(
    UpdateInstallationOAuth2AuthorizationCodeToken$outboundSchema.parse(
      updateInstallationOAuth2AuthorizationCodeToken,
    ),
  );
}

export function updateInstallationOAuth2AuthorizationCodeTokenFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationOAuth2AuthorizationCodeToken,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationOAuth2AuthorizationCodeToken$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationOAuth2AuthorizationCodeToken' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationSource$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationSource
> = z.nativeEnum(UpdateInstallationSource);

/** @internal */
export const UpdateInstallationSource$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationSource
> = UpdateInstallationSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationSource$ {
  /** @deprecated use `UpdateInstallationSource$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationSource$inboundSchema;
  /** @deprecated use `UpdateInstallationSource$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationSource$outboundSchema;
}

/** @internal */
export const UpdateInstallationProviderMetadataInfo$inboundSchema: z.ZodType<
  UpdateInstallationProviderMetadataInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  source: UpdateInstallationSource$inboundSchema,
  displayName: z.string().optional(),
});

/** @internal */
export type UpdateInstallationProviderMetadataInfo$Outbound = {
  value: string;
  source: string;
  displayName?: string | undefined;
};

/** @internal */
export const UpdateInstallationProviderMetadataInfo$outboundSchema: z.ZodType<
  UpdateInstallationProviderMetadataInfo$Outbound,
  z.ZodTypeDef,
  UpdateInstallationProviderMetadataInfo
> = z.object({
  value: z.string(),
  source: UpdateInstallationSource$outboundSchema,
  displayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationProviderMetadataInfo$ {
  /** @deprecated use `UpdateInstallationProviderMetadataInfo$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationProviderMetadataInfo$inboundSchema;
  /** @deprecated use `UpdateInstallationProviderMetadataInfo$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationProviderMetadataInfo$outboundSchema;
  /** @deprecated use `UpdateInstallationProviderMetadataInfo$Outbound` instead. */
  export type Outbound = UpdateInstallationProviderMetadataInfo$Outbound;
}

export function updateInstallationProviderMetadataInfoToJSON(
  updateInstallationProviderMetadataInfo:
    UpdateInstallationProviderMetadataInfo,
): string {
  return JSON.stringify(
    UpdateInstallationProviderMetadataInfo$outboundSchema.parse(
      updateInstallationProviderMetadataInfo,
    ),
  );
}

export function updateInstallationProviderMetadataInfoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationProviderMetadataInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationProviderMetadataInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationProviderMetadataInfo' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationConnection$inboundSchema: z.ZodType<
  UpdateInstallationConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => UpdateInstallationProviderApp$inboundSchema)
    .optional(),
  group: z.lazy(() => UpdateInstallationInstallationsGroup$inboundSchema),
  consumer: z.lazy(() => UpdateInstallationConsumer$inboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  authScheme: UpdateInstallationAuthScheme$inboundSchema,
  status: UpdateInstallationStatus$inboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    UpdateInstallationOAuth2AuthorizationCodeToken$inboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => UpdateInstallationProviderMetadataInfo$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateInstallationConnection$Outbound = {
  id: string;
  projectId: string;
  provider: string;
  providerApp?: UpdateInstallationProviderApp$Outbound | undefined;
  group: UpdateInstallationInstallationsGroup$Outbound;
  consumer: UpdateInstallationConsumer$Outbound;
  providerWorkspaceRef?: string | undefined;
  providerConsumerRef?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  authScheme: string;
  status: string;
  oauth2AuthorizationCode?:
    | UpdateInstallationOAuth2AuthorizationCodeToken$Outbound
    | undefined;
  apiKey?: string | undefined;
  providerMetadata?: {
    [k: string]: UpdateInstallationProviderMetadataInfo$Outbound;
  } | undefined;
};

/** @internal */
export const UpdateInstallationConnection$outboundSchema: z.ZodType<
  UpdateInstallationConnection$Outbound,
  z.ZodTypeDef,
  UpdateInstallationConnection
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => UpdateInstallationProviderApp$outboundSchema)
    .optional(),
  group: z.lazy(() => UpdateInstallationInstallationsGroup$outboundSchema),
  consumer: z.lazy(() => UpdateInstallationConsumer$outboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  authScheme: UpdateInstallationAuthScheme$outboundSchema,
  status: UpdateInstallationStatus$outboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    UpdateInstallationOAuth2AuthorizationCodeToken$outboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => UpdateInstallationProviderMetadataInfo$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationConnection$ {
  /** @deprecated use `UpdateInstallationConnection$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationConnection$inboundSchema;
  /** @deprecated use `UpdateInstallationConnection$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationConnection$outboundSchema;
  /** @deprecated use `UpdateInstallationConnection$Outbound` instead. */
  export type Outbound = UpdateInstallationConnection$Outbound;
}

export function updateInstallationConnectionToJSON(
  updateInstallationConnection: UpdateInstallationConnection,
): string {
  return JSON.stringify(
    UpdateInstallationConnection$outboundSchema.parse(
      updateInstallationConnection,
    ),
  );
}

export function updateInstallationConnectionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationConnection' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsSelectedFieldsAutoConfig$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationInstallationsSelectedFieldsAutoConfig
  > = z.nativeEnum(UpdateInstallationInstallationsSelectedFieldsAutoConfig);

/** @internal */
export const UpdateInstallationInstallationsSelectedFieldsAutoConfig$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationInstallationsSelectedFieldsAutoConfig
  > = UpdateInstallationInstallationsSelectedFieldsAutoConfig$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsSelectedFieldsAutoConfig$ {
  /** @deprecated use `UpdateInstallationInstallationsSelectedFieldsAutoConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsSelectedFieldsAutoConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsSelectedFieldsAutoConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsSelectedFieldsAutoConfig$outboundSchema;
}

/** @internal */
export const UpdateInstallationInstallationsDefaultPeriodConfig$inboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsDefaultPeriodConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    days: z.number().int().optional(),
    fullHistory: z.boolean().optional(),
  });

/** @internal */
export type UpdateInstallationInstallationsDefaultPeriodConfig$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const UpdateInstallationInstallationsDefaultPeriodConfig$outboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsDefaultPeriodConfig$Outbound,
    z.ZodTypeDef,
    UpdateInstallationInstallationsDefaultPeriodConfig
  > = z.object({
    days: z.number().int().optional(),
    fullHistory: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsDefaultPeriodConfig$ {
  /** @deprecated use `UpdateInstallationInstallationsDefaultPeriodConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsDefaultPeriodConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsDefaultPeriodConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsDefaultPeriodConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsDefaultPeriodConfig$Outbound` instead. */
  export type Outbound =
    UpdateInstallationInstallationsDefaultPeriodConfig$Outbound;
}

export function updateInstallationInstallationsDefaultPeriodConfigToJSON(
  updateInstallationInstallationsDefaultPeriodConfig:
    UpdateInstallationInstallationsDefaultPeriodConfig,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsDefaultPeriodConfig$outboundSchema.parse(
      updateInstallationInstallationsDefaultPeriodConfig,
    ),
  );
}

export function updateInstallationInstallationsDefaultPeriodConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationInstallationsDefaultPeriodConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsDefaultPeriodConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationInstallationsDefaultPeriodConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsBackfillConfig$inboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsBackfillConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    defaultPeriod: z.lazy(() =>
      UpdateInstallationInstallationsDefaultPeriodConfig$inboundSchema
    ),
  });

/** @internal */
export type UpdateInstallationInstallationsBackfillConfig$Outbound = {
  defaultPeriod: UpdateInstallationInstallationsDefaultPeriodConfig$Outbound;
};

/** @internal */
export const UpdateInstallationInstallationsBackfillConfig$outboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsBackfillConfig$Outbound,
    z.ZodTypeDef,
    UpdateInstallationInstallationsBackfillConfig
  > = z.object({
    defaultPeriod: z.lazy(() =>
      UpdateInstallationInstallationsDefaultPeriodConfig$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsBackfillConfig$ {
  /** @deprecated use `UpdateInstallationInstallationsBackfillConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsBackfillConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsBackfillConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsBackfillConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsBackfillConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationInstallationsBackfillConfig$Outbound;
}

export function updateInstallationInstallationsBackfillConfigToJSON(
  updateInstallationInstallationsBackfillConfig:
    UpdateInstallationInstallationsBackfillConfig,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsBackfillConfig$outboundSchema.parse(
      updateInstallationInstallationsBackfillConfig,
    ),
  );
}

export function updateInstallationInstallationsBackfillConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationInstallationsBackfillConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsBackfillConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationInstallationsBackfillConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationReadConfigObject$inboundSchema: z.ZodType<
  UpdateInstallationReadConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  schedule: z.string(),
  destination: z.string(),
  selectedFields: z.record(z.boolean()),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()),
  selectedFieldsAuto:
    UpdateInstallationInstallationsSelectedFieldsAutoConfig$inboundSchema
      .optional(),
  backfill: z.lazy(() =>
    UpdateInstallationInstallationsBackfillConfig$inboundSchema
  ).optional(),
});

/** @internal */
export type UpdateInstallationReadConfigObject$Outbound = {
  objectName: string;
  schedule: string;
  destination: string;
  selectedFields: { [k: string]: boolean };
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  selectedFieldMappings: { [k: string]: string };
  selectedFieldsAuto?: string | undefined;
  backfill?: UpdateInstallationInstallationsBackfillConfig$Outbound | undefined;
};

/** @internal */
export const UpdateInstallationReadConfigObject$outboundSchema: z.ZodType<
  UpdateInstallationReadConfigObject$Outbound,
  z.ZodTypeDef,
  UpdateInstallationReadConfigObject
> = z.object({
  objectName: z.string(),
  schedule: z.string(),
  destination: z.string(),
  selectedFields: z.record(z.boolean()),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()),
  selectedFieldsAuto:
    UpdateInstallationInstallationsSelectedFieldsAutoConfig$outboundSchema
      .optional(),
  backfill: z.lazy(() =>
    UpdateInstallationInstallationsBackfillConfig$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationReadConfigObject$ {
  /** @deprecated use `UpdateInstallationReadConfigObject$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationReadConfigObject$inboundSchema;
  /** @deprecated use `UpdateInstallationReadConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationReadConfigObject$outboundSchema;
  /** @deprecated use `UpdateInstallationReadConfigObject$Outbound` instead. */
  export type Outbound = UpdateInstallationReadConfigObject$Outbound;
}

export function updateInstallationReadConfigObjectToJSON(
  updateInstallationReadConfigObject: UpdateInstallationReadConfigObject,
): string {
  return JSON.stringify(
    UpdateInstallationReadConfigObject$outboundSchema.parse(
      updateInstallationReadConfigObject,
    ),
  );
}

export function updateInstallationReadConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationReadConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationReadConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationReadConfigObject' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationReadConfig$inboundSchema: z.ZodType<
  UpdateInstallationReadConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => UpdateInstallationReadConfigObject$inboundSchema),
  ),
});

/** @internal */
export type UpdateInstallationReadConfig$Outbound = {
  objects: { [k: string]: UpdateInstallationReadConfigObject$Outbound };
};

/** @internal */
export const UpdateInstallationReadConfig$outboundSchema: z.ZodType<
  UpdateInstallationReadConfig$Outbound,
  z.ZodTypeDef,
  UpdateInstallationReadConfig
> = z.object({
  objects: z.record(
    z.lazy(() => UpdateInstallationReadConfigObject$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationReadConfig$ {
  /** @deprecated use `UpdateInstallationReadConfig$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationReadConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationReadConfig$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationReadConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationReadConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationReadConfig$Outbound;
}

export function updateInstallationReadConfigToJSON(
  updateInstallationReadConfig: UpdateInstallationReadConfig,
): string {
  return JSON.stringify(
    UpdateInstallationReadConfig$outboundSchema.parse(
      updateInstallationReadConfig,
    ),
  );
}

export function updateInstallationReadConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationReadConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationReadConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationReadConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate
  > = z.nativeEnum(
    UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate,
  );

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate
  > =
    UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$outboundSchema;
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema:
  z.ZodType<
    UpdateInstallationValueDefaultLegacyValueDefaultBoolean,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.boolean(),
    applyOnUpdate:
      UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$inboundSchema
        .optional(),
  });

/** @internal */
export type UpdateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound = {
  value: boolean;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const UpdateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema:
  z.ZodType<
    UpdateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound,
    z.ZodTypeDef,
    UpdateInstallationValueDefaultLegacyValueDefaultBoolean
  > = z.object({
    value: z.boolean(),
    applyOnUpdate:
      UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplicationJSONApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyValueDefaultBoolean$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound` instead. */
  export type Outbound =
    UpdateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound;
}

export function updateInstallationValueDefaultLegacyValueDefaultBooleanToJSON(
  updateInstallationValueDefaultLegacyValueDefaultBoolean:
    UpdateInstallationValueDefaultLegacyValueDefaultBoolean,
): string {
  return JSON.stringify(
    UpdateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema
      .parse(updateInstallationValueDefaultLegacyValueDefaultBoolean),
  );
}

export function updateInstallationValueDefaultLegacyValueDefaultBooleanFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationValueDefaultLegacyValueDefaultBoolean,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationValueDefaultLegacyValueDefaultBoolean' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate
  > = z.nativeEnum(
    UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate,
  );

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate
  > =
    UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$outboundSchema;
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema:
  z.ZodType<
    UpdateInstallationValueDefaultLegacyValueDefaultInteger,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.number().int(),
    applyOnUpdate:
      UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$inboundSchema
        .optional(),
  });

/** @internal */
export type UpdateInstallationValueDefaultLegacyValueDefaultInteger$Outbound = {
  value: number;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const UpdateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema:
  z.ZodType<
    UpdateInstallationValueDefaultLegacyValueDefaultInteger$Outbound,
    z.ZodTypeDef,
    UpdateInstallationValueDefaultLegacyValueDefaultInteger
  > = z.object({
    value: z.number().int(),
    applyOnUpdate:
      UpdateInstallationValueDefaultLegacyInstallationsResponse200ApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyValueDefaultInteger$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultInteger$Outbound` instead. */
  export type Outbound =
    UpdateInstallationValueDefaultLegacyValueDefaultInteger$Outbound;
}

export function updateInstallationValueDefaultLegacyValueDefaultIntegerToJSON(
  updateInstallationValueDefaultLegacyValueDefaultInteger:
    UpdateInstallationValueDefaultLegacyValueDefaultInteger,
): string {
  return JSON.stringify(
    UpdateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema
      .parse(updateInstallationValueDefaultLegacyValueDefaultInteger),
  );
}

export function updateInstallationValueDefaultLegacyValueDefaultIntegerFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationValueDefaultLegacyValueDefaultInteger,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationValueDefaultLegacyValueDefaultInteger' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate
  > = z.nativeEnum(
    UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate,
  );

/** @internal */
export const UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate
  > =
    UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema;
}

/** @internal */
export const UpdateInstallationValueDefaultLegacyValueDefaultString$inboundSchema:
  z.ZodType<
    UpdateInstallationValueDefaultLegacyValueDefaultString,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
    applyOnUpdate:
      UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema
        .optional(),
  });

/** @internal */
export type UpdateInstallationValueDefaultLegacyValueDefaultString$Outbound = {
  value: string;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const UpdateInstallationValueDefaultLegacyValueDefaultString$outboundSchema:
  z.ZodType<
    UpdateInstallationValueDefaultLegacyValueDefaultString$Outbound,
    z.ZodTypeDef,
    UpdateInstallationValueDefaultLegacyValueDefaultString
  > = z.object({
    value: z.string(),
    applyOnUpdate:
      UpdateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationValueDefaultLegacyValueDefaultString$ {
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultString$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationValueDefaultLegacyValueDefaultString$inboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultString$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationValueDefaultLegacyValueDefaultString$outboundSchema;
  /** @deprecated use `UpdateInstallationValueDefaultLegacyValueDefaultString$Outbound` instead. */
  export type Outbound =
    UpdateInstallationValueDefaultLegacyValueDefaultString$Outbound;
}

export function updateInstallationValueDefaultLegacyValueDefaultStringToJSON(
  updateInstallationValueDefaultLegacyValueDefaultString:
    UpdateInstallationValueDefaultLegacyValueDefaultString,
): string {
  return JSON.stringify(
    UpdateInstallationValueDefaultLegacyValueDefaultString$outboundSchema.parse(
      updateInstallationValueDefaultLegacyValueDefaultString,
    ),
  );
}

export function updateInstallationValueDefaultLegacyValueDefaultStringFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationValueDefaultLegacyValueDefaultString,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationValueDefaultLegacyValueDefaultString$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationValueDefaultLegacyValueDefaultString' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsValueDefaultLegacy$inboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsValueDefaultLegacy,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      UpdateInstallationValueDefaultLegacyValueDefaultString$inboundSchema
    ),
    z.lazy(() =>
      UpdateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema
    ),
    z.lazy(() =>
      UpdateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema
    ),
  ]);

/** @internal */
export type UpdateInstallationInstallationsValueDefaultLegacy$Outbound =
  | UpdateInstallationValueDefaultLegacyValueDefaultString$Outbound
  | UpdateInstallationValueDefaultLegacyValueDefaultInteger$Outbound
  | UpdateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound;

/** @internal */
export const UpdateInstallationInstallationsValueDefaultLegacy$outboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsValueDefaultLegacy$Outbound,
    z.ZodTypeDef,
    UpdateInstallationInstallationsValueDefaultLegacy
  > = z.union([
    z.lazy(() =>
      UpdateInstallationValueDefaultLegacyValueDefaultString$outboundSchema
    ),
    z.lazy(() =>
      UpdateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema
    ),
    z.lazy(() =>
      UpdateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsValueDefaultLegacy$ {
  /** @deprecated use `UpdateInstallationInstallationsValueDefaultLegacy$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsValueDefaultLegacy$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsValueDefaultLegacy$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsValueDefaultLegacy$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsValueDefaultLegacy$Outbound` instead. */
  export type Outbound =
    UpdateInstallationInstallationsValueDefaultLegacy$Outbound;
}

export function updateInstallationInstallationsValueDefaultLegacyToJSON(
  updateInstallationInstallationsValueDefaultLegacy:
    UpdateInstallationInstallationsValueDefaultLegacy,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsValueDefaultLegacy$outboundSchema.parse(
      updateInstallationInstallationsValueDefaultLegacy,
    ),
  );
}

export function updateInstallationInstallationsValueDefaultLegacyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationInstallationsValueDefaultLegacy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsValueDefaultLegacy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationInstallationsValueDefaultLegacy' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsDefaultValueForAField$inboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsDefaultValueForAField,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stringValue: z.string().optional(),
    integerValue: z.number().int().optional(),
    booleanValue: z.boolean().optional(),
  });

/** @internal */
export type UpdateInstallationInstallationsDefaultValueForAField$Outbound = {
  stringValue?: string | undefined;
  integerValue?: number | undefined;
  booleanValue?: boolean | undefined;
};

/** @internal */
export const UpdateInstallationInstallationsDefaultValueForAField$outboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsDefaultValueForAField$Outbound,
    z.ZodTypeDef,
    UpdateInstallationInstallationsDefaultValueForAField
  > = z.object({
    stringValue: z.string().optional(),
    integerValue: z.number().int().optional(),
    booleanValue: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsDefaultValueForAField$ {
  /** @deprecated use `UpdateInstallationInstallationsDefaultValueForAField$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsDefaultValueForAField$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsDefaultValueForAField$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsDefaultValueForAField$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsDefaultValueForAField$Outbound` instead. */
  export type Outbound =
    UpdateInstallationInstallationsDefaultValueForAField$Outbound;
}

export function updateInstallationInstallationsDefaultValueForAFieldToJSON(
  updateInstallationInstallationsDefaultValueForAField:
    UpdateInstallationInstallationsDefaultValueForAField,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsDefaultValueForAField$outboundSchema.parse(
      updateInstallationInstallationsDefaultValueForAField,
    ),
  );
}

export function updateInstallationInstallationsDefaultValueForAFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationInstallationsDefaultValueForAField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsDefaultValueForAField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationInstallationsDefaultValueForAField' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsWriteOnCreate$inboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationInstallationsWriteOnCreate> = z
    .nativeEnum(UpdateInstallationInstallationsWriteOnCreate);

/** @internal */
export const UpdateInstallationInstallationsWriteOnCreate$outboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationInstallationsWriteOnCreate> =
    UpdateInstallationInstallationsWriteOnCreate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsWriteOnCreate$ {
  /** @deprecated use `UpdateInstallationInstallationsWriteOnCreate$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsWriteOnCreate$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsWriteOnCreate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsWriteOnCreate$outboundSchema;
}

/** @internal */
export const UpdateInstallationInstallationsWriteOnUpdate$inboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationInstallationsWriteOnUpdate> = z
    .nativeEnum(UpdateInstallationInstallationsWriteOnUpdate);

/** @internal */
export const UpdateInstallationInstallationsWriteOnUpdate$outboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationInstallationsWriteOnUpdate> =
    UpdateInstallationInstallationsWriteOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsWriteOnUpdate$ {
  /** @deprecated use `UpdateInstallationInstallationsWriteOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsWriteOnUpdate$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsWriteOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsWriteOnUpdate$outboundSchema;
}

/** @internal */
export const UpdateInstallationInstallationsFieldSetting$inboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsFieldSetting,
    z.ZodTypeDef,
    unknown
  > = z.object({
    default: z.lazy(() =>
      UpdateInstallationInstallationsDefaultValueForAField$inboundSchema
    ).optional(),
    writeOnCreate: UpdateInstallationInstallationsWriteOnCreate$inboundSchema
      .default("always"),
    writeOnUpdate: UpdateInstallationInstallationsWriteOnUpdate$inboundSchema
      .default("always"),
  });

/** @internal */
export type UpdateInstallationInstallationsFieldSetting$Outbound = {
  default?:
    | UpdateInstallationInstallationsDefaultValueForAField$Outbound
    | undefined;
  writeOnCreate: string;
  writeOnUpdate: string;
};

/** @internal */
export const UpdateInstallationInstallationsFieldSetting$outboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsFieldSetting$Outbound,
    z.ZodTypeDef,
    UpdateInstallationInstallationsFieldSetting
  > = z.object({
    default: z.lazy(() =>
      UpdateInstallationInstallationsDefaultValueForAField$outboundSchema
    ).optional(),
    writeOnCreate: UpdateInstallationInstallationsWriteOnCreate$outboundSchema
      .default("always"),
    writeOnUpdate: UpdateInstallationInstallationsWriteOnUpdate$outboundSchema
      .default("always"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsFieldSetting$ {
  /** @deprecated use `UpdateInstallationInstallationsFieldSetting$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsFieldSetting$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsFieldSetting$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsFieldSetting$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsFieldSetting$Outbound` instead. */
  export type Outbound = UpdateInstallationInstallationsFieldSetting$Outbound;
}

export function updateInstallationInstallationsFieldSettingToJSON(
  updateInstallationInstallationsFieldSetting:
    UpdateInstallationInstallationsFieldSetting,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsFieldSetting$outboundSchema.parse(
      updateInstallationInstallationsFieldSetting,
    ),
  );
}

export function updateInstallationInstallationsFieldSettingFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationInstallationsFieldSetting,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsFieldSetting$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationInstallationsFieldSetting' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationWriteConfigObject$inboundSchema: z.ZodType<
  UpdateInstallationWriteConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() =>
        UpdateInstallationValueDefaultLegacyValueDefaultString$inboundSchema
      ),
      z.lazy(() =>
        UpdateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema
      ),
      z.lazy(() =>
        UpdateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema
      ),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(
    z.lazy(() => UpdateInstallationInstallationsFieldSetting$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateInstallationWriteConfigObject$Outbound = {
  objectName: string;
  selectedValueDefaults?: {
    [k: string]:
      | UpdateInstallationValueDefaultLegacyValueDefaultString$Outbound
      | UpdateInstallationValueDefaultLegacyValueDefaultInteger$Outbound
      | UpdateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound;
  } | undefined;
  selectedFieldSettings?: {
    [k: string]: UpdateInstallationInstallationsFieldSetting$Outbound;
  } | undefined;
};

/** @internal */
export const UpdateInstallationWriteConfigObject$outboundSchema: z.ZodType<
  UpdateInstallationWriteConfigObject$Outbound,
  z.ZodTypeDef,
  UpdateInstallationWriteConfigObject
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() =>
        UpdateInstallationValueDefaultLegacyValueDefaultString$outboundSchema
      ),
      z.lazy(() =>
        UpdateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema
      ),
      z.lazy(() =>
        UpdateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema
      ),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(
    z.lazy(() => UpdateInstallationInstallationsFieldSetting$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationWriteConfigObject$ {
  /** @deprecated use `UpdateInstallationWriteConfigObject$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationWriteConfigObject$inboundSchema;
  /** @deprecated use `UpdateInstallationWriteConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationWriteConfigObject$outboundSchema;
  /** @deprecated use `UpdateInstallationWriteConfigObject$Outbound` instead. */
  export type Outbound = UpdateInstallationWriteConfigObject$Outbound;
}

export function updateInstallationWriteConfigObjectToJSON(
  updateInstallationWriteConfigObject: UpdateInstallationWriteConfigObject,
): string {
  return JSON.stringify(
    UpdateInstallationWriteConfigObject$outboundSchema.parse(
      updateInstallationWriteConfigObject,
    ),
  );
}

export function updateInstallationWriteConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationWriteConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationWriteConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationWriteConfigObject' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationWriteConfig$inboundSchema: z.ZodType<
  UpdateInstallationWriteConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => UpdateInstallationWriteConfigObject$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateInstallationWriteConfig$Outbound = {
  objects?:
    | { [k: string]: UpdateInstallationWriteConfigObject$Outbound }
    | undefined;
};

/** @internal */
export const UpdateInstallationWriteConfig$outboundSchema: z.ZodType<
  UpdateInstallationWriteConfig$Outbound,
  z.ZodTypeDef,
  UpdateInstallationWriteConfig
> = z.object({
  objects: z.record(
    z.lazy(() => UpdateInstallationWriteConfigObject$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationWriteConfig$ {
  /** @deprecated use `UpdateInstallationWriteConfig$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationWriteConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationWriteConfig$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationWriteConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationWriteConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationWriteConfig$Outbound;
}

export function updateInstallationWriteConfigToJSON(
  updateInstallationWriteConfig: UpdateInstallationWriteConfig,
): string {
  return JSON.stringify(
    UpdateInstallationWriteConfig$outboundSchema.parse(
      updateInstallationWriteConfig,
    ),
  );
}

export function updateInstallationWriteConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationWriteConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationWriteConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationWriteConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsBaseProxyConfig$inboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsBaseProxyConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    enabled: z.boolean().optional(),
  });

/** @internal */
export type UpdateInstallationInstallationsBaseProxyConfig$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const UpdateInstallationInstallationsBaseProxyConfig$outboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsBaseProxyConfig$Outbound,
    z.ZodTypeDef,
    UpdateInstallationInstallationsBaseProxyConfig
  > = z.object({
    enabled: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsBaseProxyConfig$ {
  /** @deprecated use `UpdateInstallationInstallationsBaseProxyConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsBaseProxyConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsBaseProxyConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsBaseProxyConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsBaseProxyConfig$Outbound` instead. */
  export type Outbound =
    UpdateInstallationInstallationsBaseProxyConfig$Outbound;
}

export function updateInstallationInstallationsBaseProxyConfigToJSON(
  updateInstallationInstallationsBaseProxyConfig:
    UpdateInstallationInstallationsBaseProxyConfig,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsBaseProxyConfig$outboundSchema.parse(
      updateInstallationInstallationsBaseProxyConfig,
    ),
  );
}

export function updateInstallationInstallationsBaseProxyConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationInstallationsBaseProxyConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsBaseProxyConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationInstallationsBaseProxyConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationEnabled$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationEnabled
> = z.nativeEnum(UpdateInstallationEnabled);

/** @internal */
export const UpdateInstallationEnabled$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationEnabled
> = UpdateInstallationEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationEnabled$ {
  /** @deprecated use `UpdateInstallationEnabled$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationEnabled$inboundSchema;
  /** @deprecated use `UpdateInstallationEnabled$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationEnabled$outboundSchema;
}

/** @internal */
export const UpdateInstallationCreateEvent$inboundSchema: z.ZodType<
  UpdateInstallationCreateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: UpdateInstallationEnabled$inboundSchema,
});

/** @internal */
export type UpdateInstallationCreateEvent$Outbound = {
  enabled: string;
};

/** @internal */
export const UpdateInstallationCreateEvent$outboundSchema: z.ZodType<
  UpdateInstallationCreateEvent$Outbound,
  z.ZodTypeDef,
  UpdateInstallationCreateEvent
> = z.object({
  enabled: UpdateInstallationEnabled$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationCreateEvent$ {
  /** @deprecated use `UpdateInstallationCreateEvent$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationCreateEvent$inboundSchema;
  /** @deprecated use `UpdateInstallationCreateEvent$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationCreateEvent$outboundSchema;
  /** @deprecated use `UpdateInstallationCreateEvent$Outbound` instead. */
  export type Outbound = UpdateInstallationCreateEvent$Outbound;
}

export function updateInstallationCreateEventToJSON(
  updateInstallationCreateEvent: UpdateInstallationCreateEvent,
): string {
  return JSON.stringify(
    UpdateInstallationCreateEvent$outboundSchema.parse(
      updateInstallationCreateEvent,
    ),
  );
}

export function updateInstallationCreateEventFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationCreateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationCreateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationCreateEvent' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsEnabled$inboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationInstallationsEnabled> = z.nativeEnum(
    UpdateInstallationInstallationsEnabled,
  );

/** @internal */
export const UpdateInstallationInstallationsEnabled$outboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationInstallationsEnabled> =
    UpdateInstallationInstallationsEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsEnabled$ {
  /** @deprecated use `UpdateInstallationInstallationsEnabled$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsEnabled$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsEnabled$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsEnabled$outboundSchema;
}

/** @internal */
export const UpdateInstallationWatchFieldsAuto$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationWatchFieldsAuto
> = z.nativeEnum(UpdateInstallationWatchFieldsAuto);

/** @internal */
export const UpdateInstallationWatchFieldsAuto$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationWatchFieldsAuto
> = UpdateInstallationWatchFieldsAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationWatchFieldsAuto$ {
  /** @deprecated use `UpdateInstallationWatchFieldsAuto$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationWatchFieldsAuto$inboundSchema;
  /** @deprecated use `UpdateInstallationWatchFieldsAuto$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationWatchFieldsAuto$outboundSchema;
}

/** @internal */
export const UpdateInstallationUpdateEvent$inboundSchema: z.ZodType<
  UpdateInstallationUpdateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: UpdateInstallationInstallationsEnabled$inboundSchema,
  watchFieldsAuto: UpdateInstallationWatchFieldsAuto$inboundSchema.optional(),
  requiredWatchFields: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateInstallationUpdateEvent$Outbound = {
  enabled: string;
  watchFieldsAuto?: string | undefined;
  requiredWatchFields?: Array<string> | undefined;
};

/** @internal */
export const UpdateInstallationUpdateEvent$outboundSchema: z.ZodType<
  UpdateInstallationUpdateEvent$Outbound,
  z.ZodTypeDef,
  UpdateInstallationUpdateEvent
> = z.object({
  enabled: UpdateInstallationInstallationsEnabled$outboundSchema,
  watchFieldsAuto: UpdateInstallationWatchFieldsAuto$outboundSchema.optional(),
  requiredWatchFields: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationUpdateEvent$ {
  /** @deprecated use `UpdateInstallationUpdateEvent$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationUpdateEvent$inboundSchema;
  /** @deprecated use `UpdateInstallationUpdateEvent$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationUpdateEvent$outboundSchema;
  /** @deprecated use `UpdateInstallationUpdateEvent$Outbound` instead. */
  export type Outbound = UpdateInstallationUpdateEvent$Outbound;
}

export function updateInstallationUpdateEventToJSON(
  updateInstallationUpdateEvent: UpdateInstallationUpdateEvent,
): string {
  return JSON.stringify(
    UpdateInstallationUpdateEvent$outboundSchema.parse(
      updateInstallationUpdateEvent,
    ),
  );
}

export function updateInstallationUpdateEventFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationUpdateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationUpdateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationUpdateEvent' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsResponseEnabled$inboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationInstallationsResponseEnabled> = z
    .nativeEnum(UpdateInstallationInstallationsResponseEnabled);

/** @internal */
export const UpdateInstallationInstallationsResponseEnabled$outboundSchema:
  z.ZodNativeEnum<typeof UpdateInstallationInstallationsResponseEnabled> =
    UpdateInstallationInstallationsResponseEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsResponseEnabled$ {
  /** @deprecated use `UpdateInstallationInstallationsResponseEnabled$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsResponseEnabled$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsResponseEnabled$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsResponseEnabled$outboundSchema;
}

/** @internal */
export const UpdateInstallationDeleteEvent$inboundSchema: z.ZodType<
  UpdateInstallationDeleteEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: UpdateInstallationInstallationsResponseEnabled$inboundSchema,
});

/** @internal */
export type UpdateInstallationDeleteEvent$Outbound = {
  enabled: string;
};

/** @internal */
export const UpdateInstallationDeleteEvent$outboundSchema: z.ZodType<
  UpdateInstallationDeleteEvent$Outbound,
  z.ZodTypeDef,
  UpdateInstallationDeleteEvent
> = z.object({
  enabled: UpdateInstallationInstallationsResponseEnabled$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationDeleteEvent$ {
  /** @deprecated use `UpdateInstallationDeleteEvent$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationDeleteEvent$inboundSchema;
  /** @deprecated use `UpdateInstallationDeleteEvent$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationDeleteEvent$outboundSchema;
  /** @deprecated use `UpdateInstallationDeleteEvent$Outbound` instead. */
  export type Outbound = UpdateInstallationDeleteEvent$Outbound;
}

export function updateInstallationDeleteEventToJSON(
  updateInstallationDeleteEvent: UpdateInstallationDeleteEvent,
): string {
  return JSON.stringify(
    UpdateInstallationDeleteEvent$outboundSchema.parse(
      updateInstallationDeleteEvent,
    ),
  );
}

export function updateInstallationDeleteEventFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationDeleteEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationDeleteEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationDeleteEvent' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationSubscribeConfigObject$inboundSchema: z.ZodType<
  UpdateInstallationSubscribeConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  inheritFieldsAndMappings: z.boolean(),
  objectName: z.string(),
  destination: z.string(),
  createEvent: z.lazy(() => UpdateInstallationCreateEvent$inboundSchema)
    .optional(),
  updateEvent: z.lazy(() => UpdateInstallationUpdateEvent$inboundSchema)
    .optional(),
  deleteEvent: z.lazy(() => UpdateInstallationDeleteEvent$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateInstallationSubscribeConfigObject$Outbound = {
  inheritFieldsAndMappings: boolean;
  objectName: string;
  destination: string;
  createEvent?: UpdateInstallationCreateEvent$Outbound | undefined;
  updateEvent?: UpdateInstallationUpdateEvent$Outbound | undefined;
  deleteEvent?: UpdateInstallationDeleteEvent$Outbound | undefined;
};

/** @internal */
export const UpdateInstallationSubscribeConfigObject$outboundSchema: z.ZodType<
  UpdateInstallationSubscribeConfigObject$Outbound,
  z.ZodTypeDef,
  UpdateInstallationSubscribeConfigObject
> = z.object({
  inheritFieldsAndMappings: z.boolean(),
  objectName: z.string(),
  destination: z.string(),
  createEvent: z.lazy(() => UpdateInstallationCreateEvent$outboundSchema)
    .optional(),
  updateEvent: z.lazy(() => UpdateInstallationUpdateEvent$outboundSchema)
    .optional(),
  deleteEvent: z.lazy(() => UpdateInstallationDeleteEvent$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationSubscribeConfigObject$ {
  /** @deprecated use `UpdateInstallationSubscribeConfigObject$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationSubscribeConfigObject$inboundSchema;
  /** @deprecated use `UpdateInstallationSubscribeConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationSubscribeConfigObject$outboundSchema;
  /** @deprecated use `UpdateInstallationSubscribeConfigObject$Outbound` instead. */
  export type Outbound = UpdateInstallationSubscribeConfigObject$Outbound;
}

export function updateInstallationSubscribeConfigObjectToJSON(
  updateInstallationSubscribeConfigObject:
    UpdateInstallationSubscribeConfigObject,
): string {
  return JSON.stringify(
    UpdateInstallationSubscribeConfigObject$outboundSchema.parse(
      updateInstallationSubscribeConfigObject,
    ),
  );
}

export function updateInstallationSubscribeConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationSubscribeConfigObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationSubscribeConfigObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationSubscribeConfigObject' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationSubscribeConfig$inboundSchema: z.ZodType<
  UpdateInstallationSubscribeConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => UpdateInstallationSubscribeConfigObject$inboundSchema),
  ),
});

/** @internal */
export type UpdateInstallationSubscribeConfig$Outbound = {
  objects: { [k: string]: UpdateInstallationSubscribeConfigObject$Outbound };
};

/** @internal */
export const UpdateInstallationSubscribeConfig$outboundSchema: z.ZodType<
  UpdateInstallationSubscribeConfig$Outbound,
  z.ZodTypeDef,
  UpdateInstallationSubscribeConfig
> = z.object({
  objects: z.record(
    z.lazy(() => UpdateInstallationSubscribeConfigObject$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationSubscribeConfig$ {
  /** @deprecated use `UpdateInstallationSubscribeConfig$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationSubscribeConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationSubscribeConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationSubscribeConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationSubscribeConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationSubscribeConfig$Outbound;
}

export function updateInstallationSubscribeConfigToJSON(
  updateInstallationSubscribeConfig: UpdateInstallationSubscribeConfig,
): string {
  return JSON.stringify(
    UpdateInstallationSubscribeConfig$outboundSchema.parse(
      updateInstallationSubscribeConfig,
    ),
  );
}

export function updateInstallationSubscribeConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationSubscribeConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationSubscribeConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationSubscribeConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsConfigContent$inboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsConfigContent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    provider: z.string(),
    read: z.lazy(() => UpdateInstallationReadConfig$inboundSchema).optional(),
    write: z.lazy(() => UpdateInstallationWriteConfig$inboundSchema).optional(),
    proxy: z.lazy(() =>
      UpdateInstallationInstallationsBaseProxyConfig$inboundSchema
    ).optional(),
    subscribe: z.lazy(() => UpdateInstallationSubscribeConfig$inboundSchema)
      .optional(),
  });

/** @internal */
export type UpdateInstallationInstallationsConfigContent$Outbound = {
  provider: string;
  read?: UpdateInstallationReadConfig$Outbound | undefined;
  write?: UpdateInstallationWriteConfig$Outbound | undefined;
  proxy?: UpdateInstallationInstallationsBaseProxyConfig$Outbound | undefined;
  subscribe?: UpdateInstallationSubscribeConfig$Outbound | undefined;
};

/** @internal */
export const UpdateInstallationInstallationsConfigContent$outboundSchema:
  z.ZodType<
    UpdateInstallationInstallationsConfigContent$Outbound,
    z.ZodTypeDef,
    UpdateInstallationInstallationsConfigContent
  > = z.object({
    provider: z.string(),
    read: z.lazy(() => UpdateInstallationReadConfig$outboundSchema).optional(),
    write: z.lazy(() => UpdateInstallationWriteConfig$outboundSchema)
      .optional(),
    proxy: z.lazy(() =>
      UpdateInstallationInstallationsBaseProxyConfig$outboundSchema
    ).optional(),
    subscribe: z.lazy(() => UpdateInstallationSubscribeConfig$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsConfigContent$ {
  /** @deprecated use `UpdateInstallationInstallationsConfigContent$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsConfigContent$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsConfigContent$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsConfigContent$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsConfigContent$Outbound` instead. */
  export type Outbound = UpdateInstallationInstallationsConfigContent$Outbound;
}

export function updateInstallationInstallationsConfigContentToJSON(
  updateInstallationInstallationsConfigContent:
    UpdateInstallationInstallationsConfigContent,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsConfigContent$outboundSchema.parse(
      updateInstallationInstallationsConfigContent,
    ),
  );
}

export function updateInstallationInstallationsConfigContentFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInstallationInstallationsConfigContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsConfigContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInstallationInstallationsConfigContent' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallationsConfig$inboundSchema: z.ZodType<
  UpdateInstallationInstallationsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  content: z.lazy(() =>
    UpdateInstallationInstallationsConfigContent$inboundSchema
  ),
});

/** @internal */
export type UpdateInstallationInstallationsConfig$Outbound = {
  id: string;
  revisionId: string;
  createTime: string;
  createdBy: string;
  content: UpdateInstallationInstallationsConfigContent$Outbound;
};

/** @internal */
export const UpdateInstallationInstallationsConfig$outboundSchema: z.ZodType<
  UpdateInstallationInstallationsConfig$Outbound,
  z.ZodTypeDef,
  UpdateInstallationInstallationsConfig
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  content: z.lazy(() =>
    UpdateInstallationInstallationsConfigContent$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallationsConfig$ {
  /** @deprecated use `UpdateInstallationInstallationsConfig$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInstallationInstallationsConfig$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsConfig$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInstallationInstallationsConfig$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallationsConfig$Outbound` instead. */
  export type Outbound = UpdateInstallationInstallationsConfig$Outbound;
}

export function updateInstallationInstallationsConfigToJSON(
  updateInstallationInstallationsConfig: UpdateInstallationInstallationsConfig,
): string {
  return JSON.stringify(
    UpdateInstallationInstallationsConfig$outboundSchema.parse(
      updateInstallationInstallationsConfig,
    ),
  );
}

export function updateInstallationInstallationsConfigFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationInstallationsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInstallationInstallationsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationInstallationsConfig' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationInstallation$inboundSchema: z.ZodType<
  UpdateInstallationInstallation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => UpdateInstallationGroup$inboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => UpdateInstallationConnection$inboundSchema),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  config: z.lazy(() => UpdateInstallationInstallationsConfig$inboundSchema),
});

/** @internal */
export type UpdateInstallationInstallation$Outbound = {
  id: string;
  projectId: string;
  integrationId: string;
  group?: UpdateInstallationGroup$Outbound | undefined;
  healthStatus: string;
  connection: UpdateInstallationConnection$Outbound;
  createTime: string;
  createdBy: string;
  updateTime?: string | undefined;
  config: UpdateInstallationInstallationsConfig$Outbound;
};

/** @internal */
export const UpdateInstallationInstallation$outboundSchema: z.ZodType<
  UpdateInstallationInstallation$Outbound,
  z.ZodTypeDef,
  UpdateInstallationInstallation
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => UpdateInstallationGroup$outboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => UpdateInstallationConnection$outboundSchema),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  config: z.lazy(() => UpdateInstallationInstallationsConfig$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationInstallation$ {
  /** @deprecated use `UpdateInstallationInstallation$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationInstallation$inboundSchema;
  /** @deprecated use `UpdateInstallationInstallation$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationInstallation$outboundSchema;
  /** @deprecated use `UpdateInstallationInstallation$Outbound` instead. */
  export type Outbound = UpdateInstallationInstallation$Outbound;
}

export function updateInstallationInstallationToJSON(
  updateInstallationInstallation: UpdateInstallationInstallation,
): string {
  return JSON.stringify(
    UpdateInstallationInstallation$outboundSchema.parse(
      updateInstallationInstallation,
    ),
  );
}

export function updateInstallationInstallationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationInstallation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationInstallation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationInstallation' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationResponse$inboundSchema: z.ZodType<
  UpdateInstallationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateInstallationInstallation$inboundSchema),
  z.lazy(() => UpdateInstallationAPIProblem$inboundSchema),
]);

/** @internal */
export type UpdateInstallationResponse$Outbound =
  | UpdateInstallationInstallation$Outbound
  | UpdateInstallationAPIProblem$Outbound;

/** @internal */
export const UpdateInstallationResponse$outboundSchema: z.ZodType<
  UpdateInstallationResponse$Outbound,
  z.ZodTypeDef,
  UpdateInstallationResponse
> = z.union([
  z.lazy(() => UpdateInstallationInstallation$outboundSchema),
  z.lazy(() => UpdateInstallationAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationResponse$ {
  /** @deprecated use `UpdateInstallationResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationResponse$inboundSchema;
  /** @deprecated use `UpdateInstallationResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationResponse$outboundSchema;
  /** @deprecated use `UpdateInstallationResponse$Outbound` instead. */
  export type Outbound = UpdateInstallationResponse$Outbound;
}

export function updateInstallationResponseToJSON(
  updateInstallationResponse: UpdateInstallationResponse,
): string {
  return JSON.stringify(
    UpdateInstallationResponse$outboundSchema.parse(updateInstallationResponse),
  );
}

export function updateInstallationResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationResponse' from JSON`,
  );
}
