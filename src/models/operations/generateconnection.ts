/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The source of the metadata field
 */
export const GenerateConnectionSource = {
  Input: "input",
  Token: "token",
  Provider: "provider",
} as const;
/**
 * The source of the metadata field
 */
export type GenerateConnectionSource = ClosedEnum<
  typeof GenerateConnectionSource
>;

export type GenerateConnectionProviderMetadataInfo = {
  /**
   * The value of the metadata field
   */
  value: string;
  /**
   * The source of the metadata field
   */
  source: GenerateConnectionSource;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
};

export type BasicAuth = {
  /**
   * The username to use for the connection.
   */
  username: string;
  /**
   * The password to use for the connection.
   */
  password: string;
};

export type Oauth2ClientCredentials = {
  /**
   * The client ID to use for the connection.
   */
  clientId: string;
  /**
   * The client secret to use for the connection.
   */
  clientSecret: string;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

export type Oauth2PasswordCredentials = {
  /**
   * The username to use for the connection.
   */
  username: string;
  /**
   * The password to use for the connection.
   */
  password: string;
  /**
   * The client ID to use for the connection.
   */
  clientId: string;
  /**
   * The client secret to use for the connection.
   */
  clientSecret: string;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

/**
 * The access token for the connection.
 */
export type AccessToken = {
  token: string;
  expiresAt?: Date | undefined;
  issuedAt?: Date | undefined;
};

/**
 * The refresh token to use for the connection.
 */
export type RefreshToken = {
  token: string;
  expiresAt?: Date | undefined;
  issuedAt?: Date | undefined;
};

export type OAuth2AuthorizationCode = {
  /**
   * The access token for the connection.
   */
  accessToken?: AccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: RefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

export type GenerateConnectionGenerateConnectionRequest = {
  /**
   * The ID of the provider workspace that this connection belongs to.
   */
  providerWorkspaceRef?: string | undefined;
  providerMetadata?:
    | { [k: string]: GenerateConnectionProviderMetadataInfo }
    | undefined;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName?: string | undefined;
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the consumer that has access to this installation.
   */
  consumerName?: string | undefined;
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The provider name (e.g. "salesforce", "hubspot")
   */
  provider: string;
  /**
   * The API key to use for the connection.
   */
  apiKey?: string | undefined;
  basicAuth?: BasicAuth | undefined;
  oauth2ClientCredentials?: Oauth2ClientCredentials | undefined;
  oauth2PasswordCredentials?: Oauth2PasswordCredentials | undefined;
  oauth2AuthorizationCode?: OAuth2AuthorizationCode | undefined;
};

export type GenerateConnectionRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  requestBody?: GenerateConnectionGenerateConnectionRequest | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GenerateConnectionAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type GenerateConnectionProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type GenerateConnectionGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type GenerateConnectionConsumer = {
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The name of the consumer.
   */
  consumerName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the consumer was created.
   */
  createTime: Date;
  /**
   * The time the consumer was last updated.
   */
  updateTime?: Date | undefined;
};

/**
 * The authentication scheme used for this connection.
 */
export const GenerateConnectionAuthScheme = {
  None: "none",
  ApiKey: "apiKey",
  Basic: "basic",
  Oauth2AuthorizationCode: "oauth2/authorizationCode",
  Oauth2AuthorizationCodePKCE: "oauth2/authorizationCodePKCE",
  Oauth2ClientCredentials: "oauth2/clientCredentials",
  Oauth2Password: "oauth2/password",
} as const;
/**
 * The authentication scheme used for this connection.
 */
export type GenerateConnectionAuthScheme = ClosedEnum<
  typeof GenerateConnectionAuthScheme
>;

/**
 * The status of the connection.
 */
export const GenerateConnectionStatus = {
  Created: "created",
  Working: "working",
  BadCredentials: "bad_credentials",
} as const;
/**
 * The status of the connection.
 */
export type GenerateConnectionStatus = ClosedEnum<
  typeof GenerateConnectionStatus
>;

/**
 * The access token for the connection.
 */
export type GenerateConnectionAccessToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

/**
 * The refresh token to use for the connection.
 */
export type GenerateConnectionRefreshToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

export type GenerateConnectionOAuth2AuthorizationCodeToken = {
  /**
   * The access token for the connection.
   */
  accessToken?: GenerateConnectionAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: GenerateConnectionRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

/**
 * The source of the metadata field
 */
export const GenerateConnectionConnectionsSource = {
  Input: "input",
  Token: "token",
  Provider: "provider",
} as const;
/**
 * The source of the metadata field
 */
export type GenerateConnectionConnectionsSource = ClosedEnum<
  typeof GenerateConnectionConnectionsSource
>;

export type GenerateConnectionConnectionsProviderMetadataInfo = {
  /**
   * The value of the metadata field
   */
  value: string;
  /**
   * The source of the metadata field
   */
  source: GenerateConnectionConnectionsSource;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
};

/**
 * Created
 */
export type GenerateConnectionConnection = {
  /**
   * The connection ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The SaaS provider that this Connection is for.
   */
  provider: string;
  providerApp?: GenerateConnectionProviderApp | undefined;
  group: GenerateConnectionGroup;
  consumer: GenerateConnectionConsumer;
  /**
   * If available, the identifier for the provider workspace (e.g. the Salesforce subdomain)
   */
  providerWorkspaceRef?: string | undefined;
  /**
   * If available, the ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
   */
  providerConsumerRef?: string | undefined;
  /**
   * The time the connection was created.
   */
  createTime: Date;
  /**
   * The time the connection was last updated.
   */
  updateTime?: Date | undefined;
  /**
   * The authentication scheme used for this connection.
   */
  authScheme: GenerateConnectionAuthScheme;
  /**
   * The status of the connection.
   */
  status: GenerateConnectionStatus;
  oauth2AuthorizationCode?:
    | GenerateConnectionOAuth2AuthorizationCodeToken
    | undefined;
  /**
   * The API key used while making the connection.
   */
  apiKey?: string | undefined;
  providerMetadata?: {
    [k: string]: GenerateConnectionConnectionsProviderMetadataInfo;
  } | undefined;
};

export type GenerateConnectionResponse =
  | GenerateConnectionConnection
  | GenerateConnectionAPIProblem;

/** @internal */
export const GenerateConnectionSource$inboundSchema: z.ZodNativeEnum<
  typeof GenerateConnectionSource
> = z.nativeEnum(GenerateConnectionSource);

/** @internal */
export const GenerateConnectionSource$outboundSchema: z.ZodNativeEnum<
  typeof GenerateConnectionSource
> = GenerateConnectionSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionSource$ {
  /** @deprecated use `GenerateConnectionSource$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionSource$inboundSchema;
  /** @deprecated use `GenerateConnectionSource$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionSource$outboundSchema;
}

/** @internal */
export const GenerateConnectionProviderMetadataInfo$inboundSchema: z.ZodType<
  GenerateConnectionProviderMetadataInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  source: GenerateConnectionSource$inboundSchema,
  displayName: z.string().optional(),
});

/** @internal */
export type GenerateConnectionProviderMetadataInfo$Outbound = {
  value: string;
  source: string;
  displayName?: string | undefined;
};

/** @internal */
export const GenerateConnectionProviderMetadataInfo$outboundSchema: z.ZodType<
  GenerateConnectionProviderMetadataInfo$Outbound,
  z.ZodTypeDef,
  GenerateConnectionProviderMetadataInfo
> = z.object({
  value: z.string(),
  source: GenerateConnectionSource$outboundSchema,
  displayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionProviderMetadataInfo$ {
  /** @deprecated use `GenerateConnectionProviderMetadataInfo$inboundSchema` instead. */
  export const inboundSchema =
    GenerateConnectionProviderMetadataInfo$inboundSchema;
  /** @deprecated use `GenerateConnectionProviderMetadataInfo$outboundSchema` instead. */
  export const outboundSchema =
    GenerateConnectionProviderMetadataInfo$outboundSchema;
  /** @deprecated use `GenerateConnectionProviderMetadataInfo$Outbound` instead. */
  export type Outbound = GenerateConnectionProviderMetadataInfo$Outbound;
}

export function generateConnectionProviderMetadataInfoToJSON(
  generateConnectionProviderMetadataInfo:
    GenerateConnectionProviderMetadataInfo,
): string {
  return JSON.stringify(
    GenerateConnectionProviderMetadataInfo$outboundSchema.parse(
      generateConnectionProviderMetadataInfo,
    ),
  );
}

export function generateConnectionProviderMetadataInfoFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionProviderMetadataInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateConnectionProviderMetadataInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionProviderMetadataInfo' from JSON`,
  );
}

/** @internal */
export const BasicAuth$inboundSchema: z.ZodType<
  BasicAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  password: z.string(),
});

/** @internal */
export type BasicAuth$Outbound = {
  username: string;
  password: string;
};

/** @internal */
export const BasicAuth$outboundSchema: z.ZodType<
  BasicAuth$Outbound,
  z.ZodTypeDef,
  BasicAuth
> = z.object({
  username: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasicAuth$ {
  /** @deprecated use `BasicAuth$inboundSchema` instead. */
  export const inboundSchema = BasicAuth$inboundSchema;
  /** @deprecated use `BasicAuth$outboundSchema` instead. */
  export const outboundSchema = BasicAuth$outboundSchema;
  /** @deprecated use `BasicAuth$Outbound` instead. */
  export type Outbound = BasicAuth$Outbound;
}

export function basicAuthToJSON(basicAuth: BasicAuth): string {
  return JSON.stringify(BasicAuth$outboundSchema.parse(basicAuth));
}

export function basicAuthFromJSON(
  jsonString: string,
): SafeParseResult<BasicAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BasicAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasicAuth' from JSON`,
  );
}

/** @internal */
export const Oauth2ClientCredentials$inboundSchema: z.ZodType<
  Oauth2ClientCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type Oauth2ClientCredentials$Outbound = {
  clientId: string;
  clientSecret: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const Oauth2ClientCredentials$outboundSchema: z.ZodType<
  Oauth2ClientCredentials$Outbound,
  z.ZodTypeDef,
  Oauth2ClientCredentials
> = z.object({
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Oauth2ClientCredentials$ {
  /** @deprecated use `Oauth2ClientCredentials$inboundSchema` instead. */
  export const inboundSchema = Oauth2ClientCredentials$inboundSchema;
  /** @deprecated use `Oauth2ClientCredentials$outboundSchema` instead. */
  export const outboundSchema = Oauth2ClientCredentials$outboundSchema;
  /** @deprecated use `Oauth2ClientCredentials$Outbound` instead. */
  export type Outbound = Oauth2ClientCredentials$Outbound;
}

export function oauth2ClientCredentialsToJSON(
  oauth2ClientCredentials: Oauth2ClientCredentials,
): string {
  return JSON.stringify(
    Oauth2ClientCredentials$outboundSchema.parse(oauth2ClientCredentials),
  );
}

export function oauth2ClientCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<Oauth2ClientCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Oauth2ClientCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Oauth2ClientCredentials' from JSON`,
  );
}

/** @internal */
export const Oauth2PasswordCredentials$inboundSchema: z.ZodType<
  Oauth2PasswordCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  password: z.string(),
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type Oauth2PasswordCredentials$Outbound = {
  username: string;
  password: string;
  clientId: string;
  clientSecret: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const Oauth2PasswordCredentials$outboundSchema: z.ZodType<
  Oauth2PasswordCredentials$Outbound,
  z.ZodTypeDef,
  Oauth2PasswordCredentials
> = z.object({
  username: z.string(),
  password: z.string(),
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Oauth2PasswordCredentials$ {
  /** @deprecated use `Oauth2PasswordCredentials$inboundSchema` instead. */
  export const inboundSchema = Oauth2PasswordCredentials$inboundSchema;
  /** @deprecated use `Oauth2PasswordCredentials$outboundSchema` instead. */
  export const outboundSchema = Oauth2PasswordCredentials$outboundSchema;
  /** @deprecated use `Oauth2PasswordCredentials$Outbound` instead. */
  export type Outbound = Oauth2PasswordCredentials$Outbound;
}

export function oauth2PasswordCredentialsToJSON(
  oauth2PasswordCredentials: Oauth2PasswordCredentials,
): string {
  return JSON.stringify(
    Oauth2PasswordCredentials$outboundSchema.parse(oauth2PasswordCredentials),
  );
}

export function oauth2PasswordCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<Oauth2PasswordCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Oauth2PasswordCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Oauth2PasswordCredentials' from JSON`,
  );
}

/** @internal */
export const AccessToken$inboundSchema: z.ZodType<
  AccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type AccessToken$Outbound = {
  token: string;
  expiresAt?: string | undefined;
  issuedAt?: string | undefined;
};

/** @internal */
export const AccessToken$outboundSchema: z.ZodType<
  AccessToken$Outbound,
  z.ZodTypeDef,
  AccessToken
> = z.object({
  token: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessToken$ {
  /** @deprecated use `AccessToken$inboundSchema` instead. */
  export const inboundSchema = AccessToken$inboundSchema;
  /** @deprecated use `AccessToken$outboundSchema` instead. */
  export const outboundSchema = AccessToken$outboundSchema;
  /** @deprecated use `AccessToken$Outbound` instead. */
  export type Outbound = AccessToken$Outbound;
}

export function accessTokenToJSON(accessToken: AccessToken): string {
  return JSON.stringify(AccessToken$outboundSchema.parse(accessToken));
}

export function accessTokenFromJSON(
  jsonString: string,
): SafeParseResult<AccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessToken' from JSON`,
  );
}

/** @internal */
export const RefreshToken$inboundSchema: z.ZodType<
  RefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type RefreshToken$Outbound = {
  token: string;
  expiresAt?: string | undefined;
  issuedAt?: string | undefined;
};

/** @internal */
export const RefreshToken$outboundSchema: z.ZodType<
  RefreshToken$Outbound,
  z.ZodTypeDef,
  RefreshToken
> = z.object({
  token: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefreshToken$ {
  /** @deprecated use `RefreshToken$inboundSchema` instead. */
  export const inboundSchema = RefreshToken$inboundSchema;
  /** @deprecated use `RefreshToken$outboundSchema` instead. */
  export const outboundSchema = RefreshToken$outboundSchema;
  /** @deprecated use `RefreshToken$Outbound` instead. */
  export type Outbound = RefreshToken$Outbound;
}

export function refreshTokenToJSON(refreshToken: RefreshToken): string {
  return JSON.stringify(RefreshToken$outboundSchema.parse(refreshToken));
}

export function refreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<RefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefreshToken' from JSON`,
  );
}

/** @internal */
export const OAuth2AuthorizationCode$inboundSchema: z.ZodType<
  OAuth2AuthorizationCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.lazy(() => AccessToken$inboundSchema).optional(),
  refreshToken: z.lazy(() => RefreshToken$inboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type OAuth2AuthorizationCode$Outbound = {
  accessToken?: AccessToken$Outbound | undefined;
  refreshToken?: RefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const OAuth2AuthorizationCode$outboundSchema: z.ZodType<
  OAuth2AuthorizationCode$Outbound,
  z.ZodTypeDef,
  OAuth2AuthorizationCode
> = z.object({
  accessToken: z.lazy(() => AccessToken$outboundSchema).optional(),
  refreshToken: z.lazy(() => RefreshToken$outboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuth2AuthorizationCode$ {
  /** @deprecated use `OAuth2AuthorizationCode$inboundSchema` instead. */
  export const inboundSchema = OAuth2AuthorizationCode$inboundSchema;
  /** @deprecated use `OAuth2AuthorizationCode$outboundSchema` instead. */
  export const outboundSchema = OAuth2AuthorizationCode$outboundSchema;
  /** @deprecated use `OAuth2AuthorizationCode$Outbound` instead. */
  export type Outbound = OAuth2AuthorizationCode$Outbound;
}

export function oAuth2AuthorizationCodeToJSON(
  oAuth2AuthorizationCode: OAuth2AuthorizationCode,
): string {
  return JSON.stringify(
    OAuth2AuthorizationCode$outboundSchema.parse(oAuth2AuthorizationCode),
  );
}

export function oAuth2AuthorizationCodeFromJSON(
  jsonString: string,
): SafeParseResult<OAuth2AuthorizationCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuth2AuthorizationCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuth2AuthorizationCode' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionGenerateConnectionRequest$inboundSchema:
  z.ZodType<
    GenerateConnectionGenerateConnectionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    providerWorkspaceRef: z.string().optional(),
    providerMetadata: z.record(
      z.lazy(() => GenerateConnectionProviderMetadataInfo$inboundSchema),
    ).optional(),
    groupName: z.string().optional(),
    groupRef: z.string(),
    consumerName: z.string().optional(),
    consumerRef: z.string(),
    provider: z.string(),
    apiKey: z.string().optional(),
    basicAuth: z.lazy(() => BasicAuth$inboundSchema).optional(),
    oauth2ClientCredentials: z.lazy(() => Oauth2ClientCredentials$inboundSchema)
      .optional(),
    oauth2PasswordCredentials: z.lazy(() =>
      Oauth2PasswordCredentials$inboundSchema
    ).optional(),
    oauth2AuthorizationCode: z.lazy(() => OAuth2AuthorizationCode$inboundSchema)
      .optional(),
  });

/** @internal */
export type GenerateConnectionGenerateConnectionRequest$Outbound = {
  providerWorkspaceRef?: string | undefined;
  providerMetadata?: {
    [k: string]: GenerateConnectionProviderMetadataInfo$Outbound;
  } | undefined;
  groupName?: string | undefined;
  groupRef: string;
  consumerName?: string | undefined;
  consumerRef: string;
  provider: string;
  apiKey?: string | undefined;
  basicAuth?: BasicAuth$Outbound | undefined;
  oauth2ClientCredentials?: Oauth2ClientCredentials$Outbound | undefined;
  oauth2PasswordCredentials?: Oauth2PasswordCredentials$Outbound | undefined;
  oauth2AuthorizationCode?: OAuth2AuthorizationCode$Outbound | undefined;
};

/** @internal */
export const GenerateConnectionGenerateConnectionRequest$outboundSchema:
  z.ZodType<
    GenerateConnectionGenerateConnectionRequest$Outbound,
    z.ZodTypeDef,
    GenerateConnectionGenerateConnectionRequest
  > = z.object({
    providerWorkspaceRef: z.string().optional(),
    providerMetadata: z.record(
      z.lazy(() => GenerateConnectionProviderMetadataInfo$outboundSchema),
    ).optional(),
    groupName: z.string().optional(),
    groupRef: z.string(),
    consumerName: z.string().optional(),
    consumerRef: z.string(),
    provider: z.string(),
    apiKey: z.string().optional(),
    basicAuth: z.lazy(() => BasicAuth$outboundSchema).optional(),
    oauth2ClientCredentials: z.lazy(() =>
      Oauth2ClientCredentials$outboundSchema
    ).optional(),
    oauth2PasswordCredentials: z.lazy(() =>
      Oauth2PasswordCredentials$outboundSchema
    ).optional(),
    oauth2AuthorizationCode: z.lazy(() =>
      OAuth2AuthorizationCode$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionGenerateConnectionRequest$ {
  /** @deprecated use `GenerateConnectionGenerateConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    GenerateConnectionGenerateConnectionRequest$inboundSchema;
  /** @deprecated use `GenerateConnectionGenerateConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    GenerateConnectionGenerateConnectionRequest$outboundSchema;
  /** @deprecated use `GenerateConnectionGenerateConnectionRequest$Outbound` instead. */
  export type Outbound = GenerateConnectionGenerateConnectionRequest$Outbound;
}

export function generateConnectionGenerateConnectionRequestToJSON(
  generateConnectionGenerateConnectionRequest:
    GenerateConnectionGenerateConnectionRequest,
): string {
  return JSON.stringify(
    GenerateConnectionGenerateConnectionRequest$outboundSchema.parse(
      generateConnectionGenerateConnectionRequest,
    ),
  );
}

export function generateConnectionGenerateConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateConnectionGenerateConnectionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateConnectionGenerateConnectionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateConnectionGenerateConnectionRequest' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionRequest$inboundSchema: z.ZodType<
  GenerateConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  RequestBody: z.lazy(() =>
    GenerateConnectionGenerateConnectionRequest$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type GenerateConnectionRequest$Outbound = {
  projectIdOrName: string;
  RequestBody?:
    | GenerateConnectionGenerateConnectionRequest$Outbound
    | undefined;
};

/** @internal */
export const GenerateConnectionRequest$outboundSchema: z.ZodType<
  GenerateConnectionRequest$Outbound,
  z.ZodTypeDef,
  GenerateConnectionRequest
> = z.object({
  projectIdOrName: z.string(),
  requestBody: z.lazy(() =>
    GenerateConnectionGenerateConnectionRequest$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionRequest$ {
  /** @deprecated use `GenerateConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionRequest$inboundSchema;
  /** @deprecated use `GenerateConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionRequest$outboundSchema;
  /** @deprecated use `GenerateConnectionRequest$Outbound` instead. */
  export type Outbound = GenerateConnectionRequest$Outbound;
}

export function generateConnectionRequestToJSON(
  generateConnectionRequest: GenerateConnectionRequest,
): string {
  return JSON.stringify(
    GenerateConnectionRequest$outboundSchema.parse(generateConnectionRequest),
  );
}

export function generateConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionRequest' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionAPIProblem$inboundSchema: z.ZodType<
  GenerateConnectionAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GenerateConnectionAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GenerateConnectionAPIProblem$outboundSchema: z.ZodType<
  GenerateConnectionAPIProblem$Outbound,
  z.ZodTypeDef,
  GenerateConnectionAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionAPIProblem$ {
  /** @deprecated use `GenerateConnectionAPIProblem$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionAPIProblem$inboundSchema;
  /** @deprecated use `GenerateConnectionAPIProblem$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionAPIProblem$outboundSchema;
  /** @deprecated use `GenerateConnectionAPIProblem$Outbound` instead. */
  export type Outbound = GenerateConnectionAPIProblem$Outbound;
}

export function generateConnectionAPIProblemToJSON(
  generateConnectionAPIProblem: GenerateConnectionAPIProblem,
): string {
  return JSON.stringify(
    GenerateConnectionAPIProblem$outboundSchema.parse(
      generateConnectionAPIProblem,
    ),
  );
}

export function generateConnectionAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionAPIProblem' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionProviderApp$inboundSchema: z.ZodType<
  GenerateConnectionProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GenerateConnectionProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const GenerateConnectionProviderApp$outboundSchema: z.ZodType<
  GenerateConnectionProviderApp$Outbound,
  z.ZodTypeDef,
  GenerateConnectionProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionProviderApp$ {
  /** @deprecated use `GenerateConnectionProviderApp$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionProviderApp$inboundSchema;
  /** @deprecated use `GenerateConnectionProviderApp$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionProviderApp$outboundSchema;
  /** @deprecated use `GenerateConnectionProviderApp$Outbound` instead. */
  export type Outbound = GenerateConnectionProviderApp$Outbound;
}

export function generateConnectionProviderAppToJSON(
  generateConnectionProviderApp: GenerateConnectionProviderApp,
): string {
  return JSON.stringify(
    GenerateConnectionProviderApp$outboundSchema.parse(
      generateConnectionProviderApp,
    ),
  );
}

export function generateConnectionProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionProviderApp' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionGroup$inboundSchema: z.ZodType<
  GenerateConnectionGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GenerateConnectionGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const GenerateConnectionGroup$outboundSchema: z.ZodType<
  GenerateConnectionGroup$Outbound,
  z.ZodTypeDef,
  GenerateConnectionGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionGroup$ {
  /** @deprecated use `GenerateConnectionGroup$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionGroup$inboundSchema;
  /** @deprecated use `GenerateConnectionGroup$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionGroup$outboundSchema;
  /** @deprecated use `GenerateConnectionGroup$Outbound` instead. */
  export type Outbound = GenerateConnectionGroup$Outbound;
}

export function generateConnectionGroupToJSON(
  generateConnectionGroup: GenerateConnectionGroup,
): string {
  return JSON.stringify(
    GenerateConnectionGroup$outboundSchema.parse(generateConnectionGroup),
  );
}

export function generateConnectionGroupFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionGroup' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionConsumer$inboundSchema: z.ZodType<
  GenerateConnectionConsumer,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GenerateConnectionConsumer$Outbound = {
  consumerRef: string;
  consumerName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const GenerateConnectionConsumer$outboundSchema: z.ZodType<
  GenerateConnectionConsumer$Outbound,
  z.ZodTypeDef,
  GenerateConnectionConsumer
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionConsumer$ {
  /** @deprecated use `GenerateConnectionConsumer$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionConsumer$inboundSchema;
  /** @deprecated use `GenerateConnectionConsumer$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionConsumer$outboundSchema;
  /** @deprecated use `GenerateConnectionConsumer$Outbound` instead. */
  export type Outbound = GenerateConnectionConsumer$Outbound;
}

export function generateConnectionConsumerToJSON(
  generateConnectionConsumer: GenerateConnectionConsumer,
): string {
  return JSON.stringify(
    GenerateConnectionConsumer$outboundSchema.parse(generateConnectionConsumer),
  );
}

export function generateConnectionConsumerFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionConsumer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionConsumer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionConsumer' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionAuthScheme$inboundSchema: z.ZodNativeEnum<
  typeof GenerateConnectionAuthScheme
> = z.nativeEnum(GenerateConnectionAuthScheme);

/** @internal */
export const GenerateConnectionAuthScheme$outboundSchema: z.ZodNativeEnum<
  typeof GenerateConnectionAuthScheme
> = GenerateConnectionAuthScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionAuthScheme$ {
  /** @deprecated use `GenerateConnectionAuthScheme$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionAuthScheme$inboundSchema;
  /** @deprecated use `GenerateConnectionAuthScheme$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionAuthScheme$outboundSchema;
}

/** @internal */
export const GenerateConnectionStatus$inboundSchema: z.ZodNativeEnum<
  typeof GenerateConnectionStatus
> = z.nativeEnum(GenerateConnectionStatus);

/** @internal */
export const GenerateConnectionStatus$outboundSchema: z.ZodNativeEnum<
  typeof GenerateConnectionStatus
> = GenerateConnectionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionStatus$ {
  /** @deprecated use `GenerateConnectionStatus$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionStatus$inboundSchema;
  /** @deprecated use `GenerateConnectionStatus$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionStatus$outboundSchema;
}

/** @internal */
export const GenerateConnectionAccessToken$inboundSchema: z.ZodType<
  GenerateConnectionAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GenerateConnectionAccessToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const GenerateConnectionAccessToken$outboundSchema: z.ZodType<
  GenerateConnectionAccessToken$Outbound,
  z.ZodTypeDef,
  GenerateConnectionAccessToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionAccessToken$ {
  /** @deprecated use `GenerateConnectionAccessToken$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionAccessToken$inboundSchema;
  /** @deprecated use `GenerateConnectionAccessToken$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionAccessToken$outboundSchema;
  /** @deprecated use `GenerateConnectionAccessToken$Outbound` instead. */
  export type Outbound = GenerateConnectionAccessToken$Outbound;
}

export function generateConnectionAccessTokenToJSON(
  generateConnectionAccessToken: GenerateConnectionAccessToken,
): string {
  return JSON.stringify(
    GenerateConnectionAccessToken$outboundSchema.parse(
      generateConnectionAccessToken,
    ),
  );
}

export function generateConnectionAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionAccessToken' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionRefreshToken$inboundSchema: z.ZodType<
  GenerateConnectionRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GenerateConnectionRefreshToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const GenerateConnectionRefreshToken$outboundSchema: z.ZodType<
  GenerateConnectionRefreshToken$Outbound,
  z.ZodTypeDef,
  GenerateConnectionRefreshToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionRefreshToken$ {
  /** @deprecated use `GenerateConnectionRefreshToken$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionRefreshToken$inboundSchema;
  /** @deprecated use `GenerateConnectionRefreshToken$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionRefreshToken$outboundSchema;
  /** @deprecated use `GenerateConnectionRefreshToken$Outbound` instead. */
  export type Outbound = GenerateConnectionRefreshToken$Outbound;
}

export function generateConnectionRefreshTokenToJSON(
  generateConnectionRefreshToken: GenerateConnectionRefreshToken,
): string {
  return JSON.stringify(
    GenerateConnectionRefreshToken$outboundSchema.parse(
      generateConnectionRefreshToken,
    ),
  );
}

export function generateConnectionRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionRefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionRefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionRefreshToken' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionOAuth2AuthorizationCodeToken$inboundSchema:
  z.ZodType<
    GenerateConnectionOAuth2AuthorizationCodeToken,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessToken: z.lazy(() => GenerateConnectionAccessToken$inboundSchema)
      .optional(),
    refreshToken: z.lazy(() => GenerateConnectionRefreshToken$inboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/** @internal */
export type GenerateConnectionOAuth2AuthorizationCodeToken$Outbound = {
  accessToken?: GenerateConnectionAccessToken$Outbound | undefined;
  refreshToken?: GenerateConnectionRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const GenerateConnectionOAuth2AuthorizationCodeToken$outboundSchema:
  z.ZodType<
    GenerateConnectionOAuth2AuthorizationCodeToken$Outbound,
    z.ZodTypeDef,
    GenerateConnectionOAuth2AuthorizationCodeToken
  > = z.object({
    accessToken: z.lazy(() => GenerateConnectionAccessToken$outboundSchema)
      .optional(),
    refreshToken: z.lazy(() => GenerateConnectionRefreshToken$outboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionOAuth2AuthorizationCodeToken$ {
  /** @deprecated use `GenerateConnectionOAuth2AuthorizationCodeToken$inboundSchema` instead. */
  export const inboundSchema =
    GenerateConnectionOAuth2AuthorizationCodeToken$inboundSchema;
  /** @deprecated use `GenerateConnectionOAuth2AuthorizationCodeToken$outboundSchema` instead. */
  export const outboundSchema =
    GenerateConnectionOAuth2AuthorizationCodeToken$outboundSchema;
  /** @deprecated use `GenerateConnectionOAuth2AuthorizationCodeToken$Outbound` instead. */
  export type Outbound =
    GenerateConnectionOAuth2AuthorizationCodeToken$Outbound;
}

export function generateConnectionOAuth2AuthorizationCodeTokenToJSON(
  generateConnectionOAuth2AuthorizationCodeToken:
    GenerateConnectionOAuth2AuthorizationCodeToken,
): string {
  return JSON.stringify(
    GenerateConnectionOAuth2AuthorizationCodeToken$outboundSchema.parse(
      generateConnectionOAuth2AuthorizationCodeToken,
    ),
  );
}

export function generateConnectionOAuth2AuthorizationCodeTokenFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateConnectionOAuth2AuthorizationCodeToken,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateConnectionOAuth2AuthorizationCodeToken$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateConnectionOAuth2AuthorizationCodeToken' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionConnectionsSource$inboundSchema: z.ZodNativeEnum<
  typeof GenerateConnectionConnectionsSource
> = z.nativeEnum(GenerateConnectionConnectionsSource);

/** @internal */
export const GenerateConnectionConnectionsSource$outboundSchema:
  z.ZodNativeEnum<typeof GenerateConnectionConnectionsSource> =
    GenerateConnectionConnectionsSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionConnectionsSource$ {
  /** @deprecated use `GenerateConnectionConnectionsSource$inboundSchema` instead. */
  export const inboundSchema =
    GenerateConnectionConnectionsSource$inboundSchema;
  /** @deprecated use `GenerateConnectionConnectionsSource$outboundSchema` instead. */
  export const outboundSchema =
    GenerateConnectionConnectionsSource$outboundSchema;
}

/** @internal */
export const GenerateConnectionConnectionsProviderMetadataInfo$inboundSchema:
  z.ZodType<
    GenerateConnectionConnectionsProviderMetadataInfo,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
    source: GenerateConnectionConnectionsSource$inboundSchema,
    displayName: z.string().optional(),
  });

/** @internal */
export type GenerateConnectionConnectionsProviderMetadataInfo$Outbound = {
  value: string;
  source: string;
  displayName?: string | undefined;
};

/** @internal */
export const GenerateConnectionConnectionsProviderMetadataInfo$outboundSchema:
  z.ZodType<
    GenerateConnectionConnectionsProviderMetadataInfo$Outbound,
    z.ZodTypeDef,
    GenerateConnectionConnectionsProviderMetadataInfo
  > = z.object({
    value: z.string(),
    source: GenerateConnectionConnectionsSource$outboundSchema,
    displayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionConnectionsProviderMetadataInfo$ {
  /** @deprecated use `GenerateConnectionConnectionsProviderMetadataInfo$inboundSchema` instead. */
  export const inboundSchema =
    GenerateConnectionConnectionsProviderMetadataInfo$inboundSchema;
  /** @deprecated use `GenerateConnectionConnectionsProviderMetadataInfo$outboundSchema` instead. */
  export const outboundSchema =
    GenerateConnectionConnectionsProviderMetadataInfo$outboundSchema;
  /** @deprecated use `GenerateConnectionConnectionsProviderMetadataInfo$Outbound` instead. */
  export type Outbound =
    GenerateConnectionConnectionsProviderMetadataInfo$Outbound;
}

export function generateConnectionConnectionsProviderMetadataInfoToJSON(
  generateConnectionConnectionsProviderMetadataInfo:
    GenerateConnectionConnectionsProviderMetadataInfo,
): string {
  return JSON.stringify(
    GenerateConnectionConnectionsProviderMetadataInfo$outboundSchema.parse(
      generateConnectionConnectionsProviderMetadataInfo,
    ),
  );
}

export function generateConnectionConnectionsProviderMetadataInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateConnectionConnectionsProviderMetadataInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateConnectionConnectionsProviderMetadataInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateConnectionConnectionsProviderMetadataInfo' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionConnection$inboundSchema: z.ZodType<
  GenerateConnectionConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => GenerateConnectionProviderApp$inboundSchema)
    .optional(),
  group: z.lazy(() => GenerateConnectionGroup$inboundSchema),
  consumer: z.lazy(() => GenerateConnectionConsumer$inboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  authScheme: GenerateConnectionAuthScheme$inboundSchema,
  status: GenerateConnectionStatus$inboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    GenerateConnectionOAuth2AuthorizationCodeToken$inboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() =>
      GenerateConnectionConnectionsProviderMetadataInfo$inboundSchema
    ),
  ).optional(),
});

/** @internal */
export type GenerateConnectionConnection$Outbound = {
  id: string;
  projectId: string;
  provider: string;
  providerApp?: GenerateConnectionProviderApp$Outbound | undefined;
  group: GenerateConnectionGroup$Outbound;
  consumer: GenerateConnectionConsumer$Outbound;
  providerWorkspaceRef?: string | undefined;
  providerConsumerRef?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  authScheme: string;
  status: string;
  oauth2AuthorizationCode?:
    | GenerateConnectionOAuth2AuthorizationCodeToken$Outbound
    | undefined;
  apiKey?: string | undefined;
  providerMetadata?: {
    [k: string]: GenerateConnectionConnectionsProviderMetadataInfo$Outbound;
  } | undefined;
};

/** @internal */
export const GenerateConnectionConnection$outboundSchema: z.ZodType<
  GenerateConnectionConnection$Outbound,
  z.ZodTypeDef,
  GenerateConnectionConnection
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => GenerateConnectionProviderApp$outboundSchema)
    .optional(),
  group: z.lazy(() => GenerateConnectionGroup$outboundSchema),
  consumer: z.lazy(() => GenerateConnectionConsumer$outboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  authScheme: GenerateConnectionAuthScheme$outboundSchema,
  status: GenerateConnectionStatus$outboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    GenerateConnectionOAuth2AuthorizationCodeToken$outboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() =>
      GenerateConnectionConnectionsProviderMetadataInfo$outboundSchema
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionConnection$ {
  /** @deprecated use `GenerateConnectionConnection$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionConnection$inboundSchema;
  /** @deprecated use `GenerateConnectionConnection$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionConnection$outboundSchema;
  /** @deprecated use `GenerateConnectionConnection$Outbound` instead. */
  export type Outbound = GenerateConnectionConnection$Outbound;
}

export function generateConnectionConnectionToJSON(
  generateConnectionConnection: GenerateConnectionConnection,
): string {
  return JSON.stringify(
    GenerateConnectionConnection$outboundSchema.parse(
      generateConnectionConnection,
    ),
  );
}

export function generateConnectionConnectionFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionConnection' from JSON`,
  );
}

/** @internal */
export const GenerateConnectionResponse$inboundSchema: z.ZodType<
  GenerateConnectionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GenerateConnectionConnection$inboundSchema),
  z.lazy(() => GenerateConnectionAPIProblem$inboundSchema),
]);

/** @internal */
export type GenerateConnectionResponse$Outbound =
  | GenerateConnectionConnection$Outbound
  | GenerateConnectionAPIProblem$Outbound;

/** @internal */
export const GenerateConnectionResponse$outboundSchema: z.ZodType<
  GenerateConnectionResponse$Outbound,
  z.ZodTypeDef,
  GenerateConnectionResponse
> = z.union([
  z.lazy(() => GenerateConnectionConnection$outboundSchema),
  z.lazy(() => GenerateConnectionAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateConnectionResponse$ {
  /** @deprecated use `GenerateConnectionResponse$inboundSchema` instead. */
  export const inboundSchema = GenerateConnectionResponse$inboundSchema;
  /** @deprecated use `GenerateConnectionResponse$outboundSchema` instead. */
  export const outboundSchema = GenerateConnectionResponse$outboundSchema;
  /** @deprecated use `GenerateConnectionResponse$Outbound` instead. */
  export type Outbound = GenerateConnectionResponse$Outbound;
}

export function generateConnectionResponseToJSON(
  generateConnectionResponse: GenerateConnectionResponse,
): string {
  return JSON.stringify(
    GenerateConnectionResponse$outboundSchema.parse(generateConnectionResponse),
  );
}

export function generateConnectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GenerateConnectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateConnectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateConnectionResponse' from JSON`,
  );
}
