/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListInstallationsRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  integrationId: string;
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef?: string | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListInstallationsAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type Group = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type ListInstallationsProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type ListInstallationsGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type ListInstallationsConsumer = {
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The name of the consumer.
   */
  consumerName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the consumer was created.
   */
  createTime: Date;
  /**
   * The time the consumer was last updated.
   */
  updateTime?: Date | undefined;
};

/**
 * The authentication scheme used for this connection.
 */
export const ListInstallationsAuthScheme = {
  None: "none",
  ApiKey: "apiKey",
  Basic: "basic",
  Oauth2AuthorizationCode: "oauth2/authorizationCode",
  Oauth2AuthorizationCodePKCE: "oauth2/authorizationCodePKCE",
  Oauth2ClientCredentials: "oauth2/clientCredentials",
  Oauth2Password: "oauth2/password",
} as const;
/**
 * The authentication scheme used for this connection.
 */
export type ListInstallationsAuthScheme = ClosedEnum<
  typeof ListInstallationsAuthScheme
>;

/**
 * The status of the connection.
 */
export const ListInstallationsStatus = {
  Created: "created",
  Working: "working",
  BadCredentials: "bad_credentials",
} as const;
/**
 * The status of the connection.
 */
export type ListInstallationsStatus = ClosedEnum<
  typeof ListInstallationsStatus
>;

/**
 * The access token for the connection.
 */
export type ListInstallationsAccessToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

/**
 * The refresh token to use for the connection.
 */
export type ListInstallationsRefreshToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

export type ListInstallationsOAuth2AuthorizationCodeToken = {
  /**
   * The access token for the connection.
   */
  accessToken?: ListInstallationsAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: ListInstallationsRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

/**
 * The source of the metadata field
 */
export const ListInstallationsSource = {
  Input: "input",
  Token: "token",
  Provider: "provider",
} as const;
/**
 * The source of the metadata field
 */
export type ListInstallationsSource = ClosedEnum<
  typeof ListInstallationsSource
>;

export type ListInstallationsProviderMetadataInfo = {
  /**
   * The value of the metadata field
   */
  value: string;
  /**
   * The source of the metadata field
   */
  source: ListInstallationsSource;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
};

export type ListInstallationsConnection = {
  /**
   * The connection ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The SaaS provider that this Connection is for.
   */
  provider: string;
  providerApp?: ListInstallationsProviderApp | undefined;
  group: ListInstallationsGroup;
  consumer: ListInstallationsConsumer;
  /**
   * If available, the identifier for the provider workspace (e.g. the Salesforce subdomain)
   */
  providerWorkspaceRef?: string | undefined;
  /**
   * If available, the ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
   */
  providerConsumerRef?: string | undefined;
  /**
   * The time the connection was created.
   */
  createTime: Date;
  /**
   * The time the connection was last updated.
   */
  updateTime?: Date | undefined;
  /**
   * The authentication scheme used for this connection.
   */
  authScheme: ListInstallationsAuthScheme;
  /**
   * The status of the connection.
   */
  status: ListInstallationsStatus;
  oauth2AuthorizationCode?:
    | ListInstallationsOAuth2AuthorizationCodeToken
    | undefined;
  /**
   * The API key used while making the connection.
   */
  apiKey?: string | undefined;
  providerMetadata?:
    | { [k: string]: ListInstallationsProviderMetadataInfo }
    | undefined;
};

/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export const ListInstallationsSelectedFieldsAutoConfig = {
  All: "all",
} as const;
/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export type ListInstallationsSelectedFieldsAutoConfig = ClosedEnum<
  typeof ListInstallationsSelectedFieldsAutoConfig
>;

export type ListInstallationsDefaultPeriodConfig = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type ListInstallationsBackfillConfig = {
  defaultPeriod: ListInstallationsDefaultPeriodConfig;
};

export type ListInstallationsReadConfigObject = {
  /**
   * The name of the object to read from.
   */
  objectName: string;
  /**
   * The schedule for reading the object, in cron syntax.
   */
  schedule: string;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination: string;
  /**
   * This is a map of field names to booleans indicating whether they should be read. If a field is already included in `selectedFieldMappings`, it does not need to be included here.
   */
  selectedFields: { [k: string]: boolean };
  /**
   * This is a map of field names to their value mappings.
   */
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  /**
   * This is a map of mapToNames to field names. (A mapTo name is the name the builder wants to map a field to when it lands in their destination.)
   */
  selectedFieldMappings: { [k: string]: string };
  /**
   * If selectedFieldsAuto is set to all, all fields will be read.
   */
  selectedFieldsAuto?: ListInstallationsSelectedFieldsAutoConfig | undefined;
  backfill?: ListInstallationsBackfillConfig | undefined;
};

export type ListInstallationsReadConfig = {
  objects: { [k: string]: ListInstallationsReadConfigObject };
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const ListInstallationsValueDefaultLegacyApplyOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type ListInstallationsValueDefaultLegacyApplyOnUpdate = ClosedEnum<
  typeof ListInstallationsValueDefaultLegacyApplyOnUpdate
>;

export type ListInstallationsValueDefaultLegacyValueDefaultBoolean = {
  /**
   * The value to be used as a default.
   */
  value: boolean;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?: ListInstallationsValueDefaultLegacyApplyOnUpdate | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate =
  {
    Always: "always",
    Never: "never",
  } as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate =
  ClosedEnum<
    typeof ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate
  >;

export type ListInstallationsValueDefaultLegacyValueDefaultInteger = {
  /**
   * The value to be used as a default.
   */
  value: number;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate
    | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate =
  ClosedEnum<
    typeof ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate
  >;

export type ListInstallationsValueDefaultLegacyValueDefaultString = {
  /**
   * The value to be used as a default.
   */
  value: string;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate
    | undefined;
};

/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type ListInstallationsValueDefaultLegacy =
  | ListInstallationsValueDefaultLegacyValueDefaultString
  | ListInstallationsValueDefaultLegacyValueDefaultInteger
  | ListInstallationsValueDefaultLegacyValueDefaultBoolean;

/**
 * Only use one of stringValue, integerValue, booleanValue.
 */
export type ListInstallationsDefaultValueForAField = {
  /**
   * The default string value to apply to a field
   */
  stringValue?: string | undefined;
  /**
   * The default integer value to apply to a field
   */
  integerValue?: number | undefined;
  /**
   * The default boolean value to apply to a field
   */
  booleanValue?: boolean | undefined;
};

/**
 * Whether the default value should be applied when creating a record.
 */
export const ListInstallationsWriteOnCreate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when creating a record.
 */
export type ListInstallationsWriteOnCreate = ClosedEnum<
  typeof ListInstallationsWriteOnCreate
>;

/**
 * Whether the default value should be applied when updating a record.
 */
export const ListInstallationsWriteOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 */
export type ListInstallationsWriteOnUpdate = ClosedEnum<
  typeof ListInstallationsWriteOnUpdate
>;

export type ListInstallationsFieldSetting = {
  /**
   * Only use one of stringValue, integerValue, booleanValue.
   */
  default?: ListInstallationsDefaultValueForAField | undefined;
  /**
   * Whether the default value should be applied when creating a record.
   */
  writeOnCreate?: ListInstallationsWriteOnCreate | undefined;
  /**
   * Whether the default value should be applied when updating a record.
   */
  writeOnUpdate?: ListInstallationsWriteOnUpdate | undefined;
};

export type ListInstallationsWriteConfigObject = {
  /**
   * The name of the object to write to.
   */
  objectName: string;
  /**
   * This is a map of field names to default values. These values will be used when writing to the object.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  selectedValueDefaults?: {
    [k: string]:
      | ListInstallationsValueDefaultLegacyValueDefaultString
      | ListInstallationsValueDefaultLegacyValueDefaultInteger
      | ListInstallationsValueDefaultLegacyValueDefaultBoolean;
  } | undefined;
  /**
   * This is a map of field names to their settings.
   */
  selectedFieldSettings?:
    | { [k: string]: ListInstallationsFieldSetting }
    | undefined;
};

export type ListInstallationsWriteConfig = {
  objects?: { [k: string]: ListInstallationsWriteConfigObject } | undefined;
};

export type ListInstallationsBaseProxyConfig = {
  enabled?: boolean | undefined;
};

/**
 * Conditions to enable create events.
 */
export const ListInstallationsEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable create events.
 */
export type ListInstallationsEnabled = ClosedEnum<
  typeof ListInstallationsEnabled
>;

export type ListInstallationsCreateEvent = {
  /**
   * Conditions to enable create events.
   */
  enabled: ListInstallationsEnabled;
};

/**
 * Conditions to enable update events.
 */
export const ListInstallationsInstallationsEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable update events.
 */
export type ListInstallationsInstallationsEnabled = ClosedEnum<
  typeof ListInstallationsInstallationsEnabled
>;

/**
 * Whether to watch fields all fields automatically.
 */
export const ListInstallationsWatchFieldsAuto = {
  All: "all",
} as const;
/**
 * Whether to watch fields all fields automatically.
 */
export type ListInstallationsWatchFieldsAuto = ClosedEnum<
  typeof ListInstallationsWatchFieldsAuto
>;

export type ListInstallationsUpdateEvent = {
  /**
   * Conditions to enable update events.
   */
  enabled: ListInstallationsInstallationsEnabled;
  /**
   * Whether to watch fields all fields automatically.
   */
  watchFieldsAuto?: ListInstallationsWatchFieldsAuto | undefined;
  /**
   * The fields that should be watched.
   */
  requiredWatchFields?: Array<string> | undefined;
};

/**
 * Conditions to enable delete events.
 */
export const ListInstallationsInstallationsResponseEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable delete events.
 */
export type ListInstallationsInstallationsResponseEnabled = ClosedEnum<
  typeof ListInstallationsInstallationsResponseEnabled
>;

export type ListInstallationsDeleteEvent = {
  /**
   * Conditions to enable delete events.
   */
  enabled: ListInstallationsInstallationsResponseEnabled;
};

export type ListInstallationsSubscribeConfigObject = {
  /**
   * Whether to inherit fields and mappings from the read config.
   */
  inheritFieldsAndMappings: boolean;
  /**
   * The name of the object to subscribe to.
   */
  objectName: string;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination: string;
  createEvent?: ListInstallationsCreateEvent | undefined;
  updateEvent?: ListInstallationsUpdateEvent | undefined;
  deleteEvent?: ListInstallationsDeleteEvent | undefined;
};

export type ListInstallationsSubscribeConfig = {
  objects: { [k: string]: ListInstallationsSubscribeConfigObject };
};

export type ListInstallationsConfigContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider: string;
  read?: ListInstallationsReadConfig | undefined;
  write?: ListInstallationsWriteConfig | undefined;
  proxy?: ListInstallationsBaseProxyConfig | undefined;
  subscribe?: ListInstallationsSubscribeConfig | undefined;
};

export type ListInstallationsConfig = {
  /**
   * The config ID.
   */
  id: string;
  /**
   * The ID of the revision that this config is based on.
   */
  revisionId: string;
  /**
   * The time the config was created.
   */
  createTime: Date;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy: string;
  content: ListInstallationsConfigContent;
};

export type ListInstallationsInstallation = {
  /**
   * The installation ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  group?: Group | undefined;
  /**
   * The health status of the installation ("healthy", "unhealthy").
   */
  healthStatus: string;
  connection: ListInstallationsConnection;
  /**
   * The time the integration was first installed.
   */
  createTime: Date;
  /**
   * The person who did the installation, in the format of "consumer:{consumer-id}".
   */
  createdBy: string;
  /**
   * The time the installation was last updated with a new config.
   */
  updateTime?: Date | undefined;
  config: ListInstallationsConfig;
};

export type ListInstallationsResponse =
  | ListInstallationsAPIProblem
  | Array<ListInstallationsInstallation>;

/** @internal */
export const ListInstallationsRequest$inboundSchema: z.ZodType<
  ListInstallationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  groupRef: z.string().optional(),
});

/** @internal */
export type ListInstallationsRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  groupRef?: string | undefined;
};

/** @internal */
export const ListInstallationsRequest$outboundSchema: z.ZodType<
  ListInstallationsRequest$Outbound,
  z.ZodTypeDef,
  ListInstallationsRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  groupRef: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsRequest$ {
  /** @deprecated use `ListInstallationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsRequest$inboundSchema;
  /** @deprecated use `ListInstallationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsRequest$outboundSchema;
  /** @deprecated use `ListInstallationsRequest$Outbound` instead. */
  export type Outbound = ListInstallationsRequest$Outbound;
}

export function listInstallationsRequestToJSON(
  listInstallationsRequest: ListInstallationsRequest,
): string {
  return JSON.stringify(
    ListInstallationsRequest$outboundSchema.parse(listInstallationsRequest),
  );
}

export function listInstallationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsRequest' from JSON`,
  );
}

/** @internal */
export const ListInstallationsAPIProblem$inboundSchema: z.ZodType<
  ListInstallationsAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListInstallationsAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListInstallationsAPIProblem$outboundSchema: z.ZodType<
  ListInstallationsAPIProblem$Outbound,
  z.ZodTypeDef,
  ListInstallationsAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsAPIProblem$ {
  /** @deprecated use `ListInstallationsAPIProblem$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsAPIProblem$inboundSchema;
  /** @deprecated use `ListInstallationsAPIProblem$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsAPIProblem$outboundSchema;
  /** @deprecated use `ListInstallationsAPIProblem$Outbound` instead. */
  export type Outbound = ListInstallationsAPIProblem$Outbound;
}

export function listInstallationsAPIProblemToJSON(
  listInstallationsAPIProblem: ListInstallationsAPIProblem,
): string {
  return JSON.stringify(
    ListInstallationsAPIProblem$outboundSchema.parse(
      listInstallationsAPIProblem,
    ),
  );
}

export function listInstallationsAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsAPIProblem' from JSON`,
  );
}

/** @internal */
export const Group$inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown> = z
  .object({
    groupRef: z.string(),
    groupName: z.string(),
    projectId: z.string(),
    createTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updateTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type Group$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const Group$outboundSchema: z.ZodType<
  Group$Outbound,
  z.ZodTypeDef,
  Group
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Group$ {
  /** @deprecated use `Group$inboundSchema` instead. */
  export const inboundSchema = Group$inboundSchema;
  /** @deprecated use `Group$outboundSchema` instead. */
  export const outboundSchema = Group$outboundSchema;
  /** @deprecated use `Group$Outbound` instead. */
  export type Outbound = Group$Outbound;
}

export function groupToJSON(group: Group): string {
  return JSON.stringify(Group$outboundSchema.parse(group));
}

export function groupFromJSON(
  jsonString: string,
): SafeParseResult<Group, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Group$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Group' from JSON`,
  );
}

/** @internal */
export const ListInstallationsProviderApp$inboundSchema: z.ZodType<
  ListInstallationsProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListInstallationsProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const ListInstallationsProviderApp$outboundSchema: z.ZodType<
  ListInstallationsProviderApp$Outbound,
  z.ZodTypeDef,
  ListInstallationsProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsProviderApp$ {
  /** @deprecated use `ListInstallationsProviderApp$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsProviderApp$inboundSchema;
  /** @deprecated use `ListInstallationsProviderApp$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsProviderApp$outboundSchema;
  /** @deprecated use `ListInstallationsProviderApp$Outbound` instead. */
  export type Outbound = ListInstallationsProviderApp$Outbound;
}

export function listInstallationsProviderAppToJSON(
  listInstallationsProviderApp: ListInstallationsProviderApp,
): string {
  return JSON.stringify(
    ListInstallationsProviderApp$outboundSchema.parse(
      listInstallationsProviderApp,
    ),
  );
}

export function listInstallationsProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsProviderApp' from JSON`,
  );
}

/** @internal */
export const ListInstallationsGroup$inboundSchema: z.ZodType<
  ListInstallationsGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListInstallationsGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const ListInstallationsGroup$outboundSchema: z.ZodType<
  ListInstallationsGroup$Outbound,
  z.ZodTypeDef,
  ListInstallationsGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsGroup$ {
  /** @deprecated use `ListInstallationsGroup$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsGroup$inboundSchema;
  /** @deprecated use `ListInstallationsGroup$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsGroup$outboundSchema;
  /** @deprecated use `ListInstallationsGroup$Outbound` instead. */
  export type Outbound = ListInstallationsGroup$Outbound;
}

export function listInstallationsGroupToJSON(
  listInstallationsGroup: ListInstallationsGroup,
): string {
  return JSON.stringify(
    ListInstallationsGroup$outboundSchema.parse(listInstallationsGroup),
  );
}

export function listInstallationsGroupFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsGroup' from JSON`,
  );
}

/** @internal */
export const ListInstallationsConsumer$inboundSchema: z.ZodType<
  ListInstallationsConsumer,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListInstallationsConsumer$Outbound = {
  consumerRef: string;
  consumerName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const ListInstallationsConsumer$outboundSchema: z.ZodType<
  ListInstallationsConsumer$Outbound,
  z.ZodTypeDef,
  ListInstallationsConsumer
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsConsumer$ {
  /** @deprecated use `ListInstallationsConsumer$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsConsumer$inboundSchema;
  /** @deprecated use `ListInstallationsConsumer$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsConsumer$outboundSchema;
  /** @deprecated use `ListInstallationsConsumer$Outbound` instead. */
  export type Outbound = ListInstallationsConsumer$Outbound;
}

export function listInstallationsConsumerToJSON(
  listInstallationsConsumer: ListInstallationsConsumer,
): string {
  return JSON.stringify(
    ListInstallationsConsumer$outboundSchema.parse(listInstallationsConsumer),
  );
}

export function listInstallationsConsumerFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsConsumer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsConsumer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsConsumer' from JSON`,
  );
}

/** @internal */
export const ListInstallationsAuthScheme$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsAuthScheme
> = z.nativeEnum(ListInstallationsAuthScheme);

/** @internal */
export const ListInstallationsAuthScheme$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsAuthScheme
> = ListInstallationsAuthScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsAuthScheme$ {
  /** @deprecated use `ListInstallationsAuthScheme$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsAuthScheme$inboundSchema;
  /** @deprecated use `ListInstallationsAuthScheme$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsAuthScheme$outboundSchema;
}

/** @internal */
export const ListInstallationsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsStatus
> = z.nativeEnum(ListInstallationsStatus);

/** @internal */
export const ListInstallationsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsStatus
> = ListInstallationsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsStatus$ {
  /** @deprecated use `ListInstallationsStatus$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsStatus$inboundSchema;
  /** @deprecated use `ListInstallationsStatus$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsStatus$outboundSchema;
}

/** @internal */
export const ListInstallationsAccessToken$inboundSchema: z.ZodType<
  ListInstallationsAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListInstallationsAccessToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const ListInstallationsAccessToken$outboundSchema: z.ZodType<
  ListInstallationsAccessToken$Outbound,
  z.ZodTypeDef,
  ListInstallationsAccessToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsAccessToken$ {
  /** @deprecated use `ListInstallationsAccessToken$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsAccessToken$inboundSchema;
  /** @deprecated use `ListInstallationsAccessToken$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsAccessToken$outboundSchema;
  /** @deprecated use `ListInstallationsAccessToken$Outbound` instead. */
  export type Outbound = ListInstallationsAccessToken$Outbound;
}

export function listInstallationsAccessTokenToJSON(
  listInstallationsAccessToken: ListInstallationsAccessToken,
): string {
  return JSON.stringify(
    ListInstallationsAccessToken$outboundSchema.parse(
      listInstallationsAccessToken,
    ),
  );
}

export function listInstallationsAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsAccessToken' from JSON`,
  );
}

/** @internal */
export const ListInstallationsRefreshToken$inboundSchema: z.ZodType<
  ListInstallationsRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListInstallationsRefreshToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const ListInstallationsRefreshToken$outboundSchema: z.ZodType<
  ListInstallationsRefreshToken$Outbound,
  z.ZodTypeDef,
  ListInstallationsRefreshToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsRefreshToken$ {
  /** @deprecated use `ListInstallationsRefreshToken$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsRefreshToken$inboundSchema;
  /** @deprecated use `ListInstallationsRefreshToken$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsRefreshToken$outboundSchema;
  /** @deprecated use `ListInstallationsRefreshToken$Outbound` instead. */
  export type Outbound = ListInstallationsRefreshToken$Outbound;
}

export function listInstallationsRefreshTokenToJSON(
  listInstallationsRefreshToken: ListInstallationsRefreshToken,
): string {
  return JSON.stringify(
    ListInstallationsRefreshToken$outboundSchema.parse(
      listInstallationsRefreshToken,
    ),
  );
}

export function listInstallationsRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsRefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsRefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsRefreshToken' from JSON`,
  );
}

/** @internal */
export const ListInstallationsOAuth2AuthorizationCodeToken$inboundSchema:
  z.ZodType<
    ListInstallationsOAuth2AuthorizationCodeToken,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessToken: z.lazy(() => ListInstallationsAccessToken$inboundSchema)
      .optional(),
    refreshToken: z.lazy(() => ListInstallationsRefreshToken$inboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/** @internal */
export type ListInstallationsOAuth2AuthorizationCodeToken$Outbound = {
  accessToken?: ListInstallationsAccessToken$Outbound | undefined;
  refreshToken?: ListInstallationsRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ListInstallationsOAuth2AuthorizationCodeToken$outboundSchema:
  z.ZodType<
    ListInstallationsOAuth2AuthorizationCodeToken$Outbound,
    z.ZodTypeDef,
    ListInstallationsOAuth2AuthorizationCodeToken
  > = z.object({
    accessToken: z.lazy(() => ListInstallationsAccessToken$outboundSchema)
      .optional(),
    refreshToken: z.lazy(() => ListInstallationsRefreshToken$outboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsOAuth2AuthorizationCodeToken$ {
  /** @deprecated use `ListInstallationsOAuth2AuthorizationCodeToken$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsOAuth2AuthorizationCodeToken$inboundSchema;
  /** @deprecated use `ListInstallationsOAuth2AuthorizationCodeToken$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsOAuth2AuthorizationCodeToken$outboundSchema;
  /** @deprecated use `ListInstallationsOAuth2AuthorizationCodeToken$Outbound` instead. */
  export type Outbound = ListInstallationsOAuth2AuthorizationCodeToken$Outbound;
}

export function listInstallationsOAuth2AuthorizationCodeTokenToJSON(
  listInstallationsOAuth2AuthorizationCodeToken:
    ListInstallationsOAuth2AuthorizationCodeToken,
): string {
  return JSON.stringify(
    ListInstallationsOAuth2AuthorizationCodeToken$outboundSchema.parse(
      listInstallationsOAuth2AuthorizationCodeToken,
    ),
  );
}

export function listInstallationsOAuth2AuthorizationCodeTokenFromJSON(
  jsonString: string,
): SafeParseResult<
  ListInstallationsOAuth2AuthorizationCodeToken,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsOAuth2AuthorizationCodeToken$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListInstallationsOAuth2AuthorizationCodeToken' from JSON`,
  );
}

/** @internal */
export const ListInstallationsSource$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsSource
> = z.nativeEnum(ListInstallationsSource);

/** @internal */
export const ListInstallationsSource$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsSource
> = ListInstallationsSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsSource$ {
  /** @deprecated use `ListInstallationsSource$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsSource$inboundSchema;
  /** @deprecated use `ListInstallationsSource$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsSource$outboundSchema;
}

/** @internal */
export const ListInstallationsProviderMetadataInfo$inboundSchema: z.ZodType<
  ListInstallationsProviderMetadataInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  source: ListInstallationsSource$inboundSchema,
  displayName: z.string().optional(),
});

/** @internal */
export type ListInstallationsProviderMetadataInfo$Outbound = {
  value: string;
  source: string;
  displayName?: string | undefined;
};

/** @internal */
export const ListInstallationsProviderMetadataInfo$outboundSchema: z.ZodType<
  ListInstallationsProviderMetadataInfo$Outbound,
  z.ZodTypeDef,
  ListInstallationsProviderMetadataInfo
> = z.object({
  value: z.string(),
  source: ListInstallationsSource$outboundSchema,
  displayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsProviderMetadataInfo$ {
  /** @deprecated use `ListInstallationsProviderMetadataInfo$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsProviderMetadataInfo$inboundSchema;
  /** @deprecated use `ListInstallationsProviderMetadataInfo$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsProviderMetadataInfo$outboundSchema;
  /** @deprecated use `ListInstallationsProviderMetadataInfo$Outbound` instead. */
  export type Outbound = ListInstallationsProviderMetadataInfo$Outbound;
}

export function listInstallationsProviderMetadataInfoToJSON(
  listInstallationsProviderMetadataInfo: ListInstallationsProviderMetadataInfo,
): string {
  return JSON.stringify(
    ListInstallationsProviderMetadataInfo$outboundSchema.parse(
      listInstallationsProviderMetadataInfo,
    ),
  );
}

export function listInstallationsProviderMetadataInfoFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsProviderMetadataInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsProviderMetadataInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsProviderMetadataInfo' from JSON`,
  );
}

/** @internal */
export const ListInstallationsConnection$inboundSchema: z.ZodType<
  ListInstallationsConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => ListInstallationsProviderApp$inboundSchema)
    .optional(),
  group: z.lazy(() => ListInstallationsGroup$inboundSchema),
  consumer: z.lazy(() => ListInstallationsConsumer$inboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  authScheme: ListInstallationsAuthScheme$inboundSchema,
  status: ListInstallationsStatus$inboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    ListInstallationsOAuth2AuthorizationCodeToken$inboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => ListInstallationsProviderMetadataInfo$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListInstallationsConnection$Outbound = {
  id: string;
  projectId: string;
  provider: string;
  providerApp?: ListInstallationsProviderApp$Outbound | undefined;
  group: ListInstallationsGroup$Outbound;
  consumer: ListInstallationsConsumer$Outbound;
  providerWorkspaceRef?: string | undefined;
  providerConsumerRef?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  authScheme: string;
  status: string;
  oauth2AuthorizationCode?:
    | ListInstallationsOAuth2AuthorizationCodeToken$Outbound
    | undefined;
  apiKey?: string | undefined;
  providerMetadata?: {
    [k: string]: ListInstallationsProviderMetadataInfo$Outbound;
  } | undefined;
};

/** @internal */
export const ListInstallationsConnection$outboundSchema: z.ZodType<
  ListInstallationsConnection$Outbound,
  z.ZodTypeDef,
  ListInstallationsConnection
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => ListInstallationsProviderApp$outboundSchema)
    .optional(),
  group: z.lazy(() => ListInstallationsGroup$outboundSchema),
  consumer: z.lazy(() => ListInstallationsConsumer$outboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  authScheme: ListInstallationsAuthScheme$outboundSchema,
  status: ListInstallationsStatus$outboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    ListInstallationsOAuth2AuthorizationCodeToken$outboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => ListInstallationsProviderMetadataInfo$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsConnection$ {
  /** @deprecated use `ListInstallationsConnection$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsConnection$inboundSchema;
  /** @deprecated use `ListInstallationsConnection$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsConnection$outboundSchema;
  /** @deprecated use `ListInstallationsConnection$Outbound` instead. */
  export type Outbound = ListInstallationsConnection$Outbound;
}

export function listInstallationsConnectionToJSON(
  listInstallationsConnection: ListInstallationsConnection,
): string {
  return JSON.stringify(
    ListInstallationsConnection$outboundSchema.parse(
      listInstallationsConnection,
    ),
  );
}

export function listInstallationsConnectionFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsConnection' from JSON`,
  );
}

/** @internal */
export const ListInstallationsSelectedFieldsAutoConfig$inboundSchema:
  z.ZodNativeEnum<typeof ListInstallationsSelectedFieldsAutoConfig> = z
    .nativeEnum(ListInstallationsSelectedFieldsAutoConfig);

/** @internal */
export const ListInstallationsSelectedFieldsAutoConfig$outboundSchema:
  z.ZodNativeEnum<typeof ListInstallationsSelectedFieldsAutoConfig> =
    ListInstallationsSelectedFieldsAutoConfig$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsSelectedFieldsAutoConfig$ {
  /** @deprecated use `ListInstallationsSelectedFieldsAutoConfig$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsSelectedFieldsAutoConfig$inboundSchema;
  /** @deprecated use `ListInstallationsSelectedFieldsAutoConfig$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsSelectedFieldsAutoConfig$outboundSchema;
}

/** @internal */
export const ListInstallationsDefaultPeriodConfig$inboundSchema: z.ZodType<
  ListInstallationsDefaultPeriodConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type ListInstallationsDefaultPeriodConfig$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const ListInstallationsDefaultPeriodConfig$outboundSchema: z.ZodType<
  ListInstallationsDefaultPeriodConfig$Outbound,
  z.ZodTypeDef,
  ListInstallationsDefaultPeriodConfig
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsDefaultPeriodConfig$ {
  /** @deprecated use `ListInstallationsDefaultPeriodConfig$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsDefaultPeriodConfig$inboundSchema;
  /** @deprecated use `ListInstallationsDefaultPeriodConfig$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsDefaultPeriodConfig$outboundSchema;
  /** @deprecated use `ListInstallationsDefaultPeriodConfig$Outbound` instead. */
  export type Outbound = ListInstallationsDefaultPeriodConfig$Outbound;
}

export function listInstallationsDefaultPeriodConfigToJSON(
  listInstallationsDefaultPeriodConfig: ListInstallationsDefaultPeriodConfig,
): string {
  return JSON.stringify(
    ListInstallationsDefaultPeriodConfig$outboundSchema.parse(
      listInstallationsDefaultPeriodConfig,
    ),
  );
}

export function listInstallationsDefaultPeriodConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsDefaultPeriodConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsDefaultPeriodConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsDefaultPeriodConfig' from JSON`,
  );
}

/** @internal */
export const ListInstallationsBackfillConfig$inboundSchema: z.ZodType<
  ListInstallationsBackfillConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() =>
    ListInstallationsDefaultPeriodConfig$inboundSchema
  ),
});

/** @internal */
export type ListInstallationsBackfillConfig$Outbound = {
  defaultPeriod: ListInstallationsDefaultPeriodConfig$Outbound;
};

/** @internal */
export const ListInstallationsBackfillConfig$outboundSchema: z.ZodType<
  ListInstallationsBackfillConfig$Outbound,
  z.ZodTypeDef,
  ListInstallationsBackfillConfig
> = z.object({
  defaultPeriod: z.lazy(() =>
    ListInstallationsDefaultPeriodConfig$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsBackfillConfig$ {
  /** @deprecated use `ListInstallationsBackfillConfig$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsBackfillConfig$inboundSchema;
  /** @deprecated use `ListInstallationsBackfillConfig$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsBackfillConfig$outboundSchema;
  /** @deprecated use `ListInstallationsBackfillConfig$Outbound` instead. */
  export type Outbound = ListInstallationsBackfillConfig$Outbound;
}

export function listInstallationsBackfillConfigToJSON(
  listInstallationsBackfillConfig: ListInstallationsBackfillConfig,
): string {
  return JSON.stringify(
    ListInstallationsBackfillConfig$outboundSchema.parse(
      listInstallationsBackfillConfig,
    ),
  );
}

export function listInstallationsBackfillConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsBackfillConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsBackfillConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsBackfillConfig' from JSON`,
  );
}

/** @internal */
export const ListInstallationsReadConfigObject$inboundSchema: z.ZodType<
  ListInstallationsReadConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  schedule: z.string(),
  destination: z.string(),
  selectedFields: z.record(z.boolean()),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()),
  selectedFieldsAuto: ListInstallationsSelectedFieldsAutoConfig$inboundSchema
    .optional(),
  backfill: z.lazy(() => ListInstallationsBackfillConfig$inboundSchema)
    .optional(),
});

/** @internal */
export type ListInstallationsReadConfigObject$Outbound = {
  objectName: string;
  schedule: string;
  destination: string;
  selectedFields: { [k: string]: boolean };
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  selectedFieldMappings: { [k: string]: string };
  selectedFieldsAuto?: string | undefined;
  backfill?: ListInstallationsBackfillConfig$Outbound | undefined;
};

/** @internal */
export const ListInstallationsReadConfigObject$outboundSchema: z.ZodType<
  ListInstallationsReadConfigObject$Outbound,
  z.ZodTypeDef,
  ListInstallationsReadConfigObject
> = z.object({
  objectName: z.string(),
  schedule: z.string(),
  destination: z.string(),
  selectedFields: z.record(z.boolean()),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()),
  selectedFieldsAuto: ListInstallationsSelectedFieldsAutoConfig$outboundSchema
    .optional(),
  backfill: z.lazy(() => ListInstallationsBackfillConfig$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsReadConfigObject$ {
  /** @deprecated use `ListInstallationsReadConfigObject$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsReadConfigObject$inboundSchema;
  /** @deprecated use `ListInstallationsReadConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsReadConfigObject$outboundSchema;
  /** @deprecated use `ListInstallationsReadConfigObject$Outbound` instead. */
  export type Outbound = ListInstallationsReadConfigObject$Outbound;
}

export function listInstallationsReadConfigObjectToJSON(
  listInstallationsReadConfigObject: ListInstallationsReadConfigObject,
): string {
  return JSON.stringify(
    ListInstallationsReadConfigObject$outboundSchema.parse(
      listInstallationsReadConfigObject,
    ),
  );
}

export function listInstallationsReadConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsReadConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsReadConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsReadConfigObject' from JSON`,
  );
}

/** @internal */
export const ListInstallationsReadConfig$inboundSchema: z.ZodType<
  ListInstallationsReadConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => ListInstallationsReadConfigObject$inboundSchema),
  ),
});

/** @internal */
export type ListInstallationsReadConfig$Outbound = {
  objects: { [k: string]: ListInstallationsReadConfigObject$Outbound };
};

/** @internal */
export const ListInstallationsReadConfig$outboundSchema: z.ZodType<
  ListInstallationsReadConfig$Outbound,
  z.ZodTypeDef,
  ListInstallationsReadConfig
> = z.object({
  objects: z.record(
    z.lazy(() => ListInstallationsReadConfigObject$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsReadConfig$ {
  /** @deprecated use `ListInstallationsReadConfig$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsReadConfig$inboundSchema;
  /** @deprecated use `ListInstallationsReadConfig$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsReadConfig$outboundSchema;
  /** @deprecated use `ListInstallationsReadConfig$Outbound` instead. */
  export type Outbound = ListInstallationsReadConfig$Outbound;
}

export function listInstallationsReadConfigToJSON(
  listInstallationsReadConfig: ListInstallationsReadConfig,
): string {
  return JSON.stringify(
    ListInstallationsReadConfig$outboundSchema.parse(
      listInstallationsReadConfig,
    ),
  );
}

export function listInstallationsReadConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsReadConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsReadConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsReadConfig' from JSON`,
  );
}

/** @internal */
export const ListInstallationsValueDefaultLegacyApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<typeof ListInstallationsValueDefaultLegacyApplyOnUpdate> = z
    .nativeEnum(ListInstallationsValueDefaultLegacyApplyOnUpdate);

/** @internal */
export const ListInstallationsValueDefaultLegacyApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<typeof ListInstallationsValueDefaultLegacyApplyOnUpdate> =
    ListInstallationsValueDefaultLegacyApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsValueDefaultLegacyApplyOnUpdate$ {
  /** @deprecated use `ListInstallationsValueDefaultLegacyApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsValueDefaultLegacyApplyOnUpdate$inboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsValueDefaultLegacyApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ListInstallationsValueDefaultLegacyValueDefaultBoolean$inboundSchema:
  z.ZodType<
    ListInstallationsValueDefaultLegacyValueDefaultBoolean,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.boolean(),
    applyOnUpdate:
      ListInstallationsValueDefaultLegacyApplyOnUpdate$inboundSchema.optional(),
  });

/** @internal */
export type ListInstallationsValueDefaultLegacyValueDefaultBoolean$Outbound = {
  value: boolean;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ListInstallationsValueDefaultLegacyValueDefaultBoolean$outboundSchema:
  z.ZodType<
    ListInstallationsValueDefaultLegacyValueDefaultBoolean$Outbound,
    z.ZodTypeDef,
    ListInstallationsValueDefaultLegacyValueDefaultBoolean
  > = z.object({
    value: z.boolean(),
    applyOnUpdate:
      ListInstallationsValueDefaultLegacyApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsValueDefaultLegacyValueDefaultBoolean$ {
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultBoolean$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsValueDefaultLegacyValueDefaultBoolean$inboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultBoolean$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsValueDefaultLegacyValueDefaultBoolean$outboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultBoolean$Outbound` instead. */
  export type Outbound =
    ListInstallationsValueDefaultLegacyValueDefaultBoolean$Outbound;
}

export function listInstallationsValueDefaultLegacyValueDefaultBooleanToJSON(
  listInstallationsValueDefaultLegacyValueDefaultBoolean:
    ListInstallationsValueDefaultLegacyValueDefaultBoolean,
): string {
  return JSON.stringify(
    ListInstallationsValueDefaultLegacyValueDefaultBoolean$outboundSchema.parse(
      listInstallationsValueDefaultLegacyValueDefaultBoolean,
    ),
  );
}

export function listInstallationsValueDefaultLegacyValueDefaultBooleanFromJSON(
  jsonString: string,
): SafeParseResult<
  ListInstallationsValueDefaultLegacyValueDefaultBoolean,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsValueDefaultLegacyValueDefaultBoolean$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsValueDefaultLegacyValueDefaultBoolean' from JSON`,
  );
}

/** @internal */
export const ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate
  > = z.nativeEnum(
    ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate,
  );

/** @internal */
export const ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate
  > =
    ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$ {
  /** @deprecated use `ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ListInstallationsValueDefaultLegacyValueDefaultInteger$inboundSchema:
  z.ZodType<
    ListInstallationsValueDefaultLegacyValueDefaultInteger,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.number().int(),
    applyOnUpdate:
      ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema
        .optional(),
  });

/** @internal */
export type ListInstallationsValueDefaultLegacyValueDefaultInteger$Outbound = {
  value: number;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ListInstallationsValueDefaultLegacyValueDefaultInteger$outboundSchema:
  z.ZodType<
    ListInstallationsValueDefaultLegacyValueDefaultInteger$Outbound,
    z.ZodTypeDef,
    ListInstallationsValueDefaultLegacyValueDefaultInteger
  > = z.object({
    value: z.number().int(),
    applyOnUpdate:
      ListInstallationsValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsValueDefaultLegacyValueDefaultInteger$ {
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultInteger$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsValueDefaultLegacyValueDefaultInteger$inboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultInteger$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsValueDefaultLegacyValueDefaultInteger$outboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultInteger$Outbound` instead. */
  export type Outbound =
    ListInstallationsValueDefaultLegacyValueDefaultInteger$Outbound;
}

export function listInstallationsValueDefaultLegacyValueDefaultIntegerToJSON(
  listInstallationsValueDefaultLegacyValueDefaultInteger:
    ListInstallationsValueDefaultLegacyValueDefaultInteger,
): string {
  return JSON.stringify(
    ListInstallationsValueDefaultLegacyValueDefaultInteger$outboundSchema.parse(
      listInstallationsValueDefaultLegacyValueDefaultInteger,
    ),
  );
}

export function listInstallationsValueDefaultLegacyValueDefaultIntegerFromJSON(
  jsonString: string,
): SafeParseResult<
  ListInstallationsValueDefaultLegacyValueDefaultInteger,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsValueDefaultLegacyValueDefaultInteger$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsValueDefaultLegacyValueDefaultInteger' from JSON`,
  );
}

/** @internal */
export const ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate
  > = z.nativeEnum(
    ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate,
  );

/** @internal */
export const ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate
  > =
    ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$ {
  /** @deprecated use `ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ListInstallationsValueDefaultLegacyValueDefaultString$inboundSchema:
  z.ZodType<
    ListInstallationsValueDefaultLegacyValueDefaultString,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
    applyOnUpdate:
      ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema
        .optional(),
  });

/** @internal */
export type ListInstallationsValueDefaultLegacyValueDefaultString$Outbound = {
  value: string;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ListInstallationsValueDefaultLegacyValueDefaultString$outboundSchema:
  z.ZodType<
    ListInstallationsValueDefaultLegacyValueDefaultString$Outbound,
    z.ZodTypeDef,
    ListInstallationsValueDefaultLegacyValueDefaultString
  > = z.object({
    value: z.string(),
    applyOnUpdate:
      ListInstallationsValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsValueDefaultLegacyValueDefaultString$ {
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultString$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsValueDefaultLegacyValueDefaultString$inboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultString$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsValueDefaultLegacyValueDefaultString$outboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacyValueDefaultString$Outbound` instead. */
  export type Outbound =
    ListInstallationsValueDefaultLegacyValueDefaultString$Outbound;
}

export function listInstallationsValueDefaultLegacyValueDefaultStringToJSON(
  listInstallationsValueDefaultLegacyValueDefaultString:
    ListInstallationsValueDefaultLegacyValueDefaultString,
): string {
  return JSON.stringify(
    ListInstallationsValueDefaultLegacyValueDefaultString$outboundSchema.parse(
      listInstallationsValueDefaultLegacyValueDefaultString,
    ),
  );
}

export function listInstallationsValueDefaultLegacyValueDefaultStringFromJSON(
  jsonString: string,
): SafeParseResult<
  ListInstallationsValueDefaultLegacyValueDefaultString,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsValueDefaultLegacyValueDefaultString$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListInstallationsValueDefaultLegacyValueDefaultString' from JSON`,
  );
}

/** @internal */
export const ListInstallationsValueDefaultLegacy$inboundSchema: z.ZodType<
  ListInstallationsValueDefaultLegacy,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    ListInstallationsValueDefaultLegacyValueDefaultString$inboundSchema
  ),
  z.lazy(() =>
    ListInstallationsValueDefaultLegacyValueDefaultInteger$inboundSchema
  ),
  z.lazy(() =>
    ListInstallationsValueDefaultLegacyValueDefaultBoolean$inboundSchema
  ),
]);

/** @internal */
export type ListInstallationsValueDefaultLegacy$Outbound =
  | ListInstallationsValueDefaultLegacyValueDefaultString$Outbound
  | ListInstallationsValueDefaultLegacyValueDefaultInteger$Outbound
  | ListInstallationsValueDefaultLegacyValueDefaultBoolean$Outbound;

/** @internal */
export const ListInstallationsValueDefaultLegacy$outboundSchema: z.ZodType<
  ListInstallationsValueDefaultLegacy$Outbound,
  z.ZodTypeDef,
  ListInstallationsValueDefaultLegacy
> = z.union([
  z.lazy(() =>
    ListInstallationsValueDefaultLegacyValueDefaultString$outboundSchema
  ),
  z.lazy(() =>
    ListInstallationsValueDefaultLegacyValueDefaultInteger$outboundSchema
  ),
  z.lazy(() =>
    ListInstallationsValueDefaultLegacyValueDefaultBoolean$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsValueDefaultLegacy$ {
  /** @deprecated use `ListInstallationsValueDefaultLegacy$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsValueDefaultLegacy$inboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacy$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsValueDefaultLegacy$outboundSchema;
  /** @deprecated use `ListInstallationsValueDefaultLegacy$Outbound` instead. */
  export type Outbound = ListInstallationsValueDefaultLegacy$Outbound;
}

export function listInstallationsValueDefaultLegacyToJSON(
  listInstallationsValueDefaultLegacy: ListInstallationsValueDefaultLegacy,
): string {
  return JSON.stringify(
    ListInstallationsValueDefaultLegacy$outboundSchema.parse(
      listInstallationsValueDefaultLegacy,
    ),
  );
}

export function listInstallationsValueDefaultLegacyFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsValueDefaultLegacy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsValueDefaultLegacy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsValueDefaultLegacy' from JSON`,
  );
}

/** @internal */
export const ListInstallationsDefaultValueForAField$inboundSchema: z.ZodType<
  ListInstallationsDefaultValueForAField,
  z.ZodTypeDef,
  unknown
> = z.object({
  stringValue: z.string().optional(),
  integerValue: z.number().int().optional(),
  booleanValue: z.boolean().optional(),
});

/** @internal */
export type ListInstallationsDefaultValueForAField$Outbound = {
  stringValue?: string | undefined;
  integerValue?: number | undefined;
  booleanValue?: boolean | undefined;
};

/** @internal */
export const ListInstallationsDefaultValueForAField$outboundSchema: z.ZodType<
  ListInstallationsDefaultValueForAField$Outbound,
  z.ZodTypeDef,
  ListInstallationsDefaultValueForAField
> = z.object({
  stringValue: z.string().optional(),
  integerValue: z.number().int().optional(),
  booleanValue: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsDefaultValueForAField$ {
  /** @deprecated use `ListInstallationsDefaultValueForAField$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsDefaultValueForAField$inboundSchema;
  /** @deprecated use `ListInstallationsDefaultValueForAField$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsDefaultValueForAField$outboundSchema;
  /** @deprecated use `ListInstallationsDefaultValueForAField$Outbound` instead. */
  export type Outbound = ListInstallationsDefaultValueForAField$Outbound;
}

export function listInstallationsDefaultValueForAFieldToJSON(
  listInstallationsDefaultValueForAField:
    ListInstallationsDefaultValueForAField,
): string {
  return JSON.stringify(
    ListInstallationsDefaultValueForAField$outboundSchema.parse(
      listInstallationsDefaultValueForAField,
    ),
  );
}

export function listInstallationsDefaultValueForAFieldFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsDefaultValueForAField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsDefaultValueForAField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsDefaultValueForAField' from JSON`,
  );
}

/** @internal */
export const ListInstallationsWriteOnCreate$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsWriteOnCreate
> = z.nativeEnum(ListInstallationsWriteOnCreate);

/** @internal */
export const ListInstallationsWriteOnCreate$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsWriteOnCreate
> = ListInstallationsWriteOnCreate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsWriteOnCreate$ {
  /** @deprecated use `ListInstallationsWriteOnCreate$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsWriteOnCreate$inboundSchema;
  /** @deprecated use `ListInstallationsWriteOnCreate$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsWriteOnCreate$outboundSchema;
}

/** @internal */
export const ListInstallationsWriteOnUpdate$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsWriteOnUpdate
> = z.nativeEnum(ListInstallationsWriteOnUpdate);

/** @internal */
export const ListInstallationsWriteOnUpdate$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsWriteOnUpdate
> = ListInstallationsWriteOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsWriteOnUpdate$ {
  /** @deprecated use `ListInstallationsWriteOnUpdate$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsWriteOnUpdate$inboundSchema;
  /** @deprecated use `ListInstallationsWriteOnUpdate$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsWriteOnUpdate$outboundSchema;
}

/** @internal */
export const ListInstallationsFieldSetting$inboundSchema: z.ZodType<
  ListInstallationsFieldSetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.lazy(() => ListInstallationsDefaultValueForAField$inboundSchema)
    .optional(),
  writeOnCreate: ListInstallationsWriteOnCreate$inboundSchema.default("always"),
  writeOnUpdate: ListInstallationsWriteOnUpdate$inboundSchema.default("always"),
});

/** @internal */
export type ListInstallationsFieldSetting$Outbound = {
  default?: ListInstallationsDefaultValueForAField$Outbound | undefined;
  writeOnCreate: string;
  writeOnUpdate: string;
};

/** @internal */
export const ListInstallationsFieldSetting$outboundSchema: z.ZodType<
  ListInstallationsFieldSetting$Outbound,
  z.ZodTypeDef,
  ListInstallationsFieldSetting
> = z.object({
  default: z.lazy(() => ListInstallationsDefaultValueForAField$outboundSchema)
    .optional(),
  writeOnCreate: ListInstallationsWriteOnCreate$outboundSchema.default(
    "always",
  ),
  writeOnUpdate: ListInstallationsWriteOnUpdate$outboundSchema.default(
    "always",
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsFieldSetting$ {
  /** @deprecated use `ListInstallationsFieldSetting$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsFieldSetting$inboundSchema;
  /** @deprecated use `ListInstallationsFieldSetting$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsFieldSetting$outboundSchema;
  /** @deprecated use `ListInstallationsFieldSetting$Outbound` instead. */
  export type Outbound = ListInstallationsFieldSetting$Outbound;
}

export function listInstallationsFieldSettingToJSON(
  listInstallationsFieldSetting: ListInstallationsFieldSetting,
): string {
  return JSON.stringify(
    ListInstallationsFieldSetting$outboundSchema.parse(
      listInstallationsFieldSetting,
    ),
  );
}

export function listInstallationsFieldSettingFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsFieldSetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsFieldSetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsFieldSetting' from JSON`,
  );
}

/** @internal */
export const ListInstallationsWriteConfigObject$inboundSchema: z.ZodType<
  ListInstallationsWriteConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() =>
        ListInstallationsValueDefaultLegacyValueDefaultString$inboundSchema
      ),
      z.lazy(() =>
        ListInstallationsValueDefaultLegacyValueDefaultInteger$inboundSchema
      ),
      z.lazy(() =>
        ListInstallationsValueDefaultLegacyValueDefaultBoolean$inboundSchema
      ),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(
    z.lazy(() => ListInstallationsFieldSetting$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListInstallationsWriteConfigObject$Outbound = {
  objectName: string;
  selectedValueDefaults?: {
    [k: string]:
      | ListInstallationsValueDefaultLegacyValueDefaultString$Outbound
      | ListInstallationsValueDefaultLegacyValueDefaultInteger$Outbound
      | ListInstallationsValueDefaultLegacyValueDefaultBoolean$Outbound;
  } | undefined;
  selectedFieldSettings?: {
    [k: string]: ListInstallationsFieldSetting$Outbound;
  } | undefined;
};

/** @internal */
export const ListInstallationsWriteConfigObject$outboundSchema: z.ZodType<
  ListInstallationsWriteConfigObject$Outbound,
  z.ZodTypeDef,
  ListInstallationsWriteConfigObject
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() =>
        ListInstallationsValueDefaultLegacyValueDefaultString$outboundSchema
      ),
      z.lazy(() =>
        ListInstallationsValueDefaultLegacyValueDefaultInteger$outboundSchema
      ),
      z.lazy(() =>
        ListInstallationsValueDefaultLegacyValueDefaultBoolean$outboundSchema
      ),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(
    z.lazy(() => ListInstallationsFieldSetting$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsWriteConfigObject$ {
  /** @deprecated use `ListInstallationsWriteConfigObject$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsWriteConfigObject$inboundSchema;
  /** @deprecated use `ListInstallationsWriteConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsWriteConfigObject$outboundSchema;
  /** @deprecated use `ListInstallationsWriteConfigObject$Outbound` instead. */
  export type Outbound = ListInstallationsWriteConfigObject$Outbound;
}

export function listInstallationsWriteConfigObjectToJSON(
  listInstallationsWriteConfigObject: ListInstallationsWriteConfigObject,
): string {
  return JSON.stringify(
    ListInstallationsWriteConfigObject$outboundSchema.parse(
      listInstallationsWriteConfigObject,
    ),
  );
}

export function listInstallationsWriteConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsWriteConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsWriteConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsWriteConfigObject' from JSON`,
  );
}

/** @internal */
export const ListInstallationsWriteConfig$inboundSchema: z.ZodType<
  ListInstallationsWriteConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => ListInstallationsWriteConfigObject$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListInstallationsWriteConfig$Outbound = {
  objects?:
    | { [k: string]: ListInstallationsWriteConfigObject$Outbound }
    | undefined;
};

/** @internal */
export const ListInstallationsWriteConfig$outboundSchema: z.ZodType<
  ListInstallationsWriteConfig$Outbound,
  z.ZodTypeDef,
  ListInstallationsWriteConfig
> = z.object({
  objects: z.record(
    z.lazy(() => ListInstallationsWriteConfigObject$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsWriteConfig$ {
  /** @deprecated use `ListInstallationsWriteConfig$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsWriteConfig$inboundSchema;
  /** @deprecated use `ListInstallationsWriteConfig$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsWriteConfig$outboundSchema;
  /** @deprecated use `ListInstallationsWriteConfig$Outbound` instead. */
  export type Outbound = ListInstallationsWriteConfig$Outbound;
}

export function listInstallationsWriteConfigToJSON(
  listInstallationsWriteConfig: ListInstallationsWriteConfig,
): string {
  return JSON.stringify(
    ListInstallationsWriteConfig$outboundSchema.parse(
      listInstallationsWriteConfig,
    ),
  );
}

export function listInstallationsWriteConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsWriteConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsWriteConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsWriteConfig' from JSON`,
  );
}

/** @internal */
export const ListInstallationsBaseProxyConfig$inboundSchema: z.ZodType<
  ListInstallationsBaseProxyConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type ListInstallationsBaseProxyConfig$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const ListInstallationsBaseProxyConfig$outboundSchema: z.ZodType<
  ListInstallationsBaseProxyConfig$Outbound,
  z.ZodTypeDef,
  ListInstallationsBaseProxyConfig
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsBaseProxyConfig$ {
  /** @deprecated use `ListInstallationsBaseProxyConfig$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsBaseProxyConfig$inboundSchema;
  /** @deprecated use `ListInstallationsBaseProxyConfig$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsBaseProxyConfig$outboundSchema;
  /** @deprecated use `ListInstallationsBaseProxyConfig$Outbound` instead. */
  export type Outbound = ListInstallationsBaseProxyConfig$Outbound;
}

export function listInstallationsBaseProxyConfigToJSON(
  listInstallationsBaseProxyConfig: ListInstallationsBaseProxyConfig,
): string {
  return JSON.stringify(
    ListInstallationsBaseProxyConfig$outboundSchema.parse(
      listInstallationsBaseProxyConfig,
    ),
  );
}

export function listInstallationsBaseProxyConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsBaseProxyConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsBaseProxyConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsBaseProxyConfig' from JSON`,
  );
}

/** @internal */
export const ListInstallationsEnabled$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsEnabled
> = z.nativeEnum(ListInstallationsEnabled);

/** @internal */
export const ListInstallationsEnabled$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsEnabled
> = ListInstallationsEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsEnabled$ {
  /** @deprecated use `ListInstallationsEnabled$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsEnabled$inboundSchema;
  /** @deprecated use `ListInstallationsEnabled$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsEnabled$outboundSchema;
}

/** @internal */
export const ListInstallationsCreateEvent$inboundSchema: z.ZodType<
  ListInstallationsCreateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: ListInstallationsEnabled$inboundSchema,
});

/** @internal */
export type ListInstallationsCreateEvent$Outbound = {
  enabled: string;
};

/** @internal */
export const ListInstallationsCreateEvent$outboundSchema: z.ZodType<
  ListInstallationsCreateEvent$Outbound,
  z.ZodTypeDef,
  ListInstallationsCreateEvent
> = z.object({
  enabled: ListInstallationsEnabled$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsCreateEvent$ {
  /** @deprecated use `ListInstallationsCreateEvent$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsCreateEvent$inboundSchema;
  /** @deprecated use `ListInstallationsCreateEvent$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsCreateEvent$outboundSchema;
  /** @deprecated use `ListInstallationsCreateEvent$Outbound` instead. */
  export type Outbound = ListInstallationsCreateEvent$Outbound;
}

export function listInstallationsCreateEventToJSON(
  listInstallationsCreateEvent: ListInstallationsCreateEvent,
): string {
  return JSON.stringify(
    ListInstallationsCreateEvent$outboundSchema.parse(
      listInstallationsCreateEvent,
    ),
  );
}

export function listInstallationsCreateEventFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsCreateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsCreateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsCreateEvent' from JSON`,
  );
}

/** @internal */
export const ListInstallationsInstallationsEnabled$inboundSchema:
  z.ZodNativeEnum<typeof ListInstallationsInstallationsEnabled> = z.nativeEnum(
    ListInstallationsInstallationsEnabled,
  );

/** @internal */
export const ListInstallationsInstallationsEnabled$outboundSchema:
  z.ZodNativeEnum<typeof ListInstallationsInstallationsEnabled> =
    ListInstallationsInstallationsEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsInstallationsEnabled$ {
  /** @deprecated use `ListInstallationsInstallationsEnabled$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsInstallationsEnabled$inboundSchema;
  /** @deprecated use `ListInstallationsInstallationsEnabled$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsInstallationsEnabled$outboundSchema;
}

/** @internal */
export const ListInstallationsWatchFieldsAuto$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsWatchFieldsAuto
> = z.nativeEnum(ListInstallationsWatchFieldsAuto);

/** @internal */
export const ListInstallationsWatchFieldsAuto$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsWatchFieldsAuto
> = ListInstallationsWatchFieldsAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsWatchFieldsAuto$ {
  /** @deprecated use `ListInstallationsWatchFieldsAuto$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsWatchFieldsAuto$inboundSchema;
  /** @deprecated use `ListInstallationsWatchFieldsAuto$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsWatchFieldsAuto$outboundSchema;
}

/** @internal */
export const ListInstallationsUpdateEvent$inboundSchema: z.ZodType<
  ListInstallationsUpdateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: ListInstallationsInstallationsEnabled$inboundSchema,
  watchFieldsAuto: ListInstallationsWatchFieldsAuto$inboundSchema.optional(),
  requiredWatchFields: z.array(z.string()).optional(),
});

/** @internal */
export type ListInstallationsUpdateEvent$Outbound = {
  enabled: string;
  watchFieldsAuto?: string | undefined;
  requiredWatchFields?: Array<string> | undefined;
};

/** @internal */
export const ListInstallationsUpdateEvent$outboundSchema: z.ZodType<
  ListInstallationsUpdateEvent$Outbound,
  z.ZodTypeDef,
  ListInstallationsUpdateEvent
> = z.object({
  enabled: ListInstallationsInstallationsEnabled$outboundSchema,
  watchFieldsAuto: ListInstallationsWatchFieldsAuto$outboundSchema.optional(),
  requiredWatchFields: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsUpdateEvent$ {
  /** @deprecated use `ListInstallationsUpdateEvent$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsUpdateEvent$inboundSchema;
  /** @deprecated use `ListInstallationsUpdateEvent$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsUpdateEvent$outboundSchema;
  /** @deprecated use `ListInstallationsUpdateEvent$Outbound` instead. */
  export type Outbound = ListInstallationsUpdateEvent$Outbound;
}

export function listInstallationsUpdateEventToJSON(
  listInstallationsUpdateEvent: ListInstallationsUpdateEvent,
): string {
  return JSON.stringify(
    ListInstallationsUpdateEvent$outboundSchema.parse(
      listInstallationsUpdateEvent,
    ),
  );
}

export function listInstallationsUpdateEventFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsUpdateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsUpdateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsUpdateEvent' from JSON`,
  );
}

/** @internal */
export const ListInstallationsInstallationsResponseEnabled$inboundSchema:
  z.ZodNativeEnum<typeof ListInstallationsInstallationsResponseEnabled> = z
    .nativeEnum(ListInstallationsInstallationsResponseEnabled);

/** @internal */
export const ListInstallationsInstallationsResponseEnabled$outboundSchema:
  z.ZodNativeEnum<typeof ListInstallationsInstallationsResponseEnabled> =
    ListInstallationsInstallationsResponseEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsInstallationsResponseEnabled$ {
  /** @deprecated use `ListInstallationsInstallationsResponseEnabled$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsInstallationsResponseEnabled$inboundSchema;
  /** @deprecated use `ListInstallationsInstallationsResponseEnabled$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsInstallationsResponseEnabled$outboundSchema;
}

/** @internal */
export const ListInstallationsDeleteEvent$inboundSchema: z.ZodType<
  ListInstallationsDeleteEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: ListInstallationsInstallationsResponseEnabled$inboundSchema,
});

/** @internal */
export type ListInstallationsDeleteEvent$Outbound = {
  enabled: string;
};

/** @internal */
export const ListInstallationsDeleteEvent$outboundSchema: z.ZodType<
  ListInstallationsDeleteEvent$Outbound,
  z.ZodTypeDef,
  ListInstallationsDeleteEvent
> = z.object({
  enabled: ListInstallationsInstallationsResponseEnabled$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsDeleteEvent$ {
  /** @deprecated use `ListInstallationsDeleteEvent$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsDeleteEvent$inboundSchema;
  /** @deprecated use `ListInstallationsDeleteEvent$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsDeleteEvent$outboundSchema;
  /** @deprecated use `ListInstallationsDeleteEvent$Outbound` instead. */
  export type Outbound = ListInstallationsDeleteEvent$Outbound;
}

export function listInstallationsDeleteEventToJSON(
  listInstallationsDeleteEvent: ListInstallationsDeleteEvent,
): string {
  return JSON.stringify(
    ListInstallationsDeleteEvent$outboundSchema.parse(
      listInstallationsDeleteEvent,
    ),
  );
}

export function listInstallationsDeleteEventFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsDeleteEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsDeleteEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsDeleteEvent' from JSON`,
  );
}

/** @internal */
export const ListInstallationsSubscribeConfigObject$inboundSchema: z.ZodType<
  ListInstallationsSubscribeConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  inheritFieldsAndMappings: z.boolean(),
  objectName: z.string(),
  destination: z.string(),
  createEvent: z.lazy(() => ListInstallationsCreateEvent$inboundSchema)
    .optional(),
  updateEvent: z.lazy(() => ListInstallationsUpdateEvent$inboundSchema)
    .optional(),
  deleteEvent: z.lazy(() => ListInstallationsDeleteEvent$inboundSchema)
    .optional(),
});

/** @internal */
export type ListInstallationsSubscribeConfigObject$Outbound = {
  inheritFieldsAndMappings: boolean;
  objectName: string;
  destination: string;
  createEvent?: ListInstallationsCreateEvent$Outbound | undefined;
  updateEvent?: ListInstallationsUpdateEvent$Outbound | undefined;
  deleteEvent?: ListInstallationsDeleteEvent$Outbound | undefined;
};

/** @internal */
export const ListInstallationsSubscribeConfigObject$outboundSchema: z.ZodType<
  ListInstallationsSubscribeConfigObject$Outbound,
  z.ZodTypeDef,
  ListInstallationsSubscribeConfigObject
> = z.object({
  inheritFieldsAndMappings: z.boolean(),
  objectName: z.string(),
  destination: z.string(),
  createEvent: z.lazy(() => ListInstallationsCreateEvent$outboundSchema)
    .optional(),
  updateEvent: z.lazy(() => ListInstallationsUpdateEvent$outboundSchema)
    .optional(),
  deleteEvent: z.lazy(() => ListInstallationsDeleteEvent$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsSubscribeConfigObject$ {
  /** @deprecated use `ListInstallationsSubscribeConfigObject$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsSubscribeConfigObject$inboundSchema;
  /** @deprecated use `ListInstallationsSubscribeConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsSubscribeConfigObject$outboundSchema;
  /** @deprecated use `ListInstallationsSubscribeConfigObject$Outbound` instead. */
  export type Outbound = ListInstallationsSubscribeConfigObject$Outbound;
}

export function listInstallationsSubscribeConfigObjectToJSON(
  listInstallationsSubscribeConfigObject:
    ListInstallationsSubscribeConfigObject,
): string {
  return JSON.stringify(
    ListInstallationsSubscribeConfigObject$outboundSchema.parse(
      listInstallationsSubscribeConfigObject,
    ),
  );
}

export function listInstallationsSubscribeConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsSubscribeConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsSubscribeConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsSubscribeConfigObject' from JSON`,
  );
}

/** @internal */
export const ListInstallationsSubscribeConfig$inboundSchema: z.ZodType<
  ListInstallationsSubscribeConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => ListInstallationsSubscribeConfigObject$inboundSchema),
  ),
});

/** @internal */
export type ListInstallationsSubscribeConfig$Outbound = {
  objects: { [k: string]: ListInstallationsSubscribeConfigObject$Outbound };
};

/** @internal */
export const ListInstallationsSubscribeConfig$outboundSchema: z.ZodType<
  ListInstallationsSubscribeConfig$Outbound,
  z.ZodTypeDef,
  ListInstallationsSubscribeConfig
> = z.object({
  objects: z.record(
    z.lazy(() => ListInstallationsSubscribeConfigObject$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsSubscribeConfig$ {
  /** @deprecated use `ListInstallationsSubscribeConfig$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsSubscribeConfig$inboundSchema;
  /** @deprecated use `ListInstallationsSubscribeConfig$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsSubscribeConfig$outboundSchema;
  /** @deprecated use `ListInstallationsSubscribeConfig$Outbound` instead. */
  export type Outbound = ListInstallationsSubscribeConfig$Outbound;
}

export function listInstallationsSubscribeConfigToJSON(
  listInstallationsSubscribeConfig: ListInstallationsSubscribeConfig,
): string {
  return JSON.stringify(
    ListInstallationsSubscribeConfig$outboundSchema.parse(
      listInstallationsSubscribeConfig,
    ),
  );
}

export function listInstallationsSubscribeConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsSubscribeConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsSubscribeConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsSubscribeConfig' from JSON`,
  );
}

/** @internal */
export const ListInstallationsConfigContent$inboundSchema: z.ZodType<
  ListInstallationsConfigContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
  read: z.lazy(() => ListInstallationsReadConfig$inboundSchema).optional(),
  write: z.lazy(() => ListInstallationsWriteConfig$inboundSchema).optional(),
  proxy: z.lazy(() => ListInstallationsBaseProxyConfig$inboundSchema)
    .optional(),
  subscribe: z.lazy(() => ListInstallationsSubscribeConfig$inboundSchema)
    .optional(),
});

/** @internal */
export type ListInstallationsConfigContent$Outbound = {
  provider: string;
  read?: ListInstallationsReadConfig$Outbound | undefined;
  write?: ListInstallationsWriteConfig$Outbound | undefined;
  proxy?: ListInstallationsBaseProxyConfig$Outbound | undefined;
  subscribe?: ListInstallationsSubscribeConfig$Outbound | undefined;
};

/** @internal */
export const ListInstallationsConfigContent$outboundSchema: z.ZodType<
  ListInstallationsConfigContent$Outbound,
  z.ZodTypeDef,
  ListInstallationsConfigContent
> = z.object({
  provider: z.string(),
  read: z.lazy(() => ListInstallationsReadConfig$outboundSchema).optional(),
  write: z.lazy(() => ListInstallationsWriteConfig$outboundSchema).optional(),
  proxy: z.lazy(() => ListInstallationsBaseProxyConfig$outboundSchema)
    .optional(),
  subscribe: z.lazy(() => ListInstallationsSubscribeConfig$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsConfigContent$ {
  /** @deprecated use `ListInstallationsConfigContent$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsConfigContent$inboundSchema;
  /** @deprecated use `ListInstallationsConfigContent$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsConfigContent$outboundSchema;
  /** @deprecated use `ListInstallationsConfigContent$Outbound` instead. */
  export type Outbound = ListInstallationsConfigContent$Outbound;
}

export function listInstallationsConfigContentToJSON(
  listInstallationsConfigContent: ListInstallationsConfigContent,
): string {
  return JSON.stringify(
    ListInstallationsConfigContent$outboundSchema.parse(
      listInstallationsConfigContent,
    ),
  );
}

export function listInstallationsConfigContentFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsConfigContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsConfigContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsConfigContent' from JSON`,
  );
}

/** @internal */
export const ListInstallationsConfig$inboundSchema: z.ZodType<
  ListInstallationsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  content: z.lazy(() => ListInstallationsConfigContent$inboundSchema),
});

/** @internal */
export type ListInstallationsConfig$Outbound = {
  id: string;
  revisionId: string;
  createTime: string;
  createdBy: string;
  content: ListInstallationsConfigContent$Outbound;
};

/** @internal */
export const ListInstallationsConfig$outboundSchema: z.ZodType<
  ListInstallationsConfig$Outbound,
  z.ZodTypeDef,
  ListInstallationsConfig
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  content: z.lazy(() => ListInstallationsConfigContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsConfig$ {
  /** @deprecated use `ListInstallationsConfig$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsConfig$inboundSchema;
  /** @deprecated use `ListInstallationsConfig$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsConfig$outboundSchema;
  /** @deprecated use `ListInstallationsConfig$Outbound` instead. */
  export type Outbound = ListInstallationsConfig$Outbound;
}

export function listInstallationsConfigToJSON(
  listInstallationsConfig: ListInstallationsConfig,
): string {
  return JSON.stringify(
    ListInstallationsConfig$outboundSchema.parse(listInstallationsConfig),
  );
}

export function listInstallationsConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsConfig' from JSON`,
  );
}

/** @internal */
export const ListInstallationsInstallation$inboundSchema: z.ZodType<
  ListInstallationsInstallation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => Group$inboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => ListInstallationsConnection$inboundSchema),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  config: z.lazy(() => ListInstallationsConfig$inboundSchema),
});

/** @internal */
export type ListInstallationsInstallation$Outbound = {
  id: string;
  projectId: string;
  integrationId: string;
  group?: Group$Outbound | undefined;
  healthStatus: string;
  connection: ListInstallationsConnection$Outbound;
  createTime: string;
  createdBy: string;
  updateTime?: string | undefined;
  config: ListInstallationsConfig$Outbound;
};

/** @internal */
export const ListInstallationsInstallation$outboundSchema: z.ZodType<
  ListInstallationsInstallation$Outbound,
  z.ZodTypeDef,
  ListInstallationsInstallation
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => Group$outboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => ListInstallationsConnection$outboundSchema),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  config: z.lazy(() => ListInstallationsConfig$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsInstallation$ {
  /** @deprecated use `ListInstallationsInstallation$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsInstallation$inboundSchema;
  /** @deprecated use `ListInstallationsInstallation$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsInstallation$outboundSchema;
  /** @deprecated use `ListInstallationsInstallation$Outbound` instead. */
  export type Outbound = ListInstallationsInstallation$Outbound;
}

export function listInstallationsInstallationToJSON(
  listInstallationsInstallation: ListInstallationsInstallation,
): string {
  return JSON.stringify(
    ListInstallationsInstallation$outboundSchema.parse(
      listInstallationsInstallation,
    ),
  );
}

export function listInstallationsInstallationFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsInstallation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsInstallation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsInstallation' from JSON`,
  );
}

/** @internal */
export const ListInstallationsResponse$inboundSchema: z.ZodType<
  ListInstallationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListInstallationsAPIProblem$inboundSchema),
  z.array(z.lazy(() => ListInstallationsInstallation$inboundSchema)),
]);

/** @internal */
export type ListInstallationsResponse$Outbound =
  | ListInstallationsAPIProblem$Outbound
  | Array<ListInstallationsInstallation$Outbound>;

/** @internal */
export const ListInstallationsResponse$outboundSchema: z.ZodType<
  ListInstallationsResponse$Outbound,
  z.ZodTypeDef,
  ListInstallationsResponse
> = z.union([
  z.lazy(() => ListInstallationsAPIProblem$outboundSchema),
  z.array(z.lazy(() => ListInstallationsInstallation$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsResponse$ {
  /** @deprecated use `ListInstallationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsResponse$inboundSchema;
  /** @deprecated use `ListInstallationsResponse$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsResponse$outboundSchema;
  /** @deprecated use `ListInstallationsResponse$Outbound` instead. */
  export type Outbound = ListInstallationsResponse$Outbound;
}

export function listInstallationsResponseToJSON(
  listInstallationsResponse: ListInstallationsResponse,
): string {
  return JSON.stringify(
    ListInstallationsResponse$outboundSchema.parse(listInstallationsResponse),
  );
}

export function listInstallationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsResponse' from JSON`,
  );
}
