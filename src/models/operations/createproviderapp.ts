/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateProviderAppRequestBody = {
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth client secret for this app.
   */
  clientSecret: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
};

export type CreateProviderAppRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  requestBody: CreateProviderAppRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type CreateProviderAppAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The newly created provider app
 */
export type CreateProviderAppProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type CreateProviderAppResponse =
  | CreateProviderAppProviderApp
  | CreateProviderAppAPIProblem;

/** @internal */
export const CreateProviderAppRequestBody$inboundSchema: z.ZodType<
  CreateProviderAppRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type CreateProviderAppRequestBody$Outbound = {
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  clientSecret: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const CreateProviderAppRequestBody$outboundSchema: z.ZodType<
  CreateProviderAppRequestBody$Outbound,
  z.ZodTypeDef,
  CreateProviderAppRequestBody
> = z.object({
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  clientSecret: z.string(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProviderAppRequestBody$ {
  /** @deprecated use `CreateProviderAppRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateProviderAppRequestBody$inboundSchema;
  /** @deprecated use `CreateProviderAppRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateProviderAppRequestBody$outboundSchema;
  /** @deprecated use `CreateProviderAppRequestBody$Outbound` instead. */
  export type Outbound = CreateProviderAppRequestBody$Outbound;
}

export function createProviderAppRequestBodyToJSON(
  createProviderAppRequestBody: CreateProviderAppRequestBody,
): string {
  return JSON.stringify(
    CreateProviderAppRequestBody$outboundSchema.parse(
      createProviderAppRequestBody,
    ),
  );
}

export function createProviderAppRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateProviderAppRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProviderAppRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProviderAppRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateProviderAppRequest$inboundSchema: z.ZodType<
  CreateProviderAppRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  RequestBody: z.lazy(() => CreateProviderAppRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateProviderAppRequest$Outbound = {
  projectIdOrName: string;
  RequestBody: CreateProviderAppRequestBody$Outbound;
};

/** @internal */
export const CreateProviderAppRequest$outboundSchema: z.ZodType<
  CreateProviderAppRequest$Outbound,
  z.ZodTypeDef,
  CreateProviderAppRequest
> = z.object({
  projectIdOrName: z.string(),
  requestBody: z.lazy(() => CreateProviderAppRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProviderAppRequest$ {
  /** @deprecated use `CreateProviderAppRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProviderAppRequest$inboundSchema;
  /** @deprecated use `CreateProviderAppRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProviderAppRequest$outboundSchema;
  /** @deprecated use `CreateProviderAppRequest$Outbound` instead. */
  export type Outbound = CreateProviderAppRequest$Outbound;
}

export function createProviderAppRequestToJSON(
  createProviderAppRequest: CreateProviderAppRequest,
): string {
  return JSON.stringify(
    CreateProviderAppRequest$outboundSchema.parse(createProviderAppRequest),
  );
}

export function createProviderAppRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProviderAppRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProviderAppRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProviderAppRequest' from JSON`,
  );
}

/** @internal */
export const CreateProviderAppAPIProblem$inboundSchema: z.ZodType<
  CreateProviderAppAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type CreateProviderAppAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateProviderAppAPIProblem$outboundSchema: z.ZodType<
  CreateProviderAppAPIProblem$Outbound,
  z.ZodTypeDef,
  CreateProviderAppAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProviderAppAPIProblem$ {
  /** @deprecated use `CreateProviderAppAPIProblem$inboundSchema` instead. */
  export const inboundSchema = CreateProviderAppAPIProblem$inboundSchema;
  /** @deprecated use `CreateProviderAppAPIProblem$outboundSchema` instead. */
  export const outboundSchema = CreateProviderAppAPIProblem$outboundSchema;
  /** @deprecated use `CreateProviderAppAPIProblem$Outbound` instead. */
  export type Outbound = CreateProviderAppAPIProblem$Outbound;
}

export function createProviderAppAPIProblemToJSON(
  createProviderAppAPIProblem: CreateProviderAppAPIProblem,
): string {
  return JSON.stringify(
    CreateProviderAppAPIProblem$outboundSchema.parse(
      createProviderAppAPIProblem,
    ),
  );
}

export function createProviderAppAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<CreateProviderAppAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProviderAppAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProviderAppAPIProblem' from JSON`,
  );
}

/** @internal */
export const CreateProviderAppProviderApp$inboundSchema: z.ZodType<
  CreateProviderAppProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateProviderAppProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateProviderAppProviderApp$outboundSchema: z.ZodType<
  CreateProviderAppProviderApp$Outbound,
  z.ZodTypeDef,
  CreateProviderAppProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProviderAppProviderApp$ {
  /** @deprecated use `CreateProviderAppProviderApp$inboundSchema` instead. */
  export const inboundSchema = CreateProviderAppProviderApp$inboundSchema;
  /** @deprecated use `CreateProviderAppProviderApp$outboundSchema` instead. */
  export const outboundSchema = CreateProviderAppProviderApp$outboundSchema;
  /** @deprecated use `CreateProviderAppProviderApp$Outbound` instead. */
  export type Outbound = CreateProviderAppProviderApp$Outbound;
}

export function createProviderAppProviderAppToJSON(
  createProviderAppProviderApp: CreateProviderAppProviderApp,
): string {
  return JSON.stringify(
    CreateProviderAppProviderApp$outboundSchema.parse(
      createProviderAppProviderApp,
    ),
  );
}

export function createProviderAppProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<CreateProviderAppProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProviderAppProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProviderAppProviderApp' from JSON`,
  );
}

/** @internal */
export const CreateProviderAppResponse$inboundSchema: z.ZodType<
  CreateProviderAppResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProviderAppProviderApp$inboundSchema),
  z.lazy(() => CreateProviderAppAPIProblem$inboundSchema),
]);

/** @internal */
export type CreateProviderAppResponse$Outbound =
  | CreateProviderAppProviderApp$Outbound
  | CreateProviderAppAPIProblem$Outbound;

/** @internal */
export const CreateProviderAppResponse$outboundSchema: z.ZodType<
  CreateProviderAppResponse$Outbound,
  z.ZodTypeDef,
  CreateProviderAppResponse
> = z.union([
  z.lazy(() => CreateProviderAppProviderApp$outboundSchema),
  z.lazy(() => CreateProviderAppAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProviderAppResponse$ {
  /** @deprecated use `CreateProviderAppResponse$inboundSchema` instead. */
  export const inboundSchema = CreateProviderAppResponse$inboundSchema;
  /** @deprecated use `CreateProviderAppResponse$outboundSchema` instead. */
  export const outboundSchema = CreateProviderAppResponse$outboundSchema;
  /** @deprecated use `CreateProviderAppResponse$Outbound` instead. */
  export type Outbound = CreateProviderAppResponse$Outbound;
}

export function createProviderAppResponseToJSON(
  createProviderAppResponse: CreateProviderAppResponse,
): string {
  return JSON.stringify(
    CreateProviderAppResponse$outboundSchema.parse(createProviderAppResponse),
  );
}

export function createProviderAppResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateProviderAppResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProviderAppResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProviderAppResponse' from JSON`,
  );
}
