/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProviderRequest = {
  /**
   * The API provider.
   */
  provider: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetProviderAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The type of authentication required by the provider.
 */
export const GetProviderAuthType = {
  Oauth2: "oauth2",
  ApiKey: "apiKey",
  Basic: "basic",
  Jwt: "jwt",
  None: "none",
} as const;
/**
 * The type of authentication required by the provider.
 */
export type GetProviderAuthType = ClosedEnum<typeof GetProviderAuthType>;

export const GetProviderGrantType = {
  AuthorizationCode: "authorizationCode",
  AuthorizationCodePKCE: "authorizationCodePKCE",
  ClientCredentials: "clientCredentials",
  Password: "password",
} as const;
export type GetProviderGrantType = ClosedEnum<typeof GetProviderGrantType>;

export type GetProviderOtherFields = {
  /**
   * The internal name of the field
   */
  name: string;
  /**
   * The human-readable name of the field
   */
  displayName: string;
  /**
   * The path to the field in the token response (accepts dot notation for nested fields)
   */
  path: string;
  /**
   * A regex expression to capture the value that we need from the path. There must be only one capture group named 'result' in the expression. If not provided, will cause an error.
   */
  capture?: string | undefined;
};

/**
 * Fields to be used to extract token metadata from the token response.
 */
export type GetProviderTokenMetadataFields = {
  workspaceRefField?: string | undefined;
  consumerRefField?: string | undefined;
  scopesField?: string | undefined;
  /**
   * Additional fields to extract and transform from the token response
   */
  otherFields?: Array<GetProviderOtherFields> | undefined;
};

/**
 * Configuration for OAuth2.0. Must be provided if authType is oauth2.
 */
export type GetProviderOAuth2Options = {
  grantType: GetProviderGrantType;
  /**
   * The authorization URL.
   */
  authURL?: string | undefined;
  /**
   * The token URL.
   */
  tokenURL: string;
  /**
   * Whether scopes are required to be known ahead of the OAuth flow.
   */
  explicitScopesRequired: boolean;
  /**
   * Whether the workspace is required to be known ahead of the OAuth flow.
   */
  explicitWorkspaceRequired: boolean;
  /**
   * A list of URLs that represent the audience for the token, which is needed for some client credential grant flows.
   */
  audience?: Array<string> | undefined;
  /**
   * Fields to be used to extract token metadata from the token response.
   */
  tokenMetadataFields: GetProviderTokenMetadataFields;
  /**
   * URL with more information about where to retrieve Client ID and Client Secret, etc.
   */
  docsURL?: string | undefined;
  authURLParams?: { [k: string]: string } | undefined;
};

/**
 * How the API key should be attached to requests.
 */
export const GetProviderAttachmentType = {
  Query: "query",
  Header: "header",
} as const;
/**
 * How the API key should be attached to requests.
 */
export type GetProviderAttachmentType = ClosedEnum<
  typeof GetProviderAttachmentType
>;

/**
 * Configuration for API key in query parameter. Must be provided if type is in-query.
 */
export type GetProviderAPIKeyQueryOptions = {
  /**
   * The name of the query parameter to be used for the API key.
   */
  name: string;
};

/**
 * Configuration for API key in header. Must be provided if type is in-header.
 */
export type GetProviderAPIKeyHeaderOptions = {
  /**
   * The name of the header to be used for the API key.
   */
  name: string;
  /**
   * The prefix to be added to the API key value when it is sent in the header.
   */
  valuePrefix?: string | undefined;
};

/**
 * Configuration for API key. Must be provided if authType is apiKey.
 */
export type GetProviderAPIKeyOptions = {
  /**
   * How the API key should be attached to requests.
   */
  attachmentType: GetProviderAttachmentType;
  /**
   * Configuration for API key in query parameter. Must be provided if type is in-query.
   */
  query?: GetProviderAPIKeyQueryOptions | undefined;
  /**
   * Configuration for API key in header. Must be provided if type is in-header.
   */
  header?: GetProviderAPIKeyHeaderOptions | undefined;
  /**
   * URL with more information about how to get or use an API key.
   */
  docsURL?: string | undefined;
};

/**
 * whether the API key should be used as the username or password.
 */
export const GetProviderFieldUsed = {
  Username: "username",
  Password: "password",
} as const;
/**
 * whether the API key should be used as the username or password.
 */
export type GetProviderFieldUsed = ClosedEnum<typeof GetProviderFieldUsed>;

/**
 * when this object is present, it means that this provider uses Basic Auth to actually collect an API key
 */
export type GetProviderAPIKeyAsBasicOptions = {
  /**
   * whether the API key should be used as the username or password.
   */
  fieldUsed?: GetProviderFieldUsed | undefined;
  /**
   * How to transform the API key in to a basic auth user:pass string. The %s is replaced with the API key value.
   */
  keyFormat?: string | undefined;
};

/**
 * Configuration for Basic Auth. Optional.
 */
export type GetProviderBasicAuthOptions = {
  /**
   * If true, the provider uses an API key which then gets encoded as a basic auth user:pass string.
   */
  apiKeyAsBasic?: boolean | undefined;
  /**
   * when this object is present, it means that this provider uses Basic Auth to actually collect an API key
   */
  apiKeyAsBasicOpts?: GetProviderAPIKeyAsBasicOptions | undefined;
  /**
   * URL with more information about how to get or use an API key.
   */
  docsURL?: string | undefined;
};

export type GetProviderBulkWriteSupport = {
  insert: boolean;
  update: boolean;
  upsert: boolean;
  delete: boolean;
};

export type GetProviderSubscribeSupport = {
  create?: boolean | undefined;
  update?: boolean | undefined;
  delete?: boolean | undefined;
  passThrough?: boolean | undefined;
};

/**
 * The supported features for the provider.
 */
export type GetProviderSupport = {
  bulkWrite: GetProviderBulkWriteSupport;
  proxy: boolean;
  read: boolean;
  subscribe: boolean;
  write: boolean;
  subscribeSupport?: GetProviderSubscribeSupport | undefined;
};

/**
 * A URL to check the health of a provider's credentials. It's used to see if the credentials are valid and if the provider is reachable.
 */
export type GetProviderAuthHealthCheck = {
  /**
   * a no-op URL to check the health of the credentials. The URL MUST not mutate any state. If the provider doesn't have such an endpoint, then don't provide credentialsHealthCheck.
   */
  url: string;
  /**
   * The HTTP method to use for the health check. If not set, defaults to GET.
   */
  method?: string | undefined;
  /**
   * The HTTP status codes that indicate a successful health check. If not set, defaults to 200 and 204.
   */
  successStatusCodes?: Array<number> | undefined;
};

/**
 * Media for light/regular mode.
 */
export type GetProviderMediaTypeRegular = {
  /**
   * URL to the icon for the provider.
   */
  iconURL?: string | undefined;
  /**
   * URL to the logo for the provider.
   */
  logoURL?: string | undefined;
};

/**
 * Media to be used in dark mode.
 */
export type GetProviderMediaTypeDarkMode = {
  /**
   * URL to the icon for the provider that is to be used in dark mode.
   */
  iconURL?: string | undefined;
  /**
   * URL to the logo for the provider that is to be used in dark mode.
   */
  logoURL?: string | undefined;
};

export type GetProviderMedia = {
  /**
   * Media for light/regular mode.
   */
  regular?: GetProviderMediaTypeRegular | undefined;
  /**
   * Media to be used in dark mode.
   */
  darkMode?: GetProviderMediaTypeDarkMode | undefined;
};

/**
 * The scope of the subscription.
 */
export const GetProviderSubscriptionScope = {
  Integration: "integration",
  Installation: "installation",
} as const;
/**
 * The scope of the subscription.
 */
export type GetProviderSubscriptionScope = ClosedEnum<
  typeof GetProviderSubscriptionScope
>;

/**
 * The scope of the target URL.
 */
export const GetProviderTargetURLScope = {
  Integration: "integration",
  Installation: "installation",
} as const;
/**
 * The scope of the target URL.
 */
export type GetProviderTargetURLScope = ClosedEnum<
  typeof GetProviderTargetURLScope
>;

/**
 * The timing of the registration.
 */
export const GetProviderRegistrationTiming = {
  ProviderApp: "providerApp",
  Integration: "integration",
  Installation: "installation",
} as const;
/**
 * The timing of the registration.
 */
export type GetProviderRegistrationTiming = ClosedEnum<
  typeof GetProviderRegistrationTiming
>;

export type GetProviderSubscribeOptions = {
  /**
   * The scope of the subscription.
   */
  subscriptionScope: GetProviderSubscriptionScope;
  /**
   * The scope of the target URL.
   */
  targetURLScope: GetProviderTargetURLScope;
  /**
   * The timing of the registration.
   */
  registrationTiming: GetProviderRegistrationTiming;
};

export type GetProviderProvidersBulkWriteSupport = {
  insert: boolean;
  update: boolean;
  upsert: boolean;
  delete: boolean;
};

export type GetProviderProvidersSubscribeSupport = {
  create?: boolean | undefined;
  update?: boolean | undefined;
  delete?: boolean | undefined;
  passThrough?: boolean | undefined;
};

/**
 * The supported features for the provider.
 */
export type GetProviderProvidersSupport = {
  bulkWrite: GetProviderProvidersBulkWriteSupport;
  proxy: boolean;
  read: boolean;
  subscribe: boolean;
  write: boolean;
  subscribeSupport?: GetProviderProvidersSubscribeSupport | undefined;
};

export type GetProviderModuleInfo = {
  displayName: string;
  baseURL: string;
  /**
   * The supported features for the provider.
   */
  support: GetProviderProvidersSupport;
};

/**
 * Dependency for a single module.
 */
export type GetProviderModuleDependency = {};

export type GetProviderMetadataItemAsInput = {
  /**
   * The internal identifier for the metadata field
   */
  name: string;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
  /**
   * URL with more information about how to locate this value
   */
  docsURL?: string | undefined;
  /**
   * Module-specific dependencies for this metadata item.
   */
  moduleDependencies?: { [k: string]: GetProviderModuleDependency } | undefined;
};

/**
 * Dependency for a single module.
 */
export type GetProviderProvidersModuleDependency = {};

export type GetProviderMetadataItemFetchedPostAuthentication = {
  /**
   * The internal identifier for the metadata field
   */
  name: string;
  /**
   * Module-specific dependencies for this metadata item.
   */
  moduleDependencies?:
    | { [k: string]: GetProviderProvidersModuleDependency }
    | undefined;
};

/**
 * Provider metadata that needs to be given by the user or fetched by the connector post authentication for the connector to work.
 */
export type GetProviderProviderMetadata = {
  /**
   * Metadata provided as manual input
   */
  input?: Array<GetProviderMetadataItemAsInput> | undefined;
  /**
   * Metadata fetched by the connector post authentication
   */
  postAuthentication?:
    | Array<GetProviderMetadataItemFetchedPostAuthentication>
    | undefined;
};

/**
 * ProviderInfo
 */
export type GetProviderProviderInfo = {
  name: string;
  /**
   * The type of authentication required by the provider.
   */
  authType: GetProviderAuthType;
  /**
   * The base URL for making API requests.
   */
  baseURL: string;
  defaultModule?: any | undefined;
  /**
   * Configuration for OAuth2.0. Must be provided if authType is oauth2.
   */
  oauth2Opts?: GetProviderOAuth2Options | undefined;
  /**
   * Configuration for API key. Must be provided if authType is apiKey.
   */
  apiKeyOpts?: GetProviderAPIKeyOptions | undefined;
  /**
   * Configuration for Basic Auth. Optional.
   */
  basicOpts?: GetProviderBasicAuthOptions | undefined;
  /**
   * The supported features for the provider.
   */
  support: GetProviderSupport;
  /**
   * Additional provider-specific metadata.
   */
  providerOpts: { [k: string]: string };
  /**
   * A URL to check the health of a provider's credentials. It's used to see if the credentials are valid and if the provider is reachable.
   */
  authHealthCheck?: GetProviderAuthHealthCheck | undefined;
  /**
   * The display name of the provider, if omitted, defaults to provider name.
   */
  displayName?: string | undefined;
  /**
   * If true, we require additional information after auth to start making requests.
   */
  postAuthInfoNeeded?: boolean | undefined;
  media?: GetProviderMedia | undefined;
  labels?: { [k: string]: string } | undefined;
  subscribeOpts?: GetProviderSubscribeOptions | undefined;
  /**
   * The registry of provider modules.
   */
  modules?: { [k: string]: GetProviderModuleInfo } | undefined;
  /**
   * Provider metadata that needs to be given by the user or fetched by the connector post authentication for the connector to work.
   */
  metadata?: GetProviderProviderMetadata | undefined;
};

export type GetProviderResponse =
  | GetProviderProviderInfo
  | GetProviderAPIProblem;

/** @internal */
export const GetProviderRequest$inboundSchema: z.ZodType<
  GetProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
});

/** @internal */
export type GetProviderRequest$Outbound = {
  provider: string;
};

/** @internal */
export const GetProviderRequest$outboundSchema: z.ZodType<
  GetProviderRequest$Outbound,
  z.ZodTypeDef,
  GetProviderRequest
> = z.object({
  provider: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderRequest$ {
  /** @deprecated use `GetProviderRequest$inboundSchema` instead. */
  export const inboundSchema = GetProviderRequest$inboundSchema;
  /** @deprecated use `GetProviderRequest$outboundSchema` instead. */
  export const outboundSchema = GetProviderRequest$outboundSchema;
  /** @deprecated use `GetProviderRequest$Outbound` instead. */
  export type Outbound = GetProviderRequest$Outbound;
}

export function getProviderRequestToJSON(
  getProviderRequest: GetProviderRequest,
): string {
  return JSON.stringify(
    GetProviderRequest$outboundSchema.parse(getProviderRequest),
  );
}

export function getProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderRequest' from JSON`,
  );
}

/** @internal */
export const GetProviderAPIProblem$inboundSchema: z.ZodType<
  GetProviderAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetProviderAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetProviderAPIProblem$outboundSchema: z.ZodType<
  GetProviderAPIProblem$Outbound,
  z.ZodTypeDef,
  GetProviderAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAPIProblem$ {
  /** @deprecated use `GetProviderAPIProblem$inboundSchema` instead. */
  export const inboundSchema = GetProviderAPIProblem$inboundSchema;
  /** @deprecated use `GetProviderAPIProblem$outboundSchema` instead. */
  export const outboundSchema = GetProviderAPIProblem$outboundSchema;
  /** @deprecated use `GetProviderAPIProblem$Outbound` instead. */
  export type Outbound = GetProviderAPIProblem$Outbound;
}

export function getProviderAPIProblemToJSON(
  getProviderAPIProblem: GetProviderAPIProblem,
): string {
  return JSON.stringify(
    GetProviderAPIProblem$outboundSchema.parse(getProviderAPIProblem),
  );
}

export function getProviderAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderAPIProblem' from JSON`,
  );
}

/** @internal */
export const GetProviderAuthType$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderAuthType
> = z.nativeEnum(GetProviderAuthType);

/** @internal */
export const GetProviderAuthType$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderAuthType
> = GetProviderAuthType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAuthType$ {
  /** @deprecated use `GetProviderAuthType$inboundSchema` instead. */
  export const inboundSchema = GetProviderAuthType$inboundSchema;
  /** @deprecated use `GetProviderAuthType$outboundSchema` instead. */
  export const outboundSchema = GetProviderAuthType$outboundSchema;
}

/** @internal */
export const GetProviderGrantType$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderGrantType
> = z.nativeEnum(GetProviderGrantType);

/** @internal */
export const GetProviderGrantType$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderGrantType
> = GetProviderGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderGrantType$ {
  /** @deprecated use `GetProviderGrantType$inboundSchema` instead. */
  export const inboundSchema = GetProviderGrantType$inboundSchema;
  /** @deprecated use `GetProviderGrantType$outboundSchema` instead. */
  export const outboundSchema = GetProviderGrantType$outboundSchema;
}

/** @internal */
export const GetProviderOtherFields$inboundSchema: z.ZodType<
  GetProviderOtherFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  displayName: z.string(),
  path: z.string(),
  capture: z.string().optional(),
});

/** @internal */
export type GetProviderOtherFields$Outbound = {
  name: string;
  displayName: string;
  path: string;
  capture?: string | undefined;
};

/** @internal */
export const GetProviderOtherFields$outboundSchema: z.ZodType<
  GetProviderOtherFields$Outbound,
  z.ZodTypeDef,
  GetProviderOtherFields
> = z.object({
  name: z.string(),
  displayName: z.string(),
  path: z.string(),
  capture: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderOtherFields$ {
  /** @deprecated use `GetProviderOtherFields$inboundSchema` instead. */
  export const inboundSchema = GetProviderOtherFields$inboundSchema;
  /** @deprecated use `GetProviderOtherFields$outboundSchema` instead. */
  export const outboundSchema = GetProviderOtherFields$outboundSchema;
  /** @deprecated use `GetProviderOtherFields$Outbound` instead. */
  export type Outbound = GetProviderOtherFields$Outbound;
}

export function getProviderOtherFieldsToJSON(
  getProviderOtherFields: GetProviderOtherFields,
): string {
  return JSON.stringify(
    GetProviderOtherFields$outboundSchema.parse(getProviderOtherFields),
  );
}

export function getProviderOtherFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderOtherFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderOtherFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderOtherFields' from JSON`,
  );
}

/** @internal */
export const GetProviderTokenMetadataFields$inboundSchema: z.ZodType<
  GetProviderTokenMetadataFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspaceRefField: z.string().optional(),
  consumerRefField: z.string().optional(),
  scopesField: z.string().optional(),
  otherFields: z.array(z.lazy(() => GetProviderOtherFields$inboundSchema))
    .optional(),
});

/** @internal */
export type GetProviderTokenMetadataFields$Outbound = {
  workspaceRefField?: string | undefined;
  consumerRefField?: string | undefined;
  scopesField?: string | undefined;
  otherFields?: Array<GetProviderOtherFields$Outbound> | undefined;
};

/** @internal */
export const GetProviderTokenMetadataFields$outboundSchema: z.ZodType<
  GetProviderTokenMetadataFields$Outbound,
  z.ZodTypeDef,
  GetProviderTokenMetadataFields
> = z.object({
  workspaceRefField: z.string().optional(),
  consumerRefField: z.string().optional(),
  scopesField: z.string().optional(),
  otherFields: z.array(z.lazy(() => GetProviderOtherFields$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderTokenMetadataFields$ {
  /** @deprecated use `GetProviderTokenMetadataFields$inboundSchema` instead. */
  export const inboundSchema = GetProviderTokenMetadataFields$inboundSchema;
  /** @deprecated use `GetProviderTokenMetadataFields$outboundSchema` instead. */
  export const outboundSchema = GetProviderTokenMetadataFields$outboundSchema;
  /** @deprecated use `GetProviderTokenMetadataFields$Outbound` instead. */
  export type Outbound = GetProviderTokenMetadataFields$Outbound;
}

export function getProviderTokenMetadataFieldsToJSON(
  getProviderTokenMetadataFields: GetProviderTokenMetadataFields,
): string {
  return JSON.stringify(
    GetProviderTokenMetadataFields$outboundSchema.parse(
      getProviderTokenMetadataFields,
    ),
  );
}

export function getProviderTokenMetadataFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderTokenMetadataFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderTokenMetadataFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderTokenMetadataFields' from JSON`,
  );
}

/** @internal */
export const GetProviderOAuth2Options$inboundSchema: z.ZodType<
  GetProviderOAuth2Options,
  z.ZodTypeDef,
  unknown
> = z.object({
  grantType: GetProviderGrantType$inboundSchema,
  authURL: z.string().optional(),
  tokenURL: z.string(),
  explicitScopesRequired: z.boolean(),
  explicitWorkspaceRequired: z.boolean(),
  audience: z.array(z.string()).optional(),
  tokenMetadataFields: z.lazy(() =>
    GetProviderTokenMetadataFields$inboundSchema
  ),
  docsURL: z.string().optional(),
  authURLParams: z.record(z.string()).optional(),
});

/** @internal */
export type GetProviderOAuth2Options$Outbound = {
  grantType: string;
  authURL?: string | undefined;
  tokenURL: string;
  explicitScopesRequired: boolean;
  explicitWorkspaceRequired: boolean;
  audience?: Array<string> | undefined;
  tokenMetadataFields: GetProviderTokenMetadataFields$Outbound;
  docsURL?: string | undefined;
  authURLParams?: { [k: string]: string } | undefined;
};

/** @internal */
export const GetProviderOAuth2Options$outboundSchema: z.ZodType<
  GetProviderOAuth2Options$Outbound,
  z.ZodTypeDef,
  GetProviderOAuth2Options
> = z.object({
  grantType: GetProviderGrantType$outboundSchema,
  authURL: z.string().optional(),
  tokenURL: z.string(),
  explicitScopesRequired: z.boolean(),
  explicitWorkspaceRequired: z.boolean(),
  audience: z.array(z.string()).optional(),
  tokenMetadataFields: z.lazy(() =>
    GetProviderTokenMetadataFields$outboundSchema
  ),
  docsURL: z.string().optional(),
  authURLParams: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderOAuth2Options$ {
  /** @deprecated use `GetProviderOAuth2Options$inboundSchema` instead. */
  export const inboundSchema = GetProviderOAuth2Options$inboundSchema;
  /** @deprecated use `GetProviderOAuth2Options$outboundSchema` instead. */
  export const outboundSchema = GetProviderOAuth2Options$outboundSchema;
  /** @deprecated use `GetProviderOAuth2Options$Outbound` instead. */
  export type Outbound = GetProviderOAuth2Options$Outbound;
}

export function getProviderOAuth2OptionsToJSON(
  getProviderOAuth2Options: GetProviderOAuth2Options,
): string {
  return JSON.stringify(
    GetProviderOAuth2Options$outboundSchema.parse(getProviderOAuth2Options),
  );
}

export function getProviderOAuth2OptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderOAuth2Options, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderOAuth2Options$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderOAuth2Options' from JSON`,
  );
}

/** @internal */
export const GetProviderAttachmentType$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderAttachmentType
> = z.nativeEnum(GetProviderAttachmentType);

/** @internal */
export const GetProviderAttachmentType$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderAttachmentType
> = GetProviderAttachmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAttachmentType$ {
  /** @deprecated use `GetProviderAttachmentType$inboundSchema` instead. */
  export const inboundSchema = GetProviderAttachmentType$inboundSchema;
  /** @deprecated use `GetProviderAttachmentType$outboundSchema` instead. */
  export const outboundSchema = GetProviderAttachmentType$outboundSchema;
}

/** @internal */
export const GetProviderAPIKeyQueryOptions$inboundSchema: z.ZodType<
  GetProviderAPIKeyQueryOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type GetProviderAPIKeyQueryOptions$Outbound = {
  name: string;
};

/** @internal */
export const GetProviderAPIKeyQueryOptions$outboundSchema: z.ZodType<
  GetProviderAPIKeyQueryOptions$Outbound,
  z.ZodTypeDef,
  GetProviderAPIKeyQueryOptions
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAPIKeyQueryOptions$ {
  /** @deprecated use `GetProviderAPIKeyQueryOptions$inboundSchema` instead. */
  export const inboundSchema = GetProviderAPIKeyQueryOptions$inboundSchema;
  /** @deprecated use `GetProviderAPIKeyQueryOptions$outboundSchema` instead. */
  export const outboundSchema = GetProviderAPIKeyQueryOptions$outboundSchema;
  /** @deprecated use `GetProviderAPIKeyQueryOptions$Outbound` instead. */
  export type Outbound = GetProviderAPIKeyQueryOptions$Outbound;
}

export function getProviderAPIKeyQueryOptionsToJSON(
  getProviderAPIKeyQueryOptions: GetProviderAPIKeyQueryOptions,
): string {
  return JSON.stringify(
    GetProviderAPIKeyQueryOptions$outboundSchema.parse(
      getProviderAPIKeyQueryOptions,
    ),
  );
}

export function getProviderAPIKeyQueryOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderAPIKeyQueryOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderAPIKeyQueryOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderAPIKeyQueryOptions' from JSON`,
  );
}

/** @internal */
export const GetProviderAPIKeyHeaderOptions$inboundSchema: z.ZodType<
  GetProviderAPIKeyHeaderOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  valuePrefix: z.string().optional(),
});

/** @internal */
export type GetProviderAPIKeyHeaderOptions$Outbound = {
  name: string;
  valuePrefix?: string | undefined;
};

/** @internal */
export const GetProviderAPIKeyHeaderOptions$outboundSchema: z.ZodType<
  GetProviderAPIKeyHeaderOptions$Outbound,
  z.ZodTypeDef,
  GetProviderAPIKeyHeaderOptions
> = z.object({
  name: z.string(),
  valuePrefix: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAPIKeyHeaderOptions$ {
  /** @deprecated use `GetProviderAPIKeyHeaderOptions$inboundSchema` instead. */
  export const inboundSchema = GetProviderAPIKeyHeaderOptions$inboundSchema;
  /** @deprecated use `GetProviderAPIKeyHeaderOptions$outboundSchema` instead. */
  export const outboundSchema = GetProviderAPIKeyHeaderOptions$outboundSchema;
  /** @deprecated use `GetProviderAPIKeyHeaderOptions$Outbound` instead. */
  export type Outbound = GetProviderAPIKeyHeaderOptions$Outbound;
}

export function getProviderAPIKeyHeaderOptionsToJSON(
  getProviderAPIKeyHeaderOptions: GetProviderAPIKeyHeaderOptions,
): string {
  return JSON.stringify(
    GetProviderAPIKeyHeaderOptions$outboundSchema.parse(
      getProviderAPIKeyHeaderOptions,
    ),
  );
}

export function getProviderAPIKeyHeaderOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderAPIKeyHeaderOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderAPIKeyHeaderOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderAPIKeyHeaderOptions' from JSON`,
  );
}

/** @internal */
export const GetProviderAPIKeyOptions$inboundSchema: z.ZodType<
  GetProviderAPIKeyOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachmentType: GetProviderAttachmentType$inboundSchema,
  query: z.lazy(() => GetProviderAPIKeyQueryOptions$inboundSchema).optional(),
  header: z.lazy(() => GetProviderAPIKeyHeaderOptions$inboundSchema).optional(),
  docsURL: z.string().optional(),
});

/** @internal */
export type GetProviderAPIKeyOptions$Outbound = {
  attachmentType: string;
  query?: GetProviderAPIKeyQueryOptions$Outbound | undefined;
  header?: GetProviderAPIKeyHeaderOptions$Outbound | undefined;
  docsURL?: string | undefined;
};

/** @internal */
export const GetProviderAPIKeyOptions$outboundSchema: z.ZodType<
  GetProviderAPIKeyOptions$Outbound,
  z.ZodTypeDef,
  GetProviderAPIKeyOptions
> = z.object({
  attachmentType: GetProviderAttachmentType$outboundSchema,
  query: z.lazy(() => GetProviderAPIKeyQueryOptions$outboundSchema).optional(),
  header: z.lazy(() => GetProviderAPIKeyHeaderOptions$outboundSchema)
    .optional(),
  docsURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAPIKeyOptions$ {
  /** @deprecated use `GetProviderAPIKeyOptions$inboundSchema` instead. */
  export const inboundSchema = GetProviderAPIKeyOptions$inboundSchema;
  /** @deprecated use `GetProviderAPIKeyOptions$outboundSchema` instead. */
  export const outboundSchema = GetProviderAPIKeyOptions$outboundSchema;
  /** @deprecated use `GetProviderAPIKeyOptions$Outbound` instead. */
  export type Outbound = GetProviderAPIKeyOptions$Outbound;
}

export function getProviderAPIKeyOptionsToJSON(
  getProviderAPIKeyOptions: GetProviderAPIKeyOptions,
): string {
  return JSON.stringify(
    GetProviderAPIKeyOptions$outboundSchema.parse(getProviderAPIKeyOptions),
  );
}

export function getProviderAPIKeyOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderAPIKeyOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderAPIKeyOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderAPIKeyOptions' from JSON`,
  );
}

/** @internal */
export const GetProviderFieldUsed$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderFieldUsed
> = z.nativeEnum(GetProviderFieldUsed);

/** @internal */
export const GetProviderFieldUsed$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderFieldUsed
> = GetProviderFieldUsed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderFieldUsed$ {
  /** @deprecated use `GetProviderFieldUsed$inboundSchema` instead. */
  export const inboundSchema = GetProviderFieldUsed$inboundSchema;
  /** @deprecated use `GetProviderFieldUsed$outboundSchema` instead. */
  export const outboundSchema = GetProviderFieldUsed$outboundSchema;
}

/** @internal */
export const GetProviderAPIKeyAsBasicOptions$inboundSchema: z.ZodType<
  GetProviderAPIKeyAsBasicOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldUsed: GetProviderFieldUsed$inboundSchema.optional(),
  keyFormat: z.string().optional(),
});

/** @internal */
export type GetProviderAPIKeyAsBasicOptions$Outbound = {
  fieldUsed?: string | undefined;
  keyFormat?: string | undefined;
};

/** @internal */
export const GetProviderAPIKeyAsBasicOptions$outboundSchema: z.ZodType<
  GetProviderAPIKeyAsBasicOptions$Outbound,
  z.ZodTypeDef,
  GetProviderAPIKeyAsBasicOptions
> = z.object({
  fieldUsed: GetProviderFieldUsed$outboundSchema.optional(),
  keyFormat: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAPIKeyAsBasicOptions$ {
  /** @deprecated use `GetProviderAPIKeyAsBasicOptions$inboundSchema` instead. */
  export const inboundSchema = GetProviderAPIKeyAsBasicOptions$inboundSchema;
  /** @deprecated use `GetProviderAPIKeyAsBasicOptions$outboundSchema` instead. */
  export const outboundSchema = GetProviderAPIKeyAsBasicOptions$outboundSchema;
  /** @deprecated use `GetProviderAPIKeyAsBasicOptions$Outbound` instead. */
  export type Outbound = GetProviderAPIKeyAsBasicOptions$Outbound;
}

export function getProviderAPIKeyAsBasicOptionsToJSON(
  getProviderAPIKeyAsBasicOptions: GetProviderAPIKeyAsBasicOptions,
): string {
  return JSON.stringify(
    GetProviderAPIKeyAsBasicOptions$outboundSchema.parse(
      getProviderAPIKeyAsBasicOptions,
    ),
  );
}

export function getProviderAPIKeyAsBasicOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderAPIKeyAsBasicOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderAPIKeyAsBasicOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderAPIKeyAsBasicOptions' from JSON`,
  );
}

/** @internal */
export const GetProviderBasicAuthOptions$inboundSchema: z.ZodType<
  GetProviderBasicAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKeyAsBasic: z.boolean().optional(),
  apiKeyAsBasicOpts: z.lazy(() => GetProviderAPIKeyAsBasicOptions$inboundSchema)
    .optional(),
  docsURL: z.string().optional(),
});

/** @internal */
export type GetProviderBasicAuthOptions$Outbound = {
  apiKeyAsBasic?: boolean | undefined;
  apiKeyAsBasicOpts?: GetProviderAPIKeyAsBasicOptions$Outbound | undefined;
  docsURL?: string | undefined;
};

/** @internal */
export const GetProviderBasicAuthOptions$outboundSchema: z.ZodType<
  GetProviderBasicAuthOptions$Outbound,
  z.ZodTypeDef,
  GetProviderBasicAuthOptions
> = z.object({
  apiKeyAsBasic: z.boolean().optional(),
  apiKeyAsBasicOpts: z.lazy(() =>
    GetProviderAPIKeyAsBasicOptions$outboundSchema
  ).optional(),
  docsURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderBasicAuthOptions$ {
  /** @deprecated use `GetProviderBasicAuthOptions$inboundSchema` instead. */
  export const inboundSchema = GetProviderBasicAuthOptions$inboundSchema;
  /** @deprecated use `GetProviderBasicAuthOptions$outboundSchema` instead. */
  export const outboundSchema = GetProviderBasicAuthOptions$outboundSchema;
  /** @deprecated use `GetProviderBasicAuthOptions$Outbound` instead. */
  export type Outbound = GetProviderBasicAuthOptions$Outbound;
}

export function getProviderBasicAuthOptionsToJSON(
  getProviderBasicAuthOptions: GetProviderBasicAuthOptions,
): string {
  return JSON.stringify(
    GetProviderBasicAuthOptions$outboundSchema.parse(
      getProviderBasicAuthOptions,
    ),
  );
}

export function getProviderBasicAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderBasicAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderBasicAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderBasicAuthOptions' from JSON`,
  );
}

/** @internal */
export const GetProviderBulkWriteSupport$inboundSchema: z.ZodType<
  GetProviderBulkWriteSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  insert: z.boolean(),
  update: z.boolean(),
  upsert: z.boolean(),
  delete: z.boolean(),
});

/** @internal */
export type GetProviderBulkWriteSupport$Outbound = {
  insert: boolean;
  update: boolean;
  upsert: boolean;
  delete: boolean;
};

/** @internal */
export const GetProviderBulkWriteSupport$outboundSchema: z.ZodType<
  GetProviderBulkWriteSupport$Outbound,
  z.ZodTypeDef,
  GetProviderBulkWriteSupport
> = z.object({
  insert: z.boolean(),
  update: z.boolean(),
  upsert: z.boolean(),
  delete: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderBulkWriteSupport$ {
  /** @deprecated use `GetProviderBulkWriteSupport$inboundSchema` instead. */
  export const inboundSchema = GetProviderBulkWriteSupport$inboundSchema;
  /** @deprecated use `GetProviderBulkWriteSupport$outboundSchema` instead. */
  export const outboundSchema = GetProviderBulkWriteSupport$outboundSchema;
  /** @deprecated use `GetProviderBulkWriteSupport$Outbound` instead. */
  export type Outbound = GetProviderBulkWriteSupport$Outbound;
}

export function getProviderBulkWriteSupportToJSON(
  getProviderBulkWriteSupport: GetProviderBulkWriteSupport,
): string {
  return JSON.stringify(
    GetProviderBulkWriteSupport$outboundSchema.parse(
      getProviderBulkWriteSupport,
    ),
  );
}

export function getProviderBulkWriteSupportFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderBulkWriteSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderBulkWriteSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderBulkWriteSupport' from JSON`,
  );
}

/** @internal */
export const GetProviderSubscribeSupport$inboundSchema: z.ZodType<
  GetProviderSubscribeSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  create: z.boolean().optional(),
  update: z.boolean().optional(),
  delete: z.boolean().optional(),
  passThrough: z.boolean().optional(),
});

/** @internal */
export type GetProviderSubscribeSupport$Outbound = {
  create?: boolean | undefined;
  update?: boolean | undefined;
  delete?: boolean | undefined;
  passThrough?: boolean | undefined;
};

/** @internal */
export const GetProviderSubscribeSupport$outboundSchema: z.ZodType<
  GetProviderSubscribeSupport$Outbound,
  z.ZodTypeDef,
  GetProviderSubscribeSupport
> = z.object({
  create: z.boolean().optional(),
  update: z.boolean().optional(),
  delete: z.boolean().optional(),
  passThrough: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderSubscribeSupport$ {
  /** @deprecated use `GetProviderSubscribeSupport$inboundSchema` instead. */
  export const inboundSchema = GetProviderSubscribeSupport$inboundSchema;
  /** @deprecated use `GetProviderSubscribeSupport$outboundSchema` instead. */
  export const outboundSchema = GetProviderSubscribeSupport$outboundSchema;
  /** @deprecated use `GetProviderSubscribeSupport$Outbound` instead. */
  export type Outbound = GetProviderSubscribeSupport$Outbound;
}

export function getProviderSubscribeSupportToJSON(
  getProviderSubscribeSupport: GetProviderSubscribeSupport,
): string {
  return JSON.stringify(
    GetProviderSubscribeSupport$outboundSchema.parse(
      getProviderSubscribeSupport,
    ),
  );
}

export function getProviderSubscribeSupportFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderSubscribeSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderSubscribeSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderSubscribeSupport' from JSON`,
  );
}

/** @internal */
export const GetProviderSupport$inboundSchema: z.ZodType<
  GetProviderSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  bulkWrite: z.lazy(() => GetProviderBulkWriteSupport$inboundSchema),
  proxy: z.boolean(),
  read: z.boolean(),
  subscribe: z.boolean(),
  write: z.boolean(),
  subscribeSupport: z.lazy(() => GetProviderSubscribeSupport$inboundSchema)
    .optional(),
});

/** @internal */
export type GetProviderSupport$Outbound = {
  bulkWrite: GetProviderBulkWriteSupport$Outbound;
  proxy: boolean;
  read: boolean;
  subscribe: boolean;
  write: boolean;
  subscribeSupport?: GetProviderSubscribeSupport$Outbound | undefined;
};

/** @internal */
export const GetProviderSupport$outboundSchema: z.ZodType<
  GetProviderSupport$Outbound,
  z.ZodTypeDef,
  GetProviderSupport
> = z.object({
  bulkWrite: z.lazy(() => GetProviderBulkWriteSupport$outboundSchema),
  proxy: z.boolean(),
  read: z.boolean(),
  subscribe: z.boolean(),
  write: z.boolean(),
  subscribeSupport: z.lazy(() => GetProviderSubscribeSupport$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderSupport$ {
  /** @deprecated use `GetProviderSupport$inboundSchema` instead. */
  export const inboundSchema = GetProviderSupport$inboundSchema;
  /** @deprecated use `GetProviderSupport$outboundSchema` instead. */
  export const outboundSchema = GetProviderSupport$outboundSchema;
  /** @deprecated use `GetProviderSupport$Outbound` instead. */
  export type Outbound = GetProviderSupport$Outbound;
}

export function getProviderSupportToJSON(
  getProviderSupport: GetProviderSupport,
): string {
  return JSON.stringify(
    GetProviderSupport$outboundSchema.parse(getProviderSupport),
  );
}

export function getProviderSupportFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderSupport' from JSON`,
  );
}

/** @internal */
export const GetProviderAuthHealthCheck$inboundSchema: z.ZodType<
  GetProviderAuthHealthCheck,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  method: z.string().optional(),
  successStatusCodes: z.array(z.number().int()).optional(),
});

/** @internal */
export type GetProviderAuthHealthCheck$Outbound = {
  url: string;
  method?: string | undefined;
  successStatusCodes?: Array<number> | undefined;
};

/** @internal */
export const GetProviderAuthHealthCheck$outboundSchema: z.ZodType<
  GetProviderAuthHealthCheck$Outbound,
  z.ZodTypeDef,
  GetProviderAuthHealthCheck
> = z.object({
  url: z.string(),
  method: z.string().optional(),
  successStatusCodes: z.array(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAuthHealthCheck$ {
  /** @deprecated use `GetProviderAuthHealthCheck$inboundSchema` instead. */
  export const inboundSchema = GetProviderAuthHealthCheck$inboundSchema;
  /** @deprecated use `GetProviderAuthHealthCheck$outboundSchema` instead. */
  export const outboundSchema = GetProviderAuthHealthCheck$outboundSchema;
  /** @deprecated use `GetProviderAuthHealthCheck$Outbound` instead. */
  export type Outbound = GetProviderAuthHealthCheck$Outbound;
}

export function getProviderAuthHealthCheckToJSON(
  getProviderAuthHealthCheck: GetProviderAuthHealthCheck,
): string {
  return JSON.stringify(
    GetProviderAuthHealthCheck$outboundSchema.parse(getProviderAuthHealthCheck),
  );
}

export function getProviderAuthHealthCheckFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderAuthHealthCheck, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderAuthHealthCheck$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderAuthHealthCheck' from JSON`,
  );
}

/** @internal */
export const GetProviderMediaTypeRegular$inboundSchema: z.ZodType<
  GetProviderMediaTypeRegular,
  z.ZodTypeDef,
  unknown
> = z.object({
  iconURL: z.string().optional(),
  logoURL: z.string().optional(),
});

/** @internal */
export type GetProviderMediaTypeRegular$Outbound = {
  iconURL?: string | undefined;
  logoURL?: string | undefined;
};

/** @internal */
export const GetProviderMediaTypeRegular$outboundSchema: z.ZodType<
  GetProviderMediaTypeRegular$Outbound,
  z.ZodTypeDef,
  GetProviderMediaTypeRegular
> = z.object({
  iconURL: z.string().optional(),
  logoURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderMediaTypeRegular$ {
  /** @deprecated use `GetProviderMediaTypeRegular$inboundSchema` instead. */
  export const inboundSchema = GetProviderMediaTypeRegular$inboundSchema;
  /** @deprecated use `GetProviderMediaTypeRegular$outboundSchema` instead. */
  export const outboundSchema = GetProviderMediaTypeRegular$outboundSchema;
  /** @deprecated use `GetProviderMediaTypeRegular$Outbound` instead. */
  export type Outbound = GetProviderMediaTypeRegular$Outbound;
}

export function getProviderMediaTypeRegularToJSON(
  getProviderMediaTypeRegular: GetProviderMediaTypeRegular,
): string {
  return JSON.stringify(
    GetProviderMediaTypeRegular$outboundSchema.parse(
      getProviderMediaTypeRegular,
    ),
  );
}

export function getProviderMediaTypeRegularFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderMediaTypeRegular, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderMediaTypeRegular$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderMediaTypeRegular' from JSON`,
  );
}

/** @internal */
export const GetProviderMediaTypeDarkMode$inboundSchema: z.ZodType<
  GetProviderMediaTypeDarkMode,
  z.ZodTypeDef,
  unknown
> = z.object({
  iconURL: z.string().optional(),
  logoURL: z.string().optional(),
});

/** @internal */
export type GetProviderMediaTypeDarkMode$Outbound = {
  iconURL?: string | undefined;
  logoURL?: string | undefined;
};

/** @internal */
export const GetProviderMediaTypeDarkMode$outboundSchema: z.ZodType<
  GetProviderMediaTypeDarkMode$Outbound,
  z.ZodTypeDef,
  GetProviderMediaTypeDarkMode
> = z.object({
  iconURL: z.string().optional(),
  logoURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderMediaTypeDarkMode$ {
  /** @deprecated use `GetProviderMediaTypeDarkMode$inboundSchema` instead. */
  export const inboundSchema = GetProviderMediaTypeDarkMode$inboundSchema;
  /** @deprecated use `GetProviderMediaTypeDarkMode$outboundSchema` instead. */
  export const outboundSchema = GetProviderMediaTypeDarkMode$outboundSchema;
  /** @deprecated use `GetProviderMediaTypeDarkMode$Outbound` instead. */
  export type Outbound = GetProviderMediaTypeDarkMode$Outbound;
}

export function getProviderMediaTypeDarkModeToJSON(
  getProviderMediaTypeDarkMode: GetProviderMediaTypeDarkMode,
): string {
  return JSON.stringify(
    GetProviderMediaTypeDarkMode$outboundSchema.parse(
      getProviderMediaTypeDarkMode,
    ),
  );
}

export function getProviderMediaTypeDarkModeFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderMediaTypeDarkMode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderMediaTypeDarkMode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderMediaTypeDarkMode' from JSON`,
  );
}

/** @internal */
export const GetProviderMedia$inboundSchema: z.ZodType<
  GetProviderMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  regular: z.lazy(() => GetProviderMediaTypeRegular$inboundSchema).optional(),
  darkMode: z.lazy(() => GetProviderMediaTypeDarkMode$inboundSchema).optional(),
});

/** @internal */
export type GetProviderMedia$Outbound = {
  regular?: GetProviderMediaTypeRegular$Outbound | undefined;
  darkMode?: GetProviderMediaTypeDarkMode$Outbound | undefined;
};

/** @internal */
export const GetProviderMedia$outboundSchema: z.ZodType<
  GetProviderMedia$Outbound,
  z.ZodTypeDef,
  GetProviderMedia
> = z.object({
  regular: z.lazy(() => GetProviderMediaTypeRegular$outboundSchema).optional(),
  darkMode: z.lazy(() => GetProviderMediaTypeDarkMode$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderMedia$ {
  /** @deprecated use `GetProviderMedia$inboundSchema` instead. */
  export const inboundSchema = GetProviderMedia$inboundSchema;
  /** @deprecated use `GetProviderMedia$outboundSchema` instead. */
  export const outboundSchema = GetProviderMedia$outboundSchema;
  /** @deprecated use `GetProviderMedia$Outbound` instead. */
  export type Outbound = GetProviderMedia$Outbound;
}

export function getProviderMediaToJSON(
  getProviderMedia: GetProviderMedia,
): string {
  return JSON.stringify(
    GetProviderMedia$outboundSchema.parse(getProviderMedia),
  );
}

export function getProviderMediaFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderMedia' from JSON`,
  );
}

/** @internal */
export const GetProviderSubscriptionScope$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderSubscriptionScope
> = z.nativeEnum(GetProviderSubscriptionScope);

/** @internal */
export const GetProviderSubscriptionScope$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderSubscriptionScope
> = GetProviderSubscriptionScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderSubscriptionScope$ {
  /** @deprecated use `GetProviderSubscriptionScope$inboundSchema` instead. */
  export const inboundSchema = GetProviderSubscriptionScope$inboundSchema;
  /** @deprecated use `GetProviderSubscriptionScope$outboundSchema` instead. */
  export const outboundSchema = GetProviderSubscriptionScope$outboundSchema;
}

/** @internal */
export const GetProviderTargetURLScope$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderTargetURLScope
> = z.nativeEnum(GetProviderTargetURLScope);

/** @internal */
export const GetProviderTargetURLScope$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderTargetURLScope
> = GetProviderTargetURLScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderTargetURLScope$ {
  /** @deprecated use `GetProviderTargetURLScope$inboundSchema` instead. */
  export const inboundSchema = GetProviderTargetURLScope$inboundSchema;
  /** @deprecated use `GetProviderTargetURLScope$outboundSchema` instead. */
  export const outboundSchema = GetProviderTargetURLScope$outboundSchema;
}

/** @internal */
export const GetProviderRegistrationTiming$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderRegistrationTiming
> = z.nativeEnum(GetProviderRegistrationTiming);

/** @internal */
export const GetProviderRegistrationTiming$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderRegistrationTiming
> = GetProviderRegistrationTiming$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderRegistrationTiming$ {
  /** @deprecated use `GetProviderRegistrationTiming$inboundSchema` instead. */
  export const inboundSchema = GetProviderRegistrationTiming$inboundSchema;
  /** @deprecated use `GetProviderRegistrationTiming$outboundSchema` instead. */
  export const outboundSchema = GetProviderRegistrationTiming$outboundSchema;
}

/** @internal */
export const GetProviderSubscribeOptions$inboundSchema: z.ZodType<
  GetProviderSubscribeOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriptionScope: GetProviderSubscriptionScope$inboundSchema,
  targetURLScope: GetProviderTargetURLScope$inboundSchema,
  registrationTiming: GetProviderRegistrationTiming$inboundSchema,
});

/** @internal */
export type GetProviderSubscribeOptions$Outbound = {
  subscriptionScope: string;
  targetURLScope: string;
  registrationTiming: string;
};

/** @internal */
export const GetProviderSubscribeOptions$outboundSchema: z.ZodType<
  GetProviderSubscribeOptions$Outbound,
  z.ZodTypeDef,
  GetProviderSubscribeOptions
> = z.object({
  subscriptionScope: GetProviderSubscriptionScope$outboundSchema,
  targetURLScope: GetProviderTargetURLScope$outboundSchema,
  registrationTiming: GetProviderRegistrationTiming$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderSubscribeOptions$ {
  /** @deprecated use `GetProviderSubscribeOptions$inboundSchema` instead. */
  export const inboundSchema = GetProviderSubscribeOptions$inboundSchema;
  /** @deprecated use `GetProviderSubscribeOptions$outboundSchema` instead. */
  export const outboundSchema = GetProviderSubscribeOptions$outboundSchema;
  /** @deprecated use `GetProviderSubscribeOptions$Outbound` instead. */
  export type Outbound = GetProviderSubscribeOptions$Outbound;
}

export function getProviderSubscribeOptionsToJSON(
  getProviderSubscribeOptions: GetProviderSubscribeOptions,
): string {
  return JSON.stringify(
    GetProviderSubscribeOptions$outboundSchema.parse(
      getProviderSubscribeOptions,
    ),
  );
}

export function getProviderSubscribeOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderSubscribeOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderSubscribeOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderSubscribeOptions' from JSON`,
  );
}

/** @internal */
export const GetProviderProvidersBulkWriteSupport$inboundSchema: z.ZodType<
  GetProviderProvidersBulkWriteSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  insert: z.boolean(),
  update: z.boolean(),
  upsert: z.boolean(),
  delete: z.boolean(),
});

/** @internal */
export type GetProviderProvidersBulkWriteSupport$Outbound = {
  insert: boolean;
  update: boolean;
  upsert: boolean;
  delete: boolean;
};

/** @internal */
export const GetProviderProvidersBulkWriteSupport$outboundSchema: z.ZodType<
  GetProviderProvidersBulkWriteSupport$Outbound,
  z.ZodTypeDef,
  GetProviderProvidersBulkWriteSupport
> = z.object({
  insert: z.boolean(),
  update: z.boolean(),
  upsert: z.boolean(),
  delete: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderProvidersBulkWriteSupport$ {
  /** @deprecated use `GetProviderProvidersBulkWriteSupport$inboundSchema` instead. */
  export const inboundSchema =
    GetProviderProvidersBulkWriteSupport$inboundSchema;
  /** @deprecated use `GetProviderProvidersBulkWriteSupport$outboundSchema` instead. */
  export const outboundSchema =
    GetProviderProvidersBulkWriteSupport$outboundSchema;
  /** @deprecated use `GetProviderProvidersBulkWriteSupport$Outbound` instead. */
  export type Outbound = GetProviderProvidersBulkWriteSupport$Outbound;
}

export function getProviderProvidersBulkWriteSupportToJSON(
  getProviderProvidersBulkWriteSupport: GetProviderProvidersBulkWriteSupport,
): string {
  return JSON.stringify(
    GetProviderProvidersBulkWriteSupport$outboundSchema.parse(
      getProviderProvidersBulkWriteSupport,
    ),
  );
}

export function getProviderProvidersBulkWriteSupportFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderProvidersBulkWriteSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetProviderProvidersBulkWriteSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderProvidersBulkWriteSupport' from JSON`,
  );
}

/** @internal */
export const GetProviderProvidersSubscribeSupport$inboundSchema: z.ZodType<
  GetProviderProvidersSubscribeSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  create: z.boolean().optional(),
  update: z.boolean().optional(),
  delete: z.boolean().optional(),
  passThrough: z.boolean().optional(),
});

/** @internal */
export type GetProviderProvidersSubscribeSupport$Outbound = {
  create?: boolean | undefined;
  update?: boolean | undefined;
  delete?: boolean | undefined;
  passThrough?: boolean | undefined;
};

/** @internal */
export const GetProviderProvidersSubscribeSupport$outboundSchema: z.ZodType<
  GetProviderProvidersSubscribeSupport$Outbound,
  z.ZodTypeDef,
  GetProviderProvidersSubscribeSupport
> = z.object({
  create: z.boolean().optional(),
  update: z.boolean().optional(),
  delete: z.boolean().optional(),
  passThrough: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderProvidersSubscribeSupport$ {
  /** @deprecated use `GetProviderProvidersSubscribeSupport$inboundSchema` instead. */
  export const inboundSchema =
    GetProviderProvidersSubscribeSupport$inboundSchema;
  /** @deprecated use `GetProviderProvidersSubscribeSupport$outboundSchema` instead. */
  export const outboundSchema =
    GetProviderProvidersSubscribeSupport$outboundSchema;
  /** @deprecated use `GetProviderProvidersSubscribeSupport$Outbound` instead. */
  export type Outbound = GetProviderProvidersSubscribeSupport$Outbound;
}

export function getProviderProvidersSubscribeSupportToJSON(
  getProviderProvidersSubscribeSupport: GetProviderProvidersSubscribeSupport,
): string {
  return JSON.stringify(
    GetProviderProvidersSubscribeSupport$outboundSchema.parse(
      getProviderProvidersSubscribeSupport,
    ),
  );
}

export function getProviderProvidersSubscribeSupportFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderProvidersSubscribeSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetProviderProvidersSubscribeSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderProvidersSubscribeSupport' from JSON`,
  );
}

/** @internal */
export const GetProviderProvidersSupport$inboundSchema: z.ZodType<
  GetProviderProvidersSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  bulkWrite: z.lazy(() => GetProviderProvidersBulkWriteSupport$inboundSchema),
  proxy: z.boolean(),
  read: z.boolean(),
  subscribe: z.boolean(),
  write: z.boolean(),
  subscribeSupport: z.lazy(() =>
    GetProviderProvidersSubscribeSupport$inboundSchema
  ).optional(),
});

/** @internal */
export type GetProviderProvidersSupport$Outbound = {
  bulkWrite: GetProviderProvidersBulkWriteSupport$Outbound;
  proxy: boolean;
  read: boolean;
  subscribe: boolean;
  write: boolean;
  subscribeSupport?: GetProviderProvidersSubscribeSupport$Outbound | undefined;
};

/** @internal */
export const GetProviderProvidersSupport$outboundSchema: z.ZodType<
  GetProviderProvidersSupport$Outbound,
  z.ZodTypeDef,
  GetProviderProvidersSupport
> = z.object({
  bulkWrite: z.lazy(() => GetProviderProvidersBulkWriteSupport$outboundSchema),
  proxy: z.boolean(),
  read: z.boolean(),
  subscribe: z.boolean(),
  write: z.boolean(),
  subscribeSupport: z.lazy(() =>
    GetProviderProvidersSubscribeSupport$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderProvidersSupport$ {
  /** @deprecated use `GetProviderProvidersSupport$inboundSchema` instead. */
  export const inboundSchema = GetProviderProvidersSupport$inboundSchema;
  /** @deprecated use `GetProviderProvidersSupport$outboundSchema` instead. */
  export const outboundSchema = GetProviderProvidersSupport$outboundSchema;
  /** @deprecated use `GetProviderProvidersSupport$Outbound` instead. */
  export type Outbound = GetProviderProvidersSupport$Outbound;
}

export function getProviderProvidersSupportToJSON(
  getProviderProvidersSupport: GetProviderProvidersSupport,
): string {
  return JSON.stringify(
    GetProviderProvidersSupport$outboundSchema.parse(
      getProviderProvidersSupport,
    ),
  );
}

export function getProviderProvidersSupportFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderProvidersSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderProvidersSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderProvidersSupport' from JSON`,
  );
}

/** @internal */
export const GetProviderModuleInfo$inboundSchema: z.ZodType<
  GetProviderModuleInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string(),
  baseURL: z.string(),
  support: z.lazy(() => GetProviderProvidersSupport$inboundSchema),
});

/** @internal */
export type GetProviderModuleInfo$Outbound = {
  displayName: string;
  baseURL: string;
  support: GetProviderProvidersSupport$Outbound;
};

/** @internal */
export const GetProviderModuleInfo$outboundSchema: z.ZodType<
  GetProviderModuleInfo$Outbound,
  z.ZodTypeDef,
  GetProviderModuleInfo
> = z.object({
  displayName: z.string(),
  baseURL: z.string(),
  support: z.lazy(() => GetProviderProvidersSupport$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderModuleInfo$ {
  /** @deprecated use `GetProviderModuleInfo$inboundSchema` instead. */
  export const inboundSchema = GetProviderModuleInfo$inboundSchema;
  /** @deprecated use `GetProviderModuleInfo$outboundSchema` instead. */
  export const outboundSchema = GetProviderModuleInfo$outboundSchema;
  /** @deprecated use `GetProviderModuleInfo$Outbound` instead. */
  export type Outbound = GetProviderModuleInfo$Outbound;
}

export function getProviderModuleInfoToJSON(
  getProviderModuleInfo: GetProviderModuleInfo,
): string {
  return JSON.stringify(
    GetProviderModuleInfo$outboundSchema.parse(getProviderModuleInfo),
  );
}

export function getProviderModuleInfoFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderModuleInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderModuleInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderModuleInfo' from JSON`,
  );
}

/** @internal */
export const GetProviderModuleDependency$inboundSchema: z.ZodType<
  GetProviderModuleDependency,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetProviderModuleDependency$Outbound = {};

/** @internal */
export const GetProviderModuleDependency$outboundSchema: z.ZodType<
  GetProviderModuleDependency$Outbound,
  z.ZodTypeDef,
  GetProviderModuleDependency
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderModuleDependency$ {
  /** @deprecated use `GetProviderModuleDependency$inboundSchema` instead. */
  export const inboundSchema = GetProviderModuleDependency$inboundSchema;
  /** @deprecated use `GetProviderModuleDependency$outboundSchema` instead. */
  export const outboundSchema = GetProviderModuleDependency$outboundSchema;
  /** @deprecated use `GetProviderModuleDependency$Outbound` instead. */
  export type Outbound = GetProviderModuleDependency$Outbound;
}

export function getProviderModuleDependencyToJSON(
  getProviderModuleDependency: GetProviderModuleDependency,
): string {
  return JSON.stringify(
    GetProviderModuleDependency$outboundSchema.parse(
      getProviderModuleDependency,
    ),
  );
}

export function getProviderModuleDependencyFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderModuleDependency, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderModuleDependency$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderModuleDependency' from JSON`,
  );
}

/** @internal */
export const GetProviderMetadataItemAsInput$inboundSchema: z.ZodType<
  GetProviderMetadataItemAsInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  docsURL: z.string().optional(),
  moduleDependencies: z.record(
    z.lazy(() => GetProviderModuleDependency$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetProviderMetadataItemAsInput$Outbound = {
  name: string;
  displayName?: string | undefined;
  docsURL?: string | undefined;
  moduleDependencies?:
    | { [k: string]: GetProviderModuleDependency$Outbound }
    | undefined;
};

/** @internal */
export const GetProviderMetadataItemAsInput$outboundSchema: z.ZodType<
  GetProviderMetadataItemAsInput$Outbound,
  z.ZodTypeDef,
  GetProviderMetadataItemAsInput
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  docsURL: z.string().optional(),
  moduleDependencies: z.record(
    z.lazy(() => GetProviderModuleDependency$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderMetadataItemAsInput$ {
  /** @deprecated use `GetProviderMetadataItemAsInput$inboundSchema` instead. */
  export const inboundSchema = GetProviderMetadataItemAsInput$inboundSchema;
  /** @deprecated use `GetProviderMetadataItemAsInput$outboundSchema` instead. */
  export const outboundSchema = GetProviderMetadataItemAsInput$outboundSchema;
  /** @deprecated use `GetProviderMetadataItemAsInput$Outbound` instead. */
  export type Outbound = GetProviderMetadataItemAsInput$Outbound;
}

export function getProviderMetadataItemAsInputToJSON(
  getProviderMetadataItemAsInput: GetProviderMetadataItemAsInput,
): string {
  return JSON.stringify(
    GetProviderMetadataItemAsInput$outboundSchema.parse(
      getProviderMetadataItemAsInput,
    ),
  );
}

export function getProviderMetadataItemAsInputFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderMetadataItemAsInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderMetadataItemAsInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderMetadataItemAsInput' from JSON`,
  );
}

/** @internal */
export const GetProviderProvidersModuleDependency$inboundSchema: z.ZodType<
  GetProviderProvidersModuleDependency,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetProviderProvidersModuleDependency$Outbound = {};

/** @internal */
export const GetProviderProvidersModuleDependency$outboundSchema: z.ZodType<
  GetProviderProvidersModuleDependency$Outbound,
  z.ZodTypeDef,
  GetProviderProvidersModuleDependency
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderProvidersModuleDependency$ {
  /** @deprecated use `GetProviderProvidersModuleDependency$inboundSchema` instead. */
  export const inboundSchema =
    GetProviderProvidersModuleDependency$inboundSchema;
  /** @deprecated use `GetProviderProvidersModuleDependency$outboundSchema` instead. */
  export const outboundSchema =
    GetProviderProvidersModuleDependency$outboundSchema;
  /** @deprecated use `GetProviderProvidersModuleDependency$Outbound` instead. */
  export type Outbound = GetProviderProvidersModuleDependency$Outbound;
}

export function getProviderProvidersModuleDependencyToJSON(
  getProviderProvidersModuleDependency: GetProviderProvidersModuleDependency,
): string {
  return JSON.stringify(
    GetProviderProvidersModuleDependency$outboundSchema.parse(
      getProviderProvidersModuleDependency,
    ),
  );
}

export function getProviderProvidersModuleDependencyFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderProvidersModuleDependency, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetProviderProvidersModuleDependency$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderProvidersModuleDependency' from JSON`,
  );
}

/** @internal */
export const GetProviderMetadataItemFetchedPostAuthentication$inboundSchema:
  z.ZodType<
    GetProviderMetadataItemFetchedPostAuthentication,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    moduleDependencies: z.record(
      z.lazy(() => GetProviderProvidersModuleDependency$inboundSchema),
    ).optional(),
  });

/** @internal */
export type GetProviderMetadataItemFetchedPostAuthentication$Outbound = {
  name: string;
  moduleDependencies?: {
    [k: string]: GetProviderProvidersModuleDependency$Outbound;
  } | undefined;
};

/** @internal */
export const GetProviderMetadataItemFetchedPostAuthentication$outboundSchema:
  z.ZodType<
    GetProviderMetadataItemFetchedPostAuthentication$Outbound,
    z.ZodTypeDef,
    GetProviderMetadataItemFetchedPostAuthentication
  > = z.object({
    name: z.string(),
    moduleDependencies: z.record(
      z.lazy(() => GetProviderProvidersModuleDependency$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderMetadataItemFetchedPostAuthentication$ {
  /** @deprecated use `GetProviderMetadataItemFetchedPostAuthentication$inboundSchema` instead. */
  export const inboundSchema =
    GetProviderMetadataItemFetchedPostAuthentication$inboundSchema;
  /** @deprecated use `GetProviderMetadataItemFetchedPostAuthentication$outboundSchema` instead. */
  export const outboundSchema =
    GetProviderMetadataItemFetchedPostAuthentication$outboundSchema;
  /** @deprecated use `GetProviderMetadataItemFetchedPostAuthentication$Outbound` instead. */
  export type Outbound =
    GetProviderMetadataItemFetchedPostAuthentication$Outbound;
}

export function getProviderMetadataItemFetchedPostAuthenticationToJSON(
  getProviderMetadataItemFetchedPostAuthentication:
    GetProviderMetadataItemFetchedPostAuthentication,
): string {
  return JSON.stringify(
    GetProviderMetadataItemFetchedPostAuthentication$outboundSchema.parse(
      getProviderMetadataItemFetchedPostAuthentication,
    ),
  );
}

export function getProviderMetadataItemFetchedPostAuthenticationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetProviderMetadataItemFetchedPostAuthentication,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetProviderMetadataItemFetchedPostAuthentication$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetProviderMetadataItemFetchedPostAuthentication' from JSON`,
  );
}

/** @internal */
export const GetProviderProviderMetadata$inboundSchema: z.ZodType<
  GetProviderProviderMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.array(z.lazy(() => GetProviderMetadataItemAsInput$inboundSchema))
    .optional(),
  postAuthentication: z.array(
    z.lazy(() =>
      GetProviderMetadataItemFetchedPostAuthentication$inboundSchema
    ),
  ).optional(),
});

/** @internal */
export type GetProviderProviderMetadata$Outbound = {
  input?: Array<GetProviderMetadataItemAsInput$Outbound> | undefined;
  postAuthentication?:
    | Array<GetProviderMetadataItemFetchedPostAuthentication$Outbound>
    | undefined;
};

/** @internal */
export const GetProviderProviderMetadata$outboundSchema: z.ZodType<
  GetProviderProviderMetadata$Outbound,
  z.ZodTypeDef,
  GetProviderProviderMetadata
> = z.object({
  input: z.array(z.lazy(() => GetProviderMetadataItemAsInput$outboundSchema))
    .optional(),
  postAuthentication: z.array(
    z.lazy(() =>
      GetProviderMetadataItemFetchedPostAuthentication$outboundSchema
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderProviderMetadata$ {
  /** @deprecated use `GetProviderProviderMetadata$inboundSchema` instead. */
  export const inboundSchema = GetProviderProviderMetadata$inboundSchema;
  /** @deprecated use `GetProviderProviderMetadata$outboundSchema` instead. */
  export const outboundSchema = GetProviderProviderMetadata$outboundSchema;
  /** @deprecated use `GetProviderProviderMetadata$Outbound` instead. */
  export type Outbound = GetProviderProviderMetadata$Outbound;
}

export function getProviderProviderMetadataToJSON(
  getProviderProviderMetadata: GetProviderProviderMetadata,
): string {
  return JSON.stringify(
    GetProviderProviderMetadata$outboundSchema.parse(
      getProviderProviderMetadata,
    ),
  );
}

export function getProviderProviderMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderProviderMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderProviderMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderProviderMetadata' from JSON`,
  );
}

/** @internal */
export const GetProviderProviderInfo$inboundSchema: z.ZodType<
  GetProviderProviderInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  authType: GetProviderAuthType$inboundSchema,
  baseURL: z.string(),
  defaultModule: z.any().optional(),
  oauth2Opts: z.lazy(() => GetProviderOAuth2Options$inboundSchema).optional(),
  apiKeyOpts: z.lazy(() => GetProviderAPIKeyOptions$inboundSchema).optional(),
  basicOpts: z.lazy(() => GetProviderBasicAuthOptions$inboundSchema).optional(),
  support: z.lazy(() => GetProviderSupport$inboundSchema),
  providerOpts: z.record(z.string()),
  authHealthCheck: z.lazy(() => GetProviderAuthHealthCheck$inboundSchema)
    .optional(),
  displayName: z.string().optional(),
  postAuthInfoNeeded: z.boolean().optional(),
  media: z.lazy(() => GetProviderMedia$inboundSchema).optional(),
  labels: z.record(z.string()).optional(),
  subscribeOpts: z.lazy(() => GetProviderSubscribeOptions$inboundSchema)
    .optional(),
  modules: z.record(z.lazy(() => GetProviderModuleInfo$inboundSchema))
    .optional(),
  metadata: z.lazy(() => GetProviderProviderMetadata$inboundSchema).optional(),
});

/** @internal */
export type GetProviderProviderInfo$Outbound = {
  name: string;
  authType: string;
  baseURL: string;
  defaultModule?: any | undefined;
  oauth2Opts?: GetProviderOAuth2Options$Outbound | undefined;
  apiKeyOpts?: GetProviderAPIKeyOptions$Outbound | undefined;
  basicOpts?: GetProviderBasicAuthOptions$Outbound | undefined;
  support: GetProviderSupport$Outbound;
  providerOpts: { [k: string]: string };
  authHealthCheck?: GetProviderAuthHealthCheck$Outbound | undefined;
  displayName?: string | undefined;
  postAuthInfoNeeded?: boolean | undefined;
  media?: GetProviderMedia$Outbound | undefined;
  labels?: { [k: string]: string } | undefined;
  subscribeOpts?: GetProviderSubscribeOptions$Outbound | undefined;
  modules?: { [k: string]: GetProviderModuleInfo$Outbound } | undefined;
  metadata?: GetProviderProviderMetadata$Outbound | undefined;
};

/** @internal */
export const GetProviderProviderInfo$outboundSchema: z.ZodType<
  GetProviderProviderInfo$Outbound,
  z.ZodTypeDef,
  GetProviderProviderInfo
> = z.object({
  name: z.string(),
  authType: GetProviderAuthType$outboundSchema,
  baseURL: z.string(),
  defaultModule: z.any().optional(),
  oauth2Opts: z.lazy(() => GetProviderOAuth2Options$outboundSchema).optional(),
  apiKeyOpts: z.lazy(() => GetProviderAPIKeyOptions$outboundSchema).optional(),
  basicOpts: z.lazy(() => GetProviderBasicAuthOptions$outboundSchema)
    .optional(),
  support: z.lazy(() => GetProviderSupport$outboundSchema),
  providerOpts: z.record(z.string()),
  authHealthCheck: z.lazy(() => GetProviderAuthHealthCheck$outboundSchema)
    .optional(),
  displayName: z.string().optional(),
  postAuthInfoNeeded: z.boolean().optional(),
  media: z.lazy(() => GetProviderMedia$outboundSchema).optional(),
  labels: z.record(z.string()).optional(),
  subscribeOpts: z.lazy(() => GetProviderSubscribeOptions$outboundSchema)
    .optional(),
  modules: z.record(z.lazy(() => GetProviderModuleInfo$outboundSchema))
    .optional(),
  metadata: z.lazy(() => GetProviderProviderMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderProviderInfo$ {
  /** @deprecated use `GetProviderProviderInfo$inboundSchema` instead. */
  export const inboundSchema = GetProviderProviderInfo$inboundSchema;
  /** @deprecated use `GetProviderProviderInfo$outboundSchema` instead. */
  export const outboundSchema = GetProviderProviderInfo$outboundSchema;
  /** @deprecated use `GetProviderProviderInfo$Outbound` instead. */
  export type Outbound = GetProviderProviderInfo$Outbound;
}

export function getProviderProviderInfoToJSON(
  getProviderProviderInfo: GetProviderProviderInfo,
): string {
  return JSON.stringify(
    GetProviderProviderInfo$outboundSchema.parse(getProviderProviderInfo),
  );
}

export function getProviderProviderInfoFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderProviderInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderProviderInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderProviderInfo' from JSON`,
  );
}

/** @internal */
export const GetProviderResponse$inboundSchema: z.ZodType<
  GetProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetProviderProviderInfo$inboundSchema),
  z.lazy(() => GetProviderAPIProblem$inboundSchema),
]);

/** @internal */
export type GetProviderResponse$Outbound =
  | GetProviderProviderInfo$Outbound
  | GetProviderAPIProblem$Outbound;

/** @internal */
export const GetProviderResponse$outboundSchema: z.ZodType<
  GetProviderResponse$Outbound,
  z.ZodTypeDef,
  GetProviderResponse
> = z.union([
  z.lazy(() => GetProviderProviderInfo$outboundSchema),
  z.lazy(() => GetProviderAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderResponse$ {
  /** @deprecated use `GetProviderResponse$inboundSchema` instead. */
  export const inboundSchema = GetProviderResponse$inboundSchema;
  /** @deprecated use `GetProviderResponse$outboundSchema` instead. */
  export const outboundSchema = GetProviderResponse$outboundSchema;
  /** @deprecated use `GetProviderResponse$Outbound` instead. */
  export type Outbound = GetProviderResponse$Outbound;
}

export function getProviderResponseToJSON(
  getProviderResponse: GetProviderResponse,
): string {
  return JSON.stringify(
    GetProviderResponse$outboundSchema.parse(getProviderResponse),
  );
}

export function getProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderResponse' from JSON`,
  );
}
