/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListOperationLogsRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  /**
   * Operation ID.
   */
  operationId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListOperationLogsAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The log message object.
 */
export type Message = {
  /**
   * The use-readable message.
   */
  msg: string;
  /**
   * The error message, if there has been an error.
   */
  error?: string | undefined;
  /**
   * The operation ID.
   */
  operationId?: string | undefined;
};

export type Log = {
  /**
   * The time the log was created.
   */
  timestamp: string;
  /**
   * The log message object.
   */
  message: Message;
  /**
   * The severity of the log.
   */
  severity: string;
};

export type ListOperationLogsResponse =
  | ListOperationLogsAPIProblem
  | Array<Log>;

/** @internal */
export const ListOperationLogsRequest$inboundSchema: z.ZodType<
  ListOperationLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  operationId: z.string(),
});

/** @internal */
export type ListOperationLogsRequest$Outbound = {
  projectIdOrName: string;
  operationId: string;
};

/** @internal */
export const ListOperationLogsRequest$outboundSchema: z.ZodType<
  ListOperationLogsRequest$Outbound,
  z.ZodTypeDef,
  ListOperationLogsRequest
> = z.object({
  projectIdOrName: z.string(),
  operationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOperationLogsRequest$ {
  /** @deprecated use `ListOperationLogsRequest$inboundSchema` instead. */
  export const inboundSchema = ListOperationLogsRequest$inboundSchema;
  /** @deprecated use `ListOperationLogsRequest$outboundSchema` instead. */
  export const outboundSchema = ListOperationLogsRequest$outboundSchema;
  /** @deprecated use `ListOperationLogsRequest$Outbound` instead. */
  export type Outbound = ListOperationLogsRequest$Outbound;
}

export function listOperationLogsRequestToJSON(
  listOperationLogsRequest: ListOperationLogsRequest,
): string {
  return JSON.stringify(
    ListOperationLogsRequest$outboundSchema.parse(listOperationLogsRequest),
  );
}

export function listOperationLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOperationLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOperationLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOperationLogsRequest' from JSON`,
  );
}

/** @internal */
export const ListOperationLogsAPIProblem$inboundSchema: z.ZodType<
  ListOperationLogsAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListOperationLogsAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListOperationLogsAPIProblem$outboundSchema: z.ZodType<
  ListOperationLogsAPIProblem$Outbound,
  z.ZodTypeDef,
  ListOperationLogsAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOperationLogsAPIProblem$ {
  /** @deprecated use `ListOperationLogsAPIProblem$inboundSchema` instead. */
  export const inboundSchema = ListOperationLogsAPIProblem$inboundSchema;
  /** @deprecated use `ListOperationLogsAPIProblem$outboundSchema` instead. */
  export const outboundSchema = ListOperationLogsAPIProblem$outboundSchema;
  /** @deprecated use `ListOperationLogsAPIProblem$Outbound` instead. */
  export type Outbound = ListOperationLogsAPIProblem$Outbound;
}

export function listOperationLogsAPIProblemToJSON(
  listOperationLogsAPIProblem: ListOperationLogsAPIProblem,
): string {
  return JSON.stringify(
    ListOperationLogsAPIProblem$outboundSchema.parse(
      listOperationLogsAPIProblem,
    ),
  );
}

export function listOperationLogsAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<ListOperationLogsAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOperationLogsAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOperationLogsAPIProblem' from JSON`,
  );
}

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.object({
    msg: z.string(),
    error: z.string().optional(),
    operation_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "operation_id": "operationId",
    });
  });

/** @internal */
export type Message$Outbound = {
  msg: string;
  error?: string | undefined;
  operation_id?: string | undefined;
};

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.object({
  msg: z.string(),
  error: z.string().optional(),
  operationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    operationId: "operation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}

/** @internal */
export const Log$inboundSchema: z.ZodType<Log, z.ZodTypeDef, unknown> = z
  .object({
    timestamp: z.string(),
    message: z.lazy(() => Message$inboundSchema),
    severity: z.string(),
  });

/** @internal */
export type Log$Outbound = {
  timestamp: string;
  message: Message$Outbound;
  severity: string;
};

/** @internal */
export const Log$outboundSchema: z.ZodType<Log$Outbound, z.ZodTypeDef, Log> = z
  .object({
    timestamp: z.string(),
    message: z.lazy(() => Message$outboundSchema),
    severity: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Log$ {
  /** @deprecated use `Log$inboundSchema` instead. */
  export const inboundSchema = Log$inboundSchema;
  /** @deprecated use `Log$outboundSchema` instead. */
  export const outboundSchema = Log$outboundSchema;
  /** @deprecated use `Log$Outbound` instead. */
  export type Outbound = Log$Outbound;
}

export function logToJSON(log: Log): string {
  return JSON.stringify(Log$outboundSchema.parse(log));
}

export function logFromJSON(
  jsonString: string,
): SafeParseResult<Log, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Log$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Log' from JSON`,
  );
}

/** @internal */
export const ListOperationLogsResponse$inboundSchema: z.ZodType<
  ListOperationLogsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListOperationLogsAPIProblem$inboundSchema),
  z.array(z.lazy(() => Log$inboundSchema)),
]);

/** @internal */
export type ListOperationLogsResponse$Outbound =
  | ListOperationLogsAPIProblem$Outbound
  | Array<Log$Outbound>;

/** @internal */
export const ListOperationLogsResponse$outboundSchema: z.ZodType<
  ListOperationLogsResponse$Outbound,
  z.ZodTypeDef,
  ListOperationLogsResponse
> = z.union([
  z.lazy(() => ListOperationLogsAPIProblem$outboundSchema),
  z.array(z.lazy(() => Log$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOperationLogsResponse$ {
  /** @deprecated use `ListOperationLogsResponse$inboundSchema` instead. */
  export const inboundSchema = ListOperationLogsResponse$inboundSchema;
  /** @deprecated use `ListOperationLogsResponse$outboundSchema` instead. */
  export const outboundSchema = ListOperationLogsResponse$outboundSchema;
  /** @deprecated use `ListOperationLogsResponse$Outbound` instead. */
  export type Outbound = ListOperationLogsResponse$Outbound;
}

export function listOperationLogsResponseToJSON(
  listOperationLogsResponse: ListOperationLogsResponse,
): string {
  return JSON.stringify(
    ListOperationLogsResponse$outboundSchema.parse(listOperationLogsResponse),
  );
}

export function listOperationLogsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListOperationLogsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOperationLogsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOperationLogsResponse' from JSON`,
  );
}
