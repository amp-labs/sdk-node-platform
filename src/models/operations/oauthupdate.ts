/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OauthUpdateRequest = {
  /**
   * Ampersand Project ID or name.
   */
  projectIdOrName: string;
  /**
   * ID of connection to update.
   */
  connectionId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type OauthUpdateAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type OauthUpdateResponse = OauthUpdateAPIProblem | string;

/** @internal */
export const OauthUpdateRequest$inboundSchema: z.ZodType<
  OauthUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  connectionId: z.string(),
});

/** @internal */
export type OauthUpdateRequest$Outbound = {
  projectIdOrName: string;
  connectionId: string;
};

/** @internal */
export const OauthUpdateRequest$outboundSchema: z.ZodType<
  OauthUpdateRequest$Outbound,
  z.ZodTypeDef,
  OauthUpdateRequest
> = z.object({
  projectIdOrName: z.string(),
  connectionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthUpdateRequest$ {
  /** @deprecated use `OauthUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = OauthUpdateRequest$inboundSchema;
  /** @deprecated use `OauthUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = OauthUpdateRequest$outboundSchema;
  /** @deprecated use `OauthUpdateRequest$Outbound` instead. */
  export type Outbound = OauthUpdateRequest$Outbound;
}

export function oauthUpdateRequestToJSON(
  oauthUpdateRequest: OauthUpdateRequest,
): string {
  return JSON.stringify(
    OauthUpdateRequest$outboundSchema.parse(oauthUpdateRequest),
  );
}

export function oauthUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<OauthUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthUpdateRequest' from JSON`,
  );
}

/** @internal */
export const OauthUpdateAPIProblem$inboundSchema: z.ZodType<
  OauthUpdateAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type OauthUpdateAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const OauthUpdateAPIProblem$outboundSchema: z.ZodType<
  OauthUpdateAPIProblem$Outbound,
  z.ZodTypeDef,
  OauthUpdateAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthUpdateAPIProblem$ {
  /** @deprecated use `OauthUpdateAPIProblem$inboundSchema` instead. */
  export const inboundSchema = OauthUpdateAPIProblem$inboundSchema;
  /** @deprecated use `OauthUpdateAPIProblem$outboundSchema` instead. */
  export const outboundSchema = OauthUpdateAPIProblem$outboundSchema;
  /** @deprecated use `OauthUpdateAPIProblem$Outbound` instead. */
  export type Outbound = OauthUpdateAPIProblem$Outbound;
}

export function oauthUpdateAPIProblemToJSON(
  oauthUpdateAPIProblem: OauthUpdateAPIProblem,
): string {
  return JSON.stringify(
    OauthUpdateAPIProblem$outboundSchema.parse(oauthUpdateAPIProblem),
  );
}

export function oauthUpdateAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<OauthUpdateAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthUpdateAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthUpdateAPIProblem' from JSON`,
  );
}

/** @internal */
export const OauthUpdateResponse$inboundSchema: z.ZodType<
  OauthUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => OauthUpdateAPIProblem$inboundSchema), z.string()]);

/** @internal */
export type OauthUpdateResponse$Outbound =
  | OauthUpdateAPIProblem$Outbound
  | string;

/** @internal */
export const OauthUpdateResponse$outboundSchema: z.ZodType<
  OauthUpdateResponse$Outbound,
  z.ZodTypeDef,
  OauthUpdateResponse
> = z.union([z.lazy(() => OauthUpdateAPIProblem$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthUpdateResponse$ {
  /** @deprecated use `OauthUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = OauthUpdateResponse$inboundSchema;
  /** @deprecated use `OauthUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = OauthUpdateResponse$outboundSchema;
  /** @deprecated use `OauthUpdateResponse$Outbound` instead. */
  export type Outbound = OauthUpdateResponse$Outbound;
}

export function oauthUpdateResponseToJSON(
  oauthUpdateResponse: OauthUpdateResponse,
): string {
  return JSON.stringify(
    OauthUpdateResponse$outboundSchema.parse(oauthUpdateResponse),
  );
}

export function oauthUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<OauthUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthUpdateResponse' from JSON`,
  );
}
