/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListOrgBuildersRequest = {
  /**
   * ID of the organization.
   */
  orgId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListOrgBuildersAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type Builder = {
  /**
   * The builder ID.
   */
  id: string;
  /**
   * The identity provider
   */
  idpProvider: string;
  /**
   * ID used by the identity provider
   */
  idpRef: string;
  /**
   * The time that the builder joined Ampersand.
   */
  createTime: Date;
  firstName?: string | undefined;
  lastName?: string | undefined;
  fullName?: string | undefined;
  primaryEmail?: string | undefined;
};

export type ListOrgBuildersResponse =
  | ListOrgBuildersAPIProblem
  | Array<Builder>;

/** @internal */
export const ListOrgBuildersRequest$inboundSchema: z.ZodType<
  ListOrgBuildersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string(),
});

/** @internal */
export type ListOrgBuildersRequest$Outbound = {
  orgId: string;
};

/** @internal */
export const ListOrgBuildersRequest$outboundSchema: z.ZodType<
  ListOrgBuildersRequest$Outbound,
  z.ZodTypeDef,
  ListOrgBuildersRequest
> = z.object({
  orgId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgBuildersRequest$ {
  /** @deprecated use `ListOrgBuildersRequest$inboundSchema` instead. */
  export const inboundSchema = ListOrgBuildersRequest$inboundSchema;
  /** @deprecated use `ListOrgBuildersRequest$outboundSchema` instead. */
  export const outboundSchema = ListOrgBuildersRequest$outboundSchema;
  /** @deprecated use `ListOrgBuildersRequest$Outbound` instead. */
  export type Outbound = ListOrgBuildersRequest$Outbound;
}

export function listOrgBuildersRequestToJSON(
  listOrgBuildersRequest: ListOrgBuildersRequest,
): string {
  return JSON.stringify(
    ListOrgBuildersRequest$outboundSchema.parse(listOrgBuildersRequest),
  );
}

export function listOrgBuildersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOrgBuildersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrgBuildersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrgBuildersRequest' from JSON`,
  );
}

/** @internal */
export const ListOrgBuildersAPIProblem$inboundSchema: z.ZodType<
  ListOrgBuildersAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListOrgBuildersAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListOrgBuildersAPIProblem$outboundSchema: z.ZodType<
  ListOrgBuildersAPIProblem$Outbound,
  z.ZodTypeDef,
  ListOrgBuildersAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgBuildersAPIProblem$ {
  /** @deprecated use `ListOrgBuildersAPIProblem$inboundSchema` instead. */
  export const inboundSchema = ListOrgBuildersAPIProblem$inboundSchema;
  /** @deprecated use `ListOrgBuildersAPIProblem$outboundSchema` instead. */
  export const outboundSchema = ListOrgBuildersAPIProblem$outboundSchema;
  /** @deprecated use `ListOrgBuildersAPIProblem$Outbound` instead. */
  export type Outbound = ListOrgBuildersAPIProblem$Outbound;
}

export function listOrgBuildersAPIProblemToJSON(
  listOrgBuildersAPIProblem: ListOrgBuildersAPIProblem,
): string {
  return JSON.stringify(
    ListOrgBuildersAPIProblem$outboundSchema.parse(listOrgBuildersAPIProblem),
  );
}

export function listOrgBuildersAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<ListOrgBuildersAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrgBuildersAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrgBuildersAPIProblem' from JSON`,
  );
}

/** @internal */
export const Builder$inboundSchema: z.ZodType<Builder, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    idpProvider: z.string(),
    idpRef: z.string(),
    createTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    fullName: z.string().optional(),
    primaryEmail: z.string().optional(),
  });

/** @internal */
export type Builder$Outbound = {
  id: string;
  idpProvider: string;
  idpRef: string;
  createTime: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  fullName?: string | undefined;
  primaryEmail?: string | undefined;
};

/** @internal */
export const Builder$outboundSchema: z.ZodType<
  Builder$Outbound,
  z.ZodTypeDef,
  Builder
> = z.object({
  id: z.string(),
  idpProvider: z.string(),
  idpRef: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  fullName: z.string().optional(),
  primaryEmail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Builder$ {
  /** @deprecated use `Builder$inboundSchema` instead. */
  export const inboundSchema = Builder$inboundSchema;
  /** @deprecated use `Builder$outboundSchema` instead. */
  export const outboundSchema = Builder$outboundSchema;
  /** @deprecated use `Builder$Outbound` instead. */
  export type Outbound = Builder$Outbound;
}

export function builderToJSON(builder: Builder): string {
  return JSON.stringify(Builder$outboundSchema.parse(builder));
}

export function builderFromJSON(
  jsonString: string,
): SafeParseResult<Builder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Builder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Builder' from JSON`,
  );
}

/** @internal */
export const ListOrgBuildersResponse$inboundSchema: z.ZodType<
  ListOrgBuildersResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListOrgBuildersAPIProblem$inboundSchema),
  z.array(z.lazy(() => Builder$inboundSchema)),
]);

/** @internal */
export type ListOrgBuildersResponse$Outbound =
  | ListOrgBuildersAPIProblem$Outbound
  | Array<Builder$Outbound>;

/** @internal */
export const ListOrgBuildersResponse$outboundSchema: z.ZodType<
  ListOrgBuildersResponse$Outbound,
  z.ZodTypeDef,
  ListOrgBuildersResponse
> = z.union([
  z.lazy(() => ListOrgBuildersAPIProblem$outboundSchema),
  z.array(z.lazy(() => Builder$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgBuildersResponse$ {
  /** @deprecated use `ListOrgBuildersResponse$inboundSchema` instead. */
  export const inboundSchema = ListOrgBuildersResponse$inboundSchema;
  /** @deprecated use `ListOrgBuildersResponse$outboundSchema` instead. */
  export const outboundSchema = ListOrgBuildersResponse$outboundSchema;
  /** @deprecated use `ListOrgBuildersResponse$Outbound` instead. */
  export type Outbound = ListOrgBuildersResponse$Outbound;
}

export function listOrgBuildersResponseToJSON(
  listOrgBuildersResponse: ListOrgBuildersResponse,
): string {
  return JSON.stringify(
    ListOrgBuildersResponse$outboundSchema.parse(listOrgBuildersResponse),
  );
}

export function listOrgBuildersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListOrgBuildersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrgBuildersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrgBuildersResponse' from JSON`,
  );
}
