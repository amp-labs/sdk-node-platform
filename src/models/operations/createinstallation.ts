/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BaseProxyConfig = {
  enabled?: boolean | undefined;
};

export type ConfigContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider: string;
  read?: any | undefined;
  write?: any | undefined;
  proxy?: BaseProxyConfig | undefined;
};

/**
 * The config of the installation.
 */
export type Config = {
  /**
   * The ID of the revision that this config is based on. If omitted, the latest revision is assumed.
   */
  revisionId?: string | undefined;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy?: string | undefined;
  content: ConfigContent;
};

export type CreateInstallationRequestBody = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The ID of the SaaS connection tied to this installation. If omitted the default connection for this group will be used.
   */
  connectionId?: string | undefined;
  /**
   * The config of the installation.
   */
  config: Config;
};

export type CreateInstallationRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  requestBody: CreateInstallationRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type CreateInstallationAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type CreateInstallationGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type CreateInstallationProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type CreateInstallationInstallationsGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type CreateInstallationConsumer = {
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The name of the consumer.
   */
  consumerName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the consumer was created.
   */
  createTime: Date;
  /**
   * The time the consumer was last updated.
   */
  updateTime?: Date | undefined;
};

/**
 * The authentication scheme used for this connection.
 */
export const CreateInstallationAuthScheme = {
  None: "none",
  ApiKey: "apiKey",
  Basic: "basic",
  Oauth2AuthorizationCode: "oauth2/authorizationCode",
  Oauth2AuthorizationCodePKCE: "oauth2/authorizationCodePKCE",
  Oauth2ClientCredentials: "oauth2/clientCredentials",
  Oauth2Password: "oauth2/password",
} as const;
/**
 * The authentication scheme used for this connection.
 */
export type CreateInstallationAuthScheme = ClosedEnum<
  typeof CreateInstallationAuthScheme
>;

/**
 * The status of the connection.
 */
export const CreateInstallationStatus = {
  Created: "created",
  Working: "working",
  BadCredentials: "bad_credentials",
} as const;
/**
 * The status of the connection.
 */
export type CreateInstallationStatus = ClosedEnum<
  typeof CreateInstallationStatus
>;

/**
 * The access token for the connection.
 */
export type CreateInstallationAccessToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

/**
 * The refresh token to use for the connection.
 */
export type CreateInstallationRefreshToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

export type CreateInstallationOAuth2AuthorizationCodeToken = {
  /**
   * The access token for the connection.
   */
  accessToken?: CreateInstallationAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: CreateInstallationRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

export type CreateInstallationConnection = {
  /**
   * The connection ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The SaaS provider that this Connection is for.
   */
  provider: string;
  providerApp?: CreateInstallationProviderApp | undefined;
  group: CreateInstallationInstallationsGroup;
  consumer: CreateInstallationConsumer;
  /**
   * If available, the identifier for the provider workspace (e.g. the Salesforce subdomain)
   */
  providerWorkspaceRef?: string | undefined;
  /**
   * If available, the ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
   */
  providerConsumerRef?: string | undefined;
  /**
   * The time the connection was created.
   */
  createTime: Date;
  /**
   * The time the connection was last updated.
   */
  updateTime?: Date | undefined;
  /**
   * The authentication scheme used for this connection.
   */
  authScheme: CreateInstallationAuthScheme;
  /**
   * The status of the connection.
   */
  status: CreateInstallationStatus;
  oauth2AuthorizationCode?:
    | CreateInstallationOAuth2AuthorizationCodeToken
    | undefined;
  /**
   * The API key used while making the connection.
   */
  apiKey?: string | undefined;
};

export type CreateInstallationBaseProxyConfig = {
  enabled?: boolean | undefined;
};

export type CreateInstallationConfigContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider: string;
  read?: any | undefined;
  write?: any | undefined;
  proxy?: CreateInstallationBaseProxyConfig | undefined;
};

export type CreateInstallationConfig = {
  /**
   * The config ID.
   */
  id: string;
  /**
   * The ID of the revision that this config is based on.
   */
  revisionId: string;
  /**
   * The time the config was created.
   */
  createTime: Date;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy: string;
  content: CreateInstallationConfigContent;
};

/**
 * Created
 */
export type CreateInstallationInstallation = {
  /**
   * The installation ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  group?: CreateInstallationGroup | undefined;
  /**
   * The health status of the installation ("healthy", "unhealthy").
   */
  healthStatus: string;
  connection: CreateInstallationConnection;
  /**
   * The time the integration was first installed.
   */
  createTime: Date;
  /**
   * The person who did the installation, in the format of "consumer:{consumer-id}".
   */
  createdBy: string;
  /**
   * The time the installation was last updated with a new config.
   */
  updateTime?: Date | undefined;
  config: CreateInstallationConfig;
};

export type CreateInstallationResponse =
  | CreateInstallationInstallation
  | CreateInstallationAPIProblem;

/** @internal */
export const BaseProxyConfig$inboundSchema: z.ZodType<
  BaseProxyConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type BaseProxyConfig$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const BaseProxyConfig$outboundSchema: z.ZodType<
  BaseProxyConfig$Outbound,
  z.ZodTypeDef,
  BaseProxyConfig
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseProxyConfig$ {
  /** @deprecated use `BaseProxyConfig$inboundSchema` instead. */
  export const inboundSchema = BaseProxyConfig$inboundSchema;
  /** @deprecated use `BaseProxyConfig$outboundSchema` instead. */
  export const outboundSchema = BaseProxyConfig$outboundSchema;
  /** @deprecated use `BaseProxyConfig$Outbound` instead. */
  export type Outbound = BaseProxyConfig$Outbound;
}

export function baseProxyConfigToJSON(
  baseProxyConfig: BaseProxyConfig,
): string {
  return JSON.stringify(BaseProxyConfig$outboundSchema.parse(baseProxyConfig));
}

export function baseProxyConfigFromJSON(
  jsonString: string,
): SafeParseResult<BaseProxyConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseProxyConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseProxyConfig' from JSON`,
  );
}

/** @internal */
export const ConfigContent$inboundSchema: z.ZodType<
  ConfigContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
  read: z.any().optional(),
  write: z.any().optional(),
  proxy: z.lazy(() => BaseProxyConfig$inboundSchema).optional(),
});

/** @internal */
export type ConfigContent$Outbound = {
  provider: string;
  read?: any | undefined;
  write?: any | undefined;
  proxy?: BaseProxyConfig$Outbound | undefined;
};

/** @internal */
export const ConfigContent$outboundSchema: z.ZodType<
  ConfigContent$Outbound,
  z.ZodTypeDef,
  ConfigContent
> = z.object({
  provider: z.string(),
  read: z.any().optional(),
  write: z.any().optional(),
  proxy: z.lazy(() => BaseProxyConfig$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigContent$ {
  /** @deprecated use `ConfigContent$inboundSchema` instead. */
  export const inboundSchema = ConfigContent$inboundSchema;
  /** @deprecated use `ConfigContent$outboundSchema` instead. */
  export const outboundSchema = ConfigContent$outboundSchema;
  /** @deprecated use `ConfigContent$Outbound` instead. */
  export type Outbound = ConfigContent$Outbound;
}

export function configContentToJSON(configContent: ConfigContent): string {
  return JSON.stringify(ConfigContent$outboundSchema.parse(configContent));
}

export function configContentFromJSON(
  jsonString: string,
): SafeParseResult<ConfigContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigContent' from JSON`,
  );
}

/** @internal */
export const Config$inboundSchema: z.ZodType<Config, z.ZodTypeDef, unknown> = z
  .object({
    revisionId: z.string().optional(),
    createdBy: z.string().default("api:create-installation"),
    content: z.lazy(() => ConfigContent$inboundSchema),
  });

/** @internal */
export type Config$Outbound = {
  revisionId?: string | undefined;
  createdBy: string;
  content: ConfigContent$Outbound;
};

/** @internal */
export const Config$outboundSchema: z.ZodType<
  Config$Outbound,
  z.ZodTypeDef,
  Config
> = z.object({
  revisionId: z.string().optional(),
  createdBy: z.string().default("api:create-installation"),
  content: z.lazy(() => ConfigContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Config$ {
  /** @deprecated use `Config$inboundSchema` instead. */
  export const inboundSchema = Config$inboundSchema;
  /** @deprecated use `Config$outboundSchema` instead. */
  export const outboundSchema = Config$outboundSchema;
  /** @deprecated use `Config$Outbound` instead. */
  export type Outbound = Config$Outbound;
}

export function configToJSON(config: Config): string {
  return JSON.stringify(Config$outboundSchema.parse(config));
}

export function configFromJSON(
  jsonString: string,
): SafeParseResult<Config, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Config$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Config' from JSON`,
  );
}

/** @internal */
export const CreateInstallationRequestBody$inboundSchema: z.ZodType<
  CreateInstallationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  connectionId: z.string().optional(),
  config: z.lazy(() => Config$inboundSchema),
});

/** @internal */
export type CreateInstallationRequestBody$Outbound = {
  groupRef: string;
  connectionId?: string | undefined;
  config: Config$Outbound;
};

/** @internal */
export const CreateInstallationRequestBody$outboundSchema: z.ZodType<
  CreateInstallationRequestBody$Outbound,
  z.ZodTypeDef,
  CreateInstallationRequestBody
> = z.object({
  groupRef: z.string(),
  connectionId: z.string().optional(),
  config: z.lazy(() => Config$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationRequestBody$ {
  /** @deprecated use `CreateInstallationRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationRequestBody$inboundSchema;
  /** @deprecated use `CreateInstallationRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationRequestBody$outboundSchema;
  /** @deprecated use `CreateInstallationRequestBody$Outbound` instead. */
  export type Outbound = CreateInstallationRequestBody$Outbound;
}

export function createInstallationRequestBodyToJSON(
  createInstallationRequestBody: CreateInstallationRequestBody,
): string {
  return JSON.stringify(
    CreateInstallationRequestBody$outboundSchema.parse(
      createInstallationRequestBody,
    ),
  );
}

export function createInstallationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateInstallationRequest$inboundSchema: z.ZodType<
  CreateInstallationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  RequestBody: z.lazy(() => CreateInstallationRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateInstallationRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  RequestBody: CreateInstallationRequestBody$Outbound;
};

/** @internal */
export const CreateInstallationRequest$outboundSchema: z.ZodType<
  CreateInstallationRequest$Outbound,
  z.ZodTypeDef,
  CreateInstallationRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  requestBody: z.lazy(() => CreateInstallationRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationRequest$ {
  /** @deprecated use `CreateInstallationRequest$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationRequest$inboundSchema;
  /** @deprecated use `CreateInstallationRequest$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationRequest$outboundSchema;
  /** @deprecated use `CreateInstallationRequest$Outbound` instead. */
  export type Outbound = CreateInstallationRequest$Outbound;
}

export function createInstallationRequestToJSON(
  createInstallationRequest: CreateInstallationRequest,
): string {
  return JSON.stringify(
    CreateInstallationRequest$outboundSchema.parse(createInstallationRequest),
  );
}

export function createInstallationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationRequest' from JSON`,
  );
}

/** @internal */
export const CreateInstallationAPIProblem$inboundSchema: z.ZodType<
  CreateInstallationAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type CreateInstallationAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateInstallationAPIProblem$outboundSchema: z.ZodType<
  CreateInstallationAPIProblem$Outbound,
  z.ZodTypeDef,
  CreateInstallationAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationAPIProblem$ {
  /** @deprecated use `CreateInstallationAPIProblem$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationAPIProblem$inboundSchema;
  /** @deprecated use `CreateInstallationAPIProblem$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationAPIProblem$outboundSchema;
  /** @deprecated use `CreateInstallationAPIProblem$Outbound` instead. */
  export type Outbound = CreateInstallationAPIProblem$Outbound;
}

export function createInstallationAPIProblemToJSON(
  createInstallationAPIProblem: CreateInstallationAPIProblem,
): string {
  return JSON.stringify(
    CreateInstallationAPIProblem$outboundSchema.parse(
      createInstallationAPIProblem,
    ),
  );
}

export function createInstallationAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationAPIProblem' from JSON`,
  );
}

/** @internal */
export const CreateInstallationGroup$inboundSchema: z.ZodType<
  CreateInstallationGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateInstallationGroup$outboundSchema: z.ZodType<
  CreateInstallationGroup$Outbound,
  z.ZodTypeDef,
  CreateInstallationGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationGroup$ {
  /** @deprecated use `CreateInstallationGroup$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationGroup$inboundSchema;
  /** @deprecated use `CreateInstallationGroup$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationGroup$outboundSchema;
  /** @deprecated use `CreateInstallationGroup$Outbound` instead. */
  export type Outbound = CreateInstallationGroup$Outbound;
}

export function createInstallationGroupToJSON(
  createInstallationGroup: CreateInstallationGroup,
): string {
  return JSON.stringify(
    CreateInstallationGroup$outboundSchema.parse(createInstallationGroup),
  );
}

export function createInstallationGroupFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationGroup' from JSON`,
  );
}

/** @internal */
export const CreateInstallationProviderApp$inboundSchema: z.ZodType<
  CreateInstallationProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateInstallationProviderApp$outboundSchema: z.ZodType<
  CreateInstallationProviderApp$Outbound,
  z.ZodTypeDef,
  CreateInstallationProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationProviderApp$ {
  /** @deprecated use `CreateInstallationProviderApp$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationProviderApp$inboundSchema;
  /** @deprecated use `CreateInstallationProviderApp$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationProviderApp$outboundSchema;
  /** @deprecated use `CreateInstallationProviderApp$Outbound` instead. */
  export type Outbound = CreateInstallationProviderApp$Outbound;
}

export function createInstallationProviderAppToJSON(
  createInstallationProviderApp: CreateInstallationProviderApp,
): string {
  return JSON.stringify(
    CreateInstallationProviderApp$outboundSchema.parse(
      createInstallationProviderApp,
    ),
  );
}

export function createInstallationProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationProviderApp' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallationsGroup$inboundSchema: z.ZodType<
  CreateInstallationInstallationsGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationInstallationsGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateInstallationInstallationsGroup$outboundSchema: z.ZodType<
  CreateInstallationInstallationsGroup$Outbound,
  z.ZodTypeDef,
  CreateInstallationInstallationsGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsGroup$ {
  /** @deprecated use `CreateInstallationInstallationsGroup$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsGroup$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsGroup$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsGroup$outboundSchema;
  /** @deprecated use `CreateInstallationInstallationsGroup$Outbound` instead. */
  export type Outbound = CreateInstallationInstallationsGroup$Outbound;
}

export function createInstallationInstallationsGroupToJSON(
  createInstallationInstallationsGroup: CreateInstallationInstallationsGroup,
): string {
  return JSON.stringify(
    CreateInstallationInstallationsGroup$outboundSchema.parse(
      createInstallationInstallationsGroup,
    ),
  );
}

export function createInstallationInstallationsGroupFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationInstallationsGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationInstallationsGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationInstallationsGroup' from JSON`,
  );
}

/** @internal */
export const CreateInstallationConsumer$inboundSchema: z.ZodType<
  CreateInstallationConsumer,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationConsumer$Outbound = {
  consumerRef: string;
  consumerName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateInstallationConsumer$outboundSchema: z.ZodType<
  CreateInstallationConsumer$Outbound,
  z.ZodTypeDef,
  CreateInstallationConsumer
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationConsumer$ {
  /** @deprecated use `CreateInstallationConsumer$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationConsumer$inboundSchema;
  /** @deprecated use `CreateInstallationConsumer$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationConsumer$outboundSchema;
  /** @deprecated use `CreateInstallationConsumer$Outbound` instead. */
  export type Outbound = CreateInstallationConsumer$Outbound;
}

export function createInstallationConsumerToJSON(
  createInstallationConsumer: CreateInstallationConsumer,
): string {
  return JSON.stringify(
    CreateInstallationConsumer$outboundSchema.parse(createInstallationConsumer),
  );
}

export function createInstallationConsumerFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationConsumer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationConsumer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationConsumer' from JSON`,
  );
}

/** @internal */
export const CreateInstallationAuthScheme$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationAuthScheme
> = z.nativeEnum(CreateInstallationAuthScheme);

/** @internal */
export const CreateInstallationAuthScheme$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationAuthScheme
> = CreateInstallationAuthScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationAuthScheme$ {
  /** @deprecated use `CreateInstallationAuthScheme$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationAuthScheme$inboundSchema;
  /** @deprecated use `CreateInstallationAuthScheme$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationAuthScheme$outboundSchema;
}

/** @internal */
export const CreateInstallationStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationStatus
> = z.nativeEnum(CreateInstallationStatus);

/** @internal */
export const CreateInstallationStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationStatus
> = CreateInstallationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationStatus$ {
  /** @deprecated use `CreateInstallationStatus$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationStatus$inboundSchema;
  /** @deprecated use `CreateInstallationStatus$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationStatus$outboundSchema;
}

/** @internal */
export const CreateInstallationAccessToken$inboundSchema: z.ZodType<
  CreateInstallationAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationAccessToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const CreateInstallationAccessToken$outboundSchema: z.ZodType<
  CreateInstallationAccessToken$Outbound,
  z.ZodTypeDef,
  CreateInstallationAccessToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationAccessToken$ {
  /** @deprecated use `CreateInstallationAccessToken$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationAccessToken$inboundSchema;
  /** @deprecated use `CreateInstallationAccessToken$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationAccessToken$outboundSchema;
  /** @deprecated use `CreateInstallationAccessToken$Outbound` instead. */
  export type Outbound = CreateInstallationAccessToken$Outbound;
}

export function createInstallationAccessTokenToJSON(
  createInstallationAccessToken: CreateInstallationAccessToken,
): string {
  return JSON.stringify(
    CreateInstallationAccessToken$outboundSchema.parse(
      createInstallationAccessToken,
    ),
  );
}

export function createInstallationAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationAccessToken' from JSON`,
  );
}

/** @internal */
export const CreateInstallationRefreshToken$inboundSchema: z.ZodType<
  CreateInstallationRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationRefreshToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const CreateInstallationRefreshToken$outboundSchema: z.ZodType<
  CreateInstallationRefreshToken$Outbound,
  z.ZodTypeDef,
  CreateInstallationRefreshToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationRefreshToken$ {
  /** @deprecated use `CreateInstallationRefreshToken$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationRefreshToken$inboundSchema;
  /** @deprecated use `CreateInstallationRefreshToken$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationRefreshToken$outboundSchema;
  /** @deprecated use `CreateInstallationRefreshToken$Outbound` instead. */
  export type Outbound = CreateInstallationRefreshToken$Outbound;
}

export function createInstallationRefreshTokenToJSON(
  createInstallationRefreshToken: CreateInstallationRefreshToken,
): string {
  return JSON.stringify(
    CreateInstallationRefreshToken$outboundSchema.parse(
      createInstallationRefreshToken,
    ),
  );
}

export function createInstallationRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationRefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationRefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationRefreshToken' from JSON`,
  );
}

/** @internal */
export const CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema:
  z.ZodType<
    CreateInstallationOAuth2AuthorizationCodeToken,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessToken: z.lazy(() => CreateInstallationAccessToken$inboundSchema)
      .optional(),
    refreshToken: z.lazy(() => CreateInstallationRefreshToken$inboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/** @internal */
export type CreateInstallationOAuth2AuthorizationCodeToken$Outbound = {
  accessToken?: CreateInstallationAccessToken$Outbound | undefined;
  refreshToken?: CreateInstallationRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema:
  z.ZodType<
    CreateInstallationOAuth2AuthorizationCodeToken$Outbound,
    z.ZodTypeDef,
    CreateInstallationOAuth2AuthorizationCodeToken
  > = z.object({
    accessToken: z.lazy(() => CreateInstallationAccessToken$outboundSchema)
      .optional(),
    refreshToken: z.lazy(() => CreateInstallationRefreshToken$outboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationOAuth2AuthorizationCodeToken$ {
  /** @deprecated use `CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema;
  /** @deprecated use `CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema;
  /** @deprecated use `CreateInstallationOAuth2AuthorizationCodeToken$Outbound` instead. */
  export type Outbound =
    CreateInstallationOAuth2AuthorizationCodeToken$Outbound;
}

export function createInstallationOAuth2AuthorizationCodeTokenToJSON(
  createInstallationOAuth2AuthorizationCodeToken:
    CreateInstallationOAuth2AuthorizationCodeToken,
): string {
  return JSON.stringify(
    CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema.parse(
      createInstallationOAuth2AuthorizationCodeToken,
    ),
  );
}

export function createInstallationOAuth2AuthorizationCodeTokenFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationOAuth2AuthorizationCodeToken,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateInstallationOAuth2AuthorizationCodeToken' from JSON`,
  );
}

/** @internal */
export const CreateInstallationConnection$inboundSchema: z.ZodType<
  CreateInstallationConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => CreateInstallationProviderApp$inboundSchema)
    .optional(),
  group: z.lazy(() => CreateInstallationInstallationsGroup$inboundSchema),
  consumer: z.lazy(() => CreateInstallationConsumer$inboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  authScheme: CreateInstallationAuthScheme$inboundSchema,
  status: CreateInstallationStatus$inboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema
  ).optional(),
  apiKey: z.string().optional(),
});

/** @internal */
export type CreateInstallationConnection$Outbound = {
  id: string;
  projectId: string;
  provider: string;
  providerApp?: CreateInstallationProviderApp$Outbound | undefined;
  group: CreateInstallationInstallationsGroup$Outbound;
  consumer: CreateInstallationConsumer$Outbound;
  providerWorkspaceRef?: string | undefined;
  providerConsumerRef?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  authScheme: string;
  status: string;
  oauth2AuthorizationCode?:
    | CreateInstallationOAuth2AuthorizationCodeToken$Outbound
    | undefined;
  apiKey?: string | undefined;
};

/** @internal */
export const CreateInstallationConnection$outboundSchema: z.ZodType<
  CreateInstallationConnection$Outbound,
  z.ZodTypeDef,
  CreateInstallationConnection
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => CreateInstallationProviderApp$outboundSchema)
    .optional(),
  group: z.lazy(() => CreateInstallationInstallationsGroup$outboundSchema),
  consumer: z.lazy(() => CreateInstallationConsumer$outboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  authScheme: CreateInstallationAuthScheme$outboundSchema,
  status: CreateInstallationStatus$outboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema
  ).optional(),
  apiKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationConnection$ {
  /** @deprecated use `CreateInstallationConnection$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationConnection$inboundSchema;
  /** @deprecated use `CreateInstallationConnection$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationConnection$outboundSchema;
  /** @deprecated use `CreateInstallationConnection$Outbound` instead. */
  export type Outbound = CreateInstallationConnection$Outbound;
}

export function createInstallationConnectionToJSON(
  createInstallationConnection: CreateInstallationConnection,
): string {
  return JSON.stringify(
    CreateInstallationConnection$outboundSchema.parse(
      createInstallationConnection,
    ),
  );
}

export function createInstallationConnectionFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationConnection' from JSON`,
  );
}

/** @internal */
export const CreateInstallationBaseProxyConfig$inboundSchema: z.ZodType<
  CreateInstallationBaseProxyConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type CreateInstallationBaseProxyConfig$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const CreateInstallationBaseProxyConfig$outboundSchema: z.ZodType<
  CreateInstallationBaseProxyConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationBaseProxyConfig
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationBaseProxyConfig$ {
  /** @deprecated use `CreateInstallationBaseProxyConfig$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationBaseProxyConfig$inboundSchema;
  /** @deprecated use `CreateInstallationBaseProxyConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationBaseProxyConfig$outboundSchema;
  /** @deprecated use `CreateInstallationBaseProxyConfig$Outbound` instead. */
  export type Outbound = CreateInstallationBaseProxyConfig$Outbound;
}

export function createInstallationBaseProxyConfigToJSON(
  createInstallationBaseProxyConfig: CreateInstallationBaseProxyConfig,
): string {
  return JSON.stringify(
    CreateInstallationBaseProxyConfig$outboundSchema.parse(
      createInstallationBaseProxyConfig,
    ),
  );
}

export function createInstallationBaseProxyConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationBaseProxyConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationBaseProxyConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationBaseProxyConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationConfigContent$inboundSchema: z.ZodType<
  CreateInstallationConfigContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
  read: z.any().optional(),
  write: z.any().optional(),
  proxy: z.lazy(() => CreateInstallationBaseProxyConfig$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateInstallationConfigContent$Outbound = {
  provider: string;
  read?: any | undefined;
  write?: any | undefined;
  proxy?: CreateInstallationBaseProxyConfig$Outbound | undefined;
};

/** @internal */
export const CreateInstallationConfigContent$outboundSchema: z.ZodType<
  CreateInstallationConfigContent$Outbound,
  z.ZodTypeDef,
  CreateInstallationConfigContent
> = z.object({
  provider: z.string(),
  read: z.any().optional(),
  write: z.any().optional(),
  proxy: z.lazy(() => CreateInstallationBaseProxyConfig$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationConfigContent$ {
  /** @deprecated use `CreateInstallationConfigContent$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationConfigContent$inboundSchema;
  /** @deprecated use `CreateInstallationConfigContent$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationConfigContent$outboundSchema;
  /** @deprecated use `CreateInstallationConfigContent$Outbound` instead. */
  export type Outbound = CreateInstallationConfigContent$Outbound;
}

export function createInstallationConfigContentToJSON(
  createInstallationConfigContent: CreateInstallationConfigContent,
): string {
  return JSON.stringify(
    CreateInstallationConfigContent$outboundSchema.parse(
      createInstallationConfigContent,
    ),
  );
}

export function createInstallationConfigContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationConfigContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationConfigContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationConfigContent' from JSON`,
  );
}

/** @internal */
export const CreateInstallationConfig$inboundSchema: z.ZodType<
  CreateInstallationConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  content: z.lazy(() => CreateInstallationConfigContent$inboundSchema),
});

/** @internal */
export type CreateInstallationConfig$Outbound = {
  id: string;
  revisionId: string;
  createTime: string;
  createdBy: string;
  content: CreateInstallationConfigContent$Outbound;
};

/** @internal */
export const CreateInstallationConfig$outboundSchema: z.ZodType<
  CreateInstallationConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationConfig
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  content: z.lazy(() => CreateInstallationConfigContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationConfig$ {
  /** @deprecated use `CreateInstallationConfig$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationConfig$inboundSchema;
  /** @deprecated use `CreateInstallationConfig$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationConfig$outboundSchema;
  /** @deprecated use `CreateInstallationConfig$Outbound` instead. */
  export type Outbound = CreateInstallationConfig$Outbound;
}

export function createInstallationConfigToJSON(
  createInstallationConfig: CreateInstallationConfig,
): string {
  return JSON.stringify(
    CreateInstallationConfig$outboundSchema.parse(createInstallationConfig),
  );
}

export function createInstallationConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallation$inboundSchema: z.ZodType<
  CreateInstallationInstallation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => CreateInstallationGroup$inboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => CreateInstallationConnection$inboundSchema),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  config: z.lazy(() => CreateInstallationConfig$inboundSchema),
});

/** @internal */
export type CreateInstallationInstallation$Outbound = {
  id: string;
  projectId: string;
  integrationId: string;
  group?: CreateInstallationGroup$Outbound | undefined;
  healthStatus: string;
  connection: CreateInstallationConnection$Outbound;
  createTime: string;
  createdBy: string;
  updateTime?: string | undefined;
  config: CreateInstallationConfig$Outbound;
};

/** @internal */
export const CreateInstallationInstallation$outboundSchema: z.ZodType<
  CreateInstallationInstallation$Outbound,
  z.ZodTypeDef,
  CreateInstallationInstallation
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => CreateInstallationGroup$outboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => CreateInstallationConnection$outboundSchema),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  config: z.lazy(() => CreateInstallationConfig$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallation$ {
  /** @deprecated use `CreateInstallationInstallation$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationInstallation$inboundSchema;
  /** @deprecated use `CreateInstallationInstallation$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationInstallation$outboundSchema;
  /** @deprecated use `CreateInstallationInstallation$Outbound` instead. */
  export type Outbound = CreateInstallationInstallation$Outbound;
}

export function createInstallationInstallationToJSON(
  createInstallationInstallation: CreateInstallationInstallation,
): string {
  return JSON.stringify(
    CreateInstallationInstallation$outboundSchema.parse(
      createInstallationInstallation,
    ),
  );
}

export function createInstallationInstallationFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationInstallation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationInstallation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationInstallation' from JSON`,
  );
}

/** @internal */
export const CreateInstallationResponse$inboundSchema: z.ZodType<
  CreateInstallationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateInstallationInstallation$inboundSchema),
  z.lazy(() => CreateInstallationAPIProblem$inboundSchema),
]);

/** @internal */
export type CreateInstallationResponse$Outbound =
  | CreateInstallationInstallation$Outbound
  | CreateInstallationAPIProblem$Outbound;

/** @internal */
export const CreateInstallationResponse$outboundSchema: z.ZodType<
  CreateInstallationResponse$Outbound,
  z.ZodTypeDef,
  CreateInstallationResponse
> = z.union([
  z.lazy(() => CreateInstallationInstallation$outboundSchema),
  z.lazy(() => CreateInstallationAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationResponse$ {
  /** @deprecated use `CreateInstallationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationResponse$inboundSchema;
  /** @deprecated use `CreateInstallationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationResponse$outboundSchema;
  /** @deprecated use `CreateInstallationResponse$Outbound` instead. */
  export type Outbound = CreateInstallationResponse$Outbound;
}

export function createInstallationResponseToJSON(
  createInstallationResponse: CreateInstallationResponse,
): string {
  return JSON.stringify(
    CreateInstallationResponse$outboundSchema.parse(createInstallationResponse),
  );
}

export function createInstallationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationResponse' from JSON`,
  );
}
