/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export const SelectedFieldsAutoConfig = {
  All: "all",
} as const;
/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export type SelectedFieldsAutoConfig = ClosedEnum<
  typeof SelectedFieldsAutoConfig
>;

export type DefaultPeriodConfig = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type BackfillConfig = {
  defaultPeriod: DefaultPeriodConfig;
};

export type ReadConfigObject = {
  /**
   * The name of the object to read from.
   */
  objectName: string;
  /**
   * The schedule for reading the object, in cron syntax.
   */
  schedule: string;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination: string;
  /**
   * This is a map of field names to booleans indicating whether they should be read. If a field is already included in `selectedFieldMappings`, it does not need to be included here.
   */
  selectedFields: { [k: string]: boolean };
  /**
   * This is a map of field names to their value mappings.
   */
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  /**
   * This is a map of mapToNames to field names. (A mapTo name is the name the builder wants to map a field to when it lands in their destination.)
   */
  selectedFieldMappings: { [k: string]: string };
  /**
   * If selectedFieldsAuto is set to all, all fields will be read.
   */
  selectedFieldsAuto?: SelectedFieldsAutoConfig | undefined;
  backfill?: BackfillConfig | undefined;
};

export type ReadConfig = {
  objects: { [k: string]: ReadConfigObject };
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const CreateInstallationValueDefaultLegacyApplyOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type CreateInstallationValueDefaultLegacyApplyOnUpdate = ClosedEnum<
  typeof CreateInstallationValueDefaultLegacyApplyOnUpdate
>;

export type ValueDefaultBoolean = {
  /**
   * The value to be used as a default.
   */
  value: boolean;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?: CreateInstallationValueDefaultLegacyApplyOnUpdate | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const ValueDefaultLegacyApplyOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type ValueDefaultLegacyApplyOnUpdate = ClosedEnum<
  typeof ValueDefaultLegacyApplyOnUpdate
>;

export type ValueDefaultInteger = {
  /**
   * The value to be used as a default.
   */
  value: number;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?: ValueDefaultLegacyApplyOnUpdate | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const ApplyOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type ApplyOnUpdate = ClosedEnum<typeof ApplyOnUpdate>;

export type ValueDefaultString = {
  /**
   * The value to be used as a default.
   */
  value: string;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?: ApplyOnUpdate | undefined;
};

/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type ValueDefaultLegacy =
  | ValueDefaultString
  | ValueDefaultInteger
  | ValueDefaultBoolean;

/**
 * Only use one of stringValue, integerValue, booleanValue.
 */
export type DefaultValueForAField = {
  /**
   * The default string value to apply to a field
   */
  stringValue?: string | undefined;
  /**
   * The default integer value to apply to a field
   */
  integerValue?: number | undefined;
  /**
   * The default boolean value to apply to a field
   */
  booleanValue?: boolean | undefined;
};

/**
 * Whether the default value should be applied when creating a record.
 */
export const WriteOnCreate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when creating a record.
 */
export type WriteOnCreate = ClosedEnum<typeof WriteOnCreate>;

/**
 * Whether the default value should be applied when updating a record.
 */
export const WriteOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 */
export type WriteOnUpdate = ClosedEnum<typeof WriteOnUpdate>;

export type FieldSetting = {
  /**
   * Only use one of stringValue, integerValue, booleanValue.
   */
  default?: DefaultValueForAField | undefined;
  /**
   * Whether the default value should be applied when creating a record.
   */
  writeOnCreate?: WriteOnCreate | undefined;
  /**
   * Whether the default value should be applied when updating a record.
   */
  writeOnUpdate?: WriteOnUpdate | undefined;
};

export type WriteConfigObject = {
  /**
   * The name of the object to write to.
   */
  objectName: string;
  /**
   * This is a map of field names to default values. These values will be used when writing to the object.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  selectedValueDefaults?: {
    [k: string]: ValueDefaultString | ValueDefaultInteger | ValueDefaultBoolean;
  } | undefined;
  /**
   * This is a map of field names to their settings.
   */
  selectedFieldSettings?: { [k: string]: FieldSetting } | undefined;
};

export type WriteConfig = {
  objects?: { [k: string]: WriteConfigObject } | undefined;
};

export type BaseProxyConfig = {
  enabled?: boolean | undefined;
};

/**
 * Conditions to enable create events.
 */
export const CreateInstallationEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable create events.
 */
export type CreateInstallationEnabled = ClosedEnum<
  typeof CreateInstallationEnabled
>;

export type CreateInstallationCreateEvent = {
  /**
   * Conditions to enable create events.
   */
  enabled: CreateInstallationEnabled;
};

/**
 * Conditions to enable update events.
 */
export const CreateInstallationInstallationsEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable update events.
 */
export type CreateInstallationInstallationsEnabled = ClosedEnum<
  typeof CreateInstallationInstallationsEnabled
>;

/**
 * Whether to watch fields all fields automatically.
 */
export const CreateInstallationWatchFieldsAuto = {
  All: "all",
} as const;
/**
 * Whether to watch fields all fields automatically.
 */
export type CreateInstallationWatchFieldsAuto = ClosedEnum<
  typeof CreateInstallationWatchFieldsAuto
>;

export type CreateInstallationUpdateEvent = {
  /**
   * Conditions to enable update events.
   */
  enabled: CreateInstallationInstallationsEnabled;
  /**
   * Whether to watch fields all fields automatically.
   */
  watchFieldsAuto?: CreateInstallationWatchFieldsAuto | undefined;
  /**
   * The fields that should be watched.
   */
  requiredWatchFields?: Array<string> | undefined;
};

/**
 * Conditions to enable delete events.
 */
export const CreateInstallationInstallationsRequestEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable delete events.
 */
export type CreateInstallationInstallationsRequestEnabled = ClosedEnum<
  typeof CreateInstallationInstallationsRequestEnabled
>;

export type CreateInstallationDeleteEvent = {
  /**
   * Conditions to enable delete events.
   */
  enabled: CreateInstallationInstallationsRequestEnabled;
};

export type SubscribeConfigObject = {
  /**
   * Whether to inherit fields and mappings from the read config.
   */
  inheritFieldsAndMappings: boolean;
  /**
   * The name of the object to subscribe to.
   */
  objectName: string;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination: string;
  createEvent?: CreateInstallationCreateEvent | undefined;
  updateEvent?: CreateInstallationUpdateEvent | undefined;
  deleteEvent?: CreateInstallationDeleteEvent | undefined;
};

export type SubscribeConfig = {
  objects: { [k: string]: SubscribeConfigObject };
};

export type ConfigContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider: string;
  read?: ReadConfig | undefined;
  write?: WriteConfig | undefined;
  proxy?: BaseProxyConfig | undefined;
  subscribe?: SubscribeConfig | undefined;
};

/**
 * The config of the installation.
 */
export type Config = {
  /**
   * The ID of the revision that this config is based on. If omitted, the latest revision is assumed.
   */
  revisionId?: string | undefined;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy?: string | undefined;
  content: ConfigContent;
};

export type CreateInstallationRequestBody = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The ID of the SaaS connection tied to this installation. If omitted the default connection for this group will be used.
   */
  connectionId?: string | undefined;
  /**
   * The config of the installation.
   */
  config: Config;
};

export type CreateInstallationRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  requestBody: CreateInstallationRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type CreateInstallationAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type CreateInstallationGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type CreateInstallationProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type CreateInstallationInstallationsGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type CreateInstallationConsumer = {
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The name of the consumer.
   */
  consumerName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the consumer was created.
   */
  createTime: Date;
  /**
   * The time the consumer was last updated.
   */
  updateTime?: Date | undefined;
};

/**
 * The authentication scheme used for this connection.
 */
export const CreateInstallationAuthScheme = {
  None: "none",
  ApiKey: "apiKey",
  Basic: "basic",
  Oauth2AuthorizationCode: "oauth2/authorizationCode",
  Oauth2AuthorizationCodePKCE: "oauth2/authorizationCodePKCE",
  Oauth2ClientCredentials: "oauth2/clientCredentials",
  Oauth2Password: "oauth2/password",
} as const;
/**
 * The authentication scheme used for this connection.
 */
export type CreateInstallationAuthScheme = ClosedEnum<
  typeof CreateInstallationAuthScheme
>;

/**
 * The status of the connection.
 */
export const CreateInstallationStatus = {
  Created: "created",
  Working: "working",
  BadCredentials: "bad_credentials",
} as const;
/**
 * The status of the connection.
 */
export type CreateInstallationStatus = ClosedEnum<
  typeof CreateInstallationStatus
>;

/**
 * The access token for the connection.
 */
export type CreateInstallationAccessToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

/**
 * The refresh token to use for the connection.
 */
export type CreateInstallationRefreshToken = {
  token: string;
  issuedAt?: Date | undefined;
  expiresAt?: Date | undefined;
};

export type CreateInstallationOAuth2AuthorizationCodeToken = {
  /**
   * The access token for the connection.
   */
  accessToken?: CreateInstallationAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: CreateInstallationRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

/**
 * The source of the metadata field
 */
export const CreateInstallationSource = {
  Input: "input",
  Token: "token",
  Provider: "provider",
} as const;
/**
 * The source of the metadata field
 */
export type CreateInstallationSource = ClosedEnum<
  typeof CreateInstallationSource
>;

export type CreateInstallationProviderMetadataInfo = {
  /**
   * The value of the metadata field
   */
  value: string;
  /**
   * The source of the metadata field
   */
  source: CreateInstallationSource;
  /**
   * The human-readable name for the field
   */
  displayName?: string | undefined;
};

export type CreateInstallationConnection = {
  /**
   * The connection ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The SaaS provider that this Connection is for.
   */
  provider: string;
  providerApp?: CreateInstallationProviderApp | undefined;
  group: CreateInstallationInstallationsGroup;
  consumer: CreateInstallationConsumer;
  /**
   * If available, the identifier for the provider workspace (e.g. the Salesforce subdomain)
   */
  providerWorkspaceRef?: string | undefined;
  /**
   * If available, the ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
   */
  providerConsumerRef?: string | undefined;
  /**
   * The time the connection was created.
   */
  createTime: Date;
  /**
   * The time the connection was last updated.
   */
  updateTime?: Date | undefined;
  /**
   * The authentication scheme used for this connection.
   */
  authScheme: CreateInstallationAuthScheme;
  /**
   * The status of the connection.
   */
  status: CreateInstallationStatus;
  oauth2AuthorizationCode?:
    | CreateInstallationOAuth2AuthorizationCodeToken
    | undefined;
  /**
   * The API key used while making the connection.
   */
  apiKey?: string | undefined;
  providerMetadata?:
    | { [k: string]: CreateInstallationProviderMetadataInfo }
    | undefined;
};

/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export const CreateInstallationSelectedFieldsAutoConfig = {
  All: "all",
} as const;
/**
 * If selectedFieldsAuto is set to all, all fields will be read.
 */
export type CreateInstallationSelectedFieldsAutoConfig = ClosedEnum<
  typeof CreateInstallationSelectedFieldsAutoConfig
>;

export type CreateInstallationDefaultPeriodConfig = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type CreateInstallationBackfillConfig = {
  defaultPeriod: CreateInstallationDefaultPeriodConfig;
};

export type CreateInstallationReadConfigObject = {
  /**
   * The name of the object to read from.
   */
  objectName: string;
  /**
   * The schedule for reading the object, in cron syntax.
   */
  schedule: string;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination: string;
  /**
   * This is a map of field names to booleans indicating whether they should be read. If a field is already included in `selectedFieldMappings`, it does not need to be included here.
   */
  selectedFields: { [k: string]: boolean };
  /**
   * This is a map of field names to their value mappings.
   */
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  /**
   * This is a map of mapToNames to field names. (A mapTo name is the name the builder wants to map a field to when it lands in their destination.)
   */
  selectedFieldMappings: { [k: string]: string };
  /**
   * If selectedFieldsAuto is set to all, all fields will be read.
   */
  selectedFieldsAuto?: CreateInstallationSelectedFieldsAutoConfig | undefined;
  backfill?: CreateInstallationBackfillConfig | undefined;
};

export type CreateInstallationReadConfig = {
  objects: { [k: string]: CreateInstallationReadConfigObject };
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate =
  {
    Always: "always",
    Never: "never",
  } as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate =
  ClosedEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate
  >;

export type CreateInstallationValueDefaultLegacyValueDefaultBoolean = {
  /**
   * The value to be used as a default.
   */
  value: boolean;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate
    | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate =
  {
    Always: "always",
    Never: "never",
  } as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate =
  ClosedEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate
  >;

export type CreateInstallationValueDefaultLegacyValueDefaultInteger = {
  /**
   * The value to be used as a default.
   */
  value: number;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate
    | undefined;
};

/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export const CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 *
 * @remarks
 * If set to `always`, the default value will be applied when updating a record.
 * If set to `never`, the default value will not be applied when updating a record,
 * only when creating a record.
 * If unspecified, then `always` is assumed.
 */
export type CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate =
  ClosedEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate
  >;

export type CreateInstallationValueDefaultLegacyValueDefaultString = {
  /**
   * The value to be used as a default.
   */
  value: string;
  /**
   * Whether the default value should be applied when updating a record.
   *
   * @remarks
   * If set to `always`, the default value will be applied when updating a record.
   * If set to `never`, the default value will not be applied when updating a record,
   * only when creating a record.
   * If unspecified, then `always` is assumed.
   */
  applyOnUpdate?:
    | CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate
    | undefined;
};

/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type CreateInstallationValueDefaultLegacy =
  | CreateInstallationValueDefaultLegacyValueDefaultString
  | CreateInstallationValueDefaultLegacyValueDefaultInteger
  | CreateInstallationValueDefaultLegacyValueDefaultBoolean;

/**
 * Only use one of stringValue, integerValue, booleanValue.
 */
export type CreateInstallationDefaultValueForAField = {
  /**
   * The default string value to apply to a field
   */
  stringValue?: string | undefined;
  /**
   * The default integer value to apply to a field
   */
  integerValue?: number | undefined;
  /**
   * The default boolean value to apply to a field
   */
  booleanValue?: boolean | undefined;
};

/**
 * Whether the default value should be applied when creating a record.
 */
export const CreateInstallationWriteOnCreate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when creating a record.
 */
export type CreateInstallationWriteOnCreate = ClosedEnum<
  typeof CreateInstallationWriteOnCreate
>;

/**
 * Whether the default value should be applied when updating a record.
 */
export const CreateInstallationWriteOnUpdate = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Whether the default value should be applied when updating a record.
 */
export type CreateInstallationWriteOnUpdate = ClosedEnum<
  typeof CreateInstallationWriteOnUpdate
>;

export type CreateInstallationFieldSetting = {
  /**
   * Only use one of stringValue, integerValue, booleanValue.
   */
  default?: CreateInstallationDefaultValueForAField | undefined;
  /**
   * Whether the default value should be applied when creating a record.
   */
  writeOnCreate?: CreateInstallationWriteOnCreate | undefined;
  /**
   * Whether the default value should be applied when updating a record.
   */
  writeOnUpdate?: CreateInstallationWriteOnUpdate | undefined;
};

export type CreateInstallationWriteConfigObject = {
  /**
   * The name of the object to write to.
   */
  objectName: string;
  /**
   * This is a map of field names to default values. These values will be used when writing to the object.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  selectedValueDefaults?: {
    [k: string]:
      | CreateInstallationValueDefaultLegacyValueDefaultString
      | CreateInstallationValueDefaultLegacyValueDefaultInteger
      | CreateInstallationValueDefaultLegacyValueDefaultBoolean;
  } | undefined;
  /**
   * This is a map of field names to their settings.
   */
  selectedFieldSettings?:
    | { [k: string]: CreateInstallationFieldSetting }
    | undefined;
};

export type CreateInstallationWriteConfig = {
  objects?: { [k: string]: CreateInstallationWriteConfigObject } | undefined;
};

export type CreateInstallationBaseProxyConfig = {
  enabled?: boolean | undefined;
};

/**
 * Conditions to enable create events.
 */
export const CreateInstallationInstallationsResponseEnabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable create events.
 */
export type CreateInstallationInstallationsResponseEnabled = ClosedEnum<
  typeof CreateInstallationInstallationsResponseEnabled
>;

export type CreateInstallationInstallationsCreateEvent = {
  /**
   * Conditions to enable create events.
   */
  enabled: CreateInstallationInstallationsResponseEnabled;
};

/**
 * Conditions to enable update events.
 */
export const CreateInstallationInstallationsResponse201Enabled = {
  Always: "always",
  Never: "never",
} as const;
/**
 * Conditions to enable update events.
 */
export type CreateInstallationInstallationsResponse201Enabled = ClosedEnum<
  typeof CreateInstallationInstallationsResponse201Enabled
>;

/**
 * Whether to watch fields all fields automatically.
 */
export const CreateInstallationInstallationsWatchFieldsAuto = {
  All: "all",
} as const;
/**
 * Whether to watch fields all fields automatically.
 */
export type CreateInstallationInstallationsWatchFieldsAuto = ClosedEnum<
  typeof CreateInstallationInstallationsWatchFieldsAuto
>;

export type CreateInstallationInstallationsUpdateEvent = {
  /**
   * Conditions to enable update events.
   */
  enabled: CreateInstallationInstallationsResponse201Enabled;
  /**
   * Whether to watch fields all fields automatically.
   */
  watchFieldsAuto?: CreateInstallationInstallationsWatchFieldsAuto | undefined;
  /**
   * The fields that should be watched.
   */
  requiredWatchFields?: Array<string> | undefined;
};

/**
 * Conditions to enable delete events.
 */
export const CreateInstallationInstallationsResponse201ApplicationJSONEnabled =
  {
    Always: "always",
    Never: "never",
  } as const;
/**
 * Conditions to enable delete events.
 */
export type CreateInstallationInstallationsResponse201ApplicationJSONEnabled =
  ClosedEnum<
    typeof CreateInstallationInstallationsResponse201ApplicationJSONEnabled
  >;

export type CreateInstallationInstallationsDeleteEvent = {
  /**
   * Conditions to enable delete events.
   */
  enabled: CreateInstallationInstallationsResponse201ApplicationJSONEnabled;
};

export type CreateInstallationSubscribeConfigObject = {
  /**
   * Whether to inherit fields and mappings from the read config.
   */
  inheritFieldsAndMappings: boolean;
  /**
   * The name of the object to subscribe to.
   */
  objectName: string;
  /**
   * The name of the destination that the result should be sent to.
   */
  destination: string;
  createEvent?: CreateInstallationInstallationsCreateEvent | undefined;
  updateEvent?: CreateInstallationInstallationsUpdateEvent | undefined;
  deleteEvent?: CreateInstallationInstallationsDeleteEvent | undefined;
};

export type CreateInstallationSubscribeConfig = {
  objects: { [k: string]: CreateInstallationSubscribeConfigObject };
};

export type CreateInstallationConfigContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider: string;
  read?: CreateInstallationReadConfig | undefined;
  write?: CreateInstallationWriteConfig | undefined;
  proxy?: CreateInstallationBaseProxyConfig | undefined;
  subscribe?: CreateInstallationSubscribeConfig | undefined;
};

export type CreateInstallationConfig = {
  /**
   * The config ID.
   */
  id: string;
  /**
   * The ID of the revision that this config is based on.
   */
  revisionId: string;
  /**
   * The time the config was created.
   */
  createTime: Date;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy: string;
  content: CreateInstallationConfigContent;
};

/**
 * Created
 */
export type CreateInstallationInstallation = {
  /**
   * The installation ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  group?: CreateInstallationGroup | undefined;
  /**
   * The health status of the installation ("healthy", "unhealthy").
   */
  healthStatus: string;
  connection: CreateInstallationConnection;
  /**
   * The time the integration was first installed.
   */
  createTime: Date;
  /**
   * The person who did the installation, in the format of "consumer:{consumer-id}".
   */
  createdBy: string;
  /**
   * The time the installation was last updated with a new config.
   */
  updateTime?: Date | undefined;
  config: CreateInstallationConfig;
};

export type CreateInstallationResponse =
  | CreateInstallationInstallation
  | CreateInstallationAPIProblem;

/** @internal */
export const SelectedFieldsAutoConfig$inboundSchema: z.ZodNativeEnum<
  typeof SelectedFieldsAutoConfig
> = z.nativeEnum(SelectedFieldsAutoConfig);

/** @internal */
export const SelectedFieldsAutoConfig$outboundSchema: z.ZodNativeEnum<
  typeof SelectedFieldsAutoConfig
> = SelectedFieldsAutoConfig$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectedFieldsAutoConfig$ {
  /** @deprecated use `SelectedFieldsAutoConfig$inboundSchema` instead. */
  export const inboundSchema = SelectedFieldsAutoConfig$inboundSchema;
  /** @deprecated use `SelectedFieldsAutoConfig$outboundSchema` instead. */
  export const outboundSchema = SelectedFieldsAutoConfig$outboundSchema;
}

/** @internal */
export const DefaultPeriodConfig$inboundSchema: z.ZodType<
  DefaultPeriodConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type DefaultPeriodConfig$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const DefaultPeriodConfig$outboundSchema: z.ZodType<
  DefaultPeriodConfig$Outbound,
  z.ZodTypeDef,
  DefaultPeriodConfig
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultPeriodConfig$ {
  /** @deprecated use `DefaultPeriodConfig$inboundSchema` instead. */
  export const inboundSchema = DefaultPeriodConfig$inboundSchema;
  /** @deprecated use `DefaultPeriodConfig$outboundSchema` instead. */
  export const outboundSchema = DefaultPeriodConfig$outboundSchema;
  /** @deprecated use `DefaultPeriodConfig$Outbound` instead. */
  export type Outbound = DefaultPeriodConfig$Outbound;
}

export function defaultPeriodConfigToJSON(
  defaultPeriodConfig: DefaultPeriodConfig,
): string {
  return JSON.stringify(
    DefaultPeriodConfig$outboundSchema.parse(defaultPeriodConfig),
  );
}

export function defaultPeriodConfigFromJSON(
  jsonString: string,
): SafeParseResult<DefaultPeriodConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultPeriodConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultPeriodConfig' from JSON`,
  );
}

/** @internal */
export const BackfillConfig$inboundSchema: z.ZodType<
  BackfillConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() => DefaultPeriodConfig$inboundSchema),
});

/** @internal */
export type BackfillConfig$Outbound = {
  defaultPeriod: DefaultPeriodConfig$Outbound;
};

/** @internal */
export const BackfillConfig$outboundSchema: z.ZodType<
  BackfillConfig$Outbound,
  z.ZodTypeDef,
  BackfillConfig
> = z.object({
  defaultPeriod: z.lazy(() => DefaultPeriodConfig$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackfillConfig$ {
  /** @deprecated use `BackfillConfig$inboundSchema` instead. */
  export const inboundSchema = BackfillConfig$inboundSchema;
  /** @deprecated use `BackfillConfig$outboundSchema` instead. */
  export const outboundSchema = BackfillConfig$outboundSchema;
  /** @deprecated use `BackfillConfig$Outbound` instead. */
  export type Outbound = BackfillConfig$Outbound;
}

export function backfillConfigToJSON(backfillConfig: BackfillConfig): string {
  return JSON.stringify(BackfillConfig$outboundSchema.parse(backfillConfig));
}

export function backfillConfigFromJSON(
  jsonString: string,
): SafeParseResult<BackfillConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackfillConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackfillConfig' from JSON`,
  );
}

/** @internal */
export const ReadConfigObject$inboundSchema: z.ZodType<
  ReadConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  schedule: z.string(),
  destination: z.string(),
  selectedFields: z.record(z.boolean()),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()),
  selectedFieldsAuto: SelectedFieldsAutoConfig$inboundSchema.optional(),
  backfill: z.lazy(() => BackfillConfig$inboundSchema).optional(),
});

/** @internal */
export type ReadConfigObject$Outbound = {
  objectName: string;
  schedule: string;
  destination: string;
  selectedFields: { [k: string]: boolean };
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  selectedFieldMappings: { [k: string]: string };
  selectedFieldsAuto?: string | undefined;
  backfill?: BackfillConfig$Outbound | undefined;
};

/** @internal */
export const ReadConfigObject$outboundSchema: z.ZodType<
  ReadConfigObject$Outbound,
  z.ZodTypeDef,
  ReadConfigObject
> = z.object({
  objectName: z.string(),
  schedule: z.string(),
  destination: z.string(),
  selectedFields: z.record(z.boolean()),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()),
  selectedFieldsAuto: SelectedFieldsAutoConfig$outboundSchema.optional(),
  backfill: z.lazy(() => BackfillConfig$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadConfigObject$ {
  /** @deprecated use `ReadConfigObject$inboundSchema` instead. */
  export const inboundSchema = ReadConfigObject$inboundSchema;
  /** @deprecated use `ReadConfigObject$outboundSchema` instead. */
  export const outboundSchema = ReadConfigObject$outboundSchema;
  /** @deprecated use `ReadConfigObject$Outbound` instead. */
  export type Outbound = ReadConfigObject$Outbound;
}

export function readConfigObjectToJSON(
  readConfigObject: ReadConfigObject,
): string {
  return JSON.stringify(
    ReadConfigObject$outboundSchema.parse(readConfigObject),
  );
}

export function readConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<ReadConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadConfigObject' from JSON`,
  );
}

/** @internal */
export const ReadConfig$inboundSchema: z.ZodType<
  ReadConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(z.lazy(() => ReadConfigObject$inboundSchema)),
});

/** @internal */
export type ReadConfig$Outbound = {
  objects: { [k: string]: ReadConfigObject$Outbound };
};

/** @internal */
export const ReadConfig$outboundSchema: z.ZodType<
  ReadConfig$Outbound,
  z.ZodTypeDef,
  ReadConfig
> = z.object({
  objects: z.record(z.lazy(() => ReadConfigObject$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadConfig$ {
  /** @deprecated use `ReadConfig$inboundSchema` instead. */
  export const inboundSchema = ReadConfig$inboundSchema;
  /** @deprecated use `ReadConfig$outboundSchema` instead. */
  export const outboundSchema = ReadConfig$outboundSchema;
  /** @deprecated use `ReadConfig$Outbound` instead. */
  export type Outbound = ReadConfig$Outbound;
}

export function readConfigToJSON(readConfig: ReadConfig): string {
  return JSON.stringify(ReadConfig$outboundSchema.parse(readConfig));
}

export function readConfigFromJSON(
  jsonString: string,
): SafeParseResult<ReadConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationValueDefaultLegacyApplyOnUpdate> = z
    .nativeEnum(CreateInstallationValueDefaultLegacyApplyOnUpdate);

/** @internal */
export const CreateInstallationValueDefaultLegacyApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationValueDefaultLegacyApplyOnUpdate> =
    CreateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationValueDefaultLegacyApplyOnUpdate$ {
  /** @deprecated use `CreateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationValueDefaultLegacyApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ValueDefaultBoolean$inboundSchema: z.ZodType<
  ValueDefaultBoolean,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.boolean(),
  applyOnUpdate: CreateInstallationValueDefaultLegacyApplyOnUpdate$inboundSchema
    .optional(),
});

/** @internal */
export type ValueDefaultBoolean$Outbound = {
  value: boolean;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ValueDefaultBoolean$outboundSchema: z.ZodType<
  ValueDefaultBoolean$Outbound,
  z.ZodTypeDef,
  ValueDefaultBoolean
> = z.object({
  value: z.boolean(),
  applyOnUpdate:
    CreateInstallationValueDefaultLegacyApplyOnUpdate$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDefaultBoolean$ {
  /** @deprecated use `ValueDefaultBoolean$inboundSchema` instead. */
  export const inboundSchema = ValueDefaultBoolean$inboundSchema;
  /** @deprecated use `ValueDefaultBoolean$outboundSchema` instead. */
  export const outboundSchema = ValueDefaultBoolean$outboundSchema;
  /** @deprecated use `ValueDefaultBoolean$Outbound` instead. */
  export type Outbound = ValueDefaultBoolean$Outbound;
}

export function valueDefaultBooleanToJSON(
  valueDefaultBoolean: ValueDefaultBoolean,
): string {
  return JSON.stringify(
    ValueDefaultBoolean$outboundSchema.parse(valueDefaultBoolean),
  );
}

export function valueDefaultBooleanFromJSON(
  jsonString: string,
): SafeParseResult<ValueDefaultBoolean, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueDefaultBoolean$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueDefaultBoolean' from JSON`,
  );
}

/** @internal */
export const ValueDefaultLegacyApplyOnUpdate$inboundSchema: z.ZodNativeEnum<
  typeof ValueDefaultLegacyApplyOnUpdate
> = z.nativeEnum(ValueDefaultLegacyApplyOnUpdate);

/** @internal */
export const ValueDefaultLegacyApplyOnUpdate$outboundSchema: z.ZodNativeEnum<
  typeof ValueDefaultLegacyApplyOnUpdate
> = ValueDefaultLegacyApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDefaultLegacyApplyOnUpdate$ {
  /** @deprecated use `ValueDefaultLegacyApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema = ValueDefaultLegacyApplyOnUpdate$inboundSchema;
  /** @deprecated use `ValueDefaultLegacyApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema = ValueDefaultLegacyApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ValueDefaultInteger$inboundSchema: z.ZodType<
  ValueDefaultInteger,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.number().int(),
  applyOnUpdate: ValueDefaultLegacyApplyOnUpdate$inboundSchema.optional(),
});

/** @internal */
export type ValueDefaultInteger$Outbound = {
  value: number;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ValueDefaultInteger$outboundSchema: z.ZodType<
  ValueDefaultInteger$Outbound,
  z.ZodTypeDef,
  ValueDefaultInteger
> = z.object({
  value: z.number().int(),
  applyOnUpdate: ValueDefaultLegacyApplyOnUpdate$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDefaultInteger$ {
  /** @deprecated use `ValueDefaultInteger$inboundSchema` instead. */
  export const inboundSchema = ValueDefaultInteger$inboundSchema;
  /** @deprecated use `ValueDefaultInteger$outboundSchema` instead. */
  export const outboundSchema = ValueDefaultInteger$outboundSchema;
  /** @deprecated use `ValueDefaultInteger$Outbound` instead. */
  export type Outbound = ValueDefaultInteger$Outbound;
}

export function valueDefaultIntegerToJSON(
  valueDefaultInteger: ValueDefaultInteger,
): string {
  return JSON.stringify(
    ValueDefaultInteger$outboundSchema.parse(valueDefaultInteger),
  );
}

export function valueDefaultIntegerFromJSON(
  jsonString: string,
): SafeParseResult<ValueDefaultInteger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueDefaultInteger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueDefaultInteger' from JSON`,
  );
}

/** @internal */
export const ApplyOnUpdate$inboundSchema: z.ZodNativeEnum<
  typeof ApplyOnUpdate
> = z.nativeEnum(ApplyOnUpdate);

/** @internal */
export const ApplyOnUpdate$outboundSchema: z.ZodNativeEnum<
  typeof ApplyOnUpdate
> = ApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplyOnUpdate$ {
  /** @deprecated use `ApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema = ApplyOnUpdate$inboundSchema;
  /** @deprecated use `ApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema = ApplyOnUpdate$outboundSchema;
}

/** @internal */
export const ValueDefaultString$inboundSchema: z.ZodType<
  ValueDefaultString,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  applyOnUpdate: ApplyOnUpdate$inboundSchema.optional(),
});

/** @internal */
export type ValueDefaultString$Outbound = {
  value: string;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const ValueDefaultString$outboundSchema: z.ZodType<
  ValueDefaultString$Outbound,
  z.ZodTypeDef,
  ValueDefaultString
> = z.object({
  value: z.string(),
  applyOnUpdate: ApplyOnUpdate$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDefaultString$ {
  /** @deprecated use `ValueDefaultString$inboundSchema` instead. */
  export const inboundSchema = ValueDefaultString$inboundSchema;
  /** @deprecated use `ValueDefaultString$outboundSchema` instead. */
  export const outboundSchema = ValueDefaultString$outboundSchema;
  /** @deprecated use `ValueDefaultString$Outbound` instead. */
  export type Outbound = ValueDefaultString$Outbound;
}

export function valueDefaultStringToJSON(
  valueDefaultString: ValueDefaultString,
): string {
  return JSON.stringify(
    ValueDefaultString$outboundSchema.parse(valueDefaultString),
  );
}

export function valueDefaultStringFromJSON(
  jsonString: string,
): SafeParseResult<ValueDefaultString, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueDefaultString$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueDefaultString' from JSON`,
  );
}

/** @internal */
export const ValueDefaultLegacy$inboundSchema: z.ZodType<
  ValueDefaultLegacy,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ValueDefaultString$inboundSchema),
  z.lazy(() => ValueDefaultInteger$inboundSchema),
  z.lazy(() => ValueDefaultBoolean$inboundSchema),
]);

/** @internal */
export type ValueDefaultLegacy$Outbound =
  | ValueDefaultString$Outbound
  | ValueDefaultInteger$Outbound
  | ValueDefaultBoolean$Outbound;

/** @internal */
export const ValueDefaultLegacy$outboundSchema: z.ZodType<
  ValueDefaultLegacy$Outbound,
  z.ZodTypeDef,
  ValueDefaultLegacy
> = z.union([
  z.lazy(() => ValueDefaultString$outboundSchema),
  z.lazy(() => ValueDefaultInteger$outboundSchema),
  z.lazy(() => ValueDefaultBoolean$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDefaultLegacy$ {
  /** @deprecated use `ValueDefaultLegacy$inboundSchema` instead. */
  export const inboundSchema = ValueDefaultLegacy$inboundSchema;
  /** @deprecated use `ValueDefaultLegacy$outboundSchema` instead. */
  export const outboundSchema = ValueDefaultLegacy$outboundSchema;
  /** @deprecated use `ValueDefaultLegacy$Outbound` instead. */
  export type Outbound = ValueDefaultLegacy$Outbound;
}

export function valueDefaultLegacyToJSON(
  valueDefaultLegacy: ValueDefaultLegacy,
): string {
  return JSON.stringify(
    ValueDefaultLegacy$outboundSchema.parse(valueDefaultLegacy),
  );
}

export function valueDefaultLegacyFromJSON(
  jsonString: string,
): SafeParseResult<ValueDefaultLegacy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueDefaultLegacy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueDefaultLegacy' from JSON`,
  );
}

/** @internal */
export const DefaultValueForAField$inboundSchema: z.ZodType<
  DefaultValueForAField,
  z.ZodTypeDef,
  unknown
> = z.object({
  stringValue: z.string().optional(),
  integerValue: z.number().int().optional(),
  booleanValue: z.boolean().optional(),
});

/** @internal */
export type DefaultValueForAField$Outbound = {
  stringValue?: string | undefined;
  integerValue?: number | undefined;
  booleanValue?: boolean | undefined;
};

/** @internal */
export const DefaultValueForAField$outboundSchema: z.ZodType<
  DefaultValueForAField$Outbound,
  z.ZodTypeDef,
  DefaultValueForAField
> = z.object({
  stringValue: z.string().optional(),
  integerValue: z.number().int().optional(),
  booleanValue: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultValueForAField$ {
  /** @deprecated use `DefaultValueForAField$inboundSchema` instead. */
  export const inboundSchema = DefaultValueForAField$inboundSchema;
  /** @deprecated use `DefaultValueForAField$outboundSchema` instead. */
  export const outboundSchema = DefaultValueForAField$outboundSchema;
  /** @deprecated use `DefaultValueForAField$Outbound` instead. */
  export type Outbound = DefaultValueForAField$Outbound;
}

export function defaultValueForAFieldToJSON(
  defaultValueForAField: DefaultValueForAField,
): string {
  return JSON.stringify(
    DefaultValueForAField$outboundSchema.parse(defaultValueForAField),
  );
}

export function defaultValueForAFieldFromJSON(
  jsonString: string,
): SafeParseResult<DefaultValueForAField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultValueForAField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultValueForAField' from JSON`,
  );
}

/** @internal */
export const WriteOnCreate$inboundSchema: z.ZodNativeEnum<
  typeof WriteOnCreate
> = z.nativeEnum(WriteOnCreate);

/** @internal */
export const WriteOnCreate$outboundSchema: z.ZodNativeEnum<
  typeof WriteOnCreate
> = WriteOnCreate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteOnCreate$ {
  /** @deprecated use `WriteOnCreate$inboundSchema` instead. */
  export const inboundSchema = WriteOnCreate$inboundSchema;
  /** @deprecated use `WriteOnCreate$outboundSchema` instead. */
  export const outboundSchema = WriteOnCreate$outboundSchema;
}

/** @internal */
export const WriteOnUpdate$inboundSchema: z.ZodNativeEnum<
  typeof WriteOnUpdate
> = z.nativeEnum(WriteOnUpdate);

/** @internal */
export const WriteOnUpdate$outboundSchema: z.ZodNativeEnum<
  typeof WriteOnUpdate
> = WriteOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteOnUpdate$ {
  /** @deprecated use `WriteOnUpdate$inboundSchema` instead. */
  export const inboundSchema = WriteOnUpdate$inboundSchema;
  /** @deprecated use `WriteOnUpdate$outboundSchema` instead. */
  export const outboundSchema = WriteOnUpdate$outboundSchema;
}

/** @internal */
export const FieldSetting$inboundSchema: z.ZodType<
  FieldSetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.lazy(() => DefaultValueForAField$inboundSchema).optional(),
  writeOnCreate: WriteOnCreate$inboundSchema.default("always"),
  writeOnUpdate: WriteOnUpdate$inboundSchema.default("always"),
});

/** @internal */
export type FieldSetting$Outbound = {
  default?: DefaultValueForAField$Outbound | undefined;
  writeOnCreate: string;
  writeOnUpdate: string;
};

/** @internal */
export const FieldSetting$outboundSchema: z.ZodType<
  FieldSetting$Outbound,
  z.ZodTypeDef,
  FieldSetting
> = z.object({
  default: z.lazy(() => DefaultValueForAField$outboundSchema).optional(),
  writeOnCreate: WriteOnCreate$outboundSchema.default("always"),
  writeOnUpdate: WriteOnUpdate$outboundSchema.default("always"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldSetting$ {
  /** @deprecated use `FieldSetting$inboundSchema` instead. */
  export const inboundSchema = FieldSetting$inboundSchema;
  /** @deprecated use `FieldSetting$outboundSchema` instead. */
  export const outboundSchema = FieldSetting$outboundSchema;
  /** @deprecated use `FieldSetting$Outbound` instead. */
  export type Outbound = FieldSetting$Outbound;
}

export function fieldSettingToJSON(fieldSetting: FieldSetting): string {
  return JSON.stringify(FieldSetting$outboundSchema.parse(fieldSetting));
}

export function fieldSettingFromJSON(
  jsonString: string,
): SafeParseResult<FieldSetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldSetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldSetting' from JSON`,
  );
}

/** @internal */
export const WriteConfigObject$inboundSchema: z.ZodType<
  WriteConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() => ValueDefaultString$inboundSchema),
      z.lazy(() => ValueDefaultInteger$inboundSchema),
      z.lazy(() => ValueDefaultBoolean$inboundSchema),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(z.lazy(() => FieldSetting$inboundSchema))
    .optional(),
});

/** @internal */
export type WriteConfigObject$Outbound = {
  objectName: string;
  selectedValueDefaults?: {
    [k: string]:
      | ValueDefaultString$Outbound
      | ValueDefaultInteger$Outbound
      | ValueDefaultBoolean$Outbound;
  } | undefined;
  selectedFieldSettings?: { [k: string]: FieldSetting$Outbound } | undefined;
};

/** @internal */
export const WriteConfigObject$outboundSchema: z.ZodType<
  WriteConfigObject$Outbound,
  z.ZodTypeDef,
  WriteConfigObject
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() => ValueDefaultString$outboundSchema),
      z.lazy(() => ValueDefaultInteger$outboundSchema),
      z.lazy(() => ValueDefaultBoolean$outboundSchema),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(z.lazy(() => FieldSetting$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteConfigObject$ {
  /** @deprecated use `WriteConfigObject$inboundSchema` instead. */
  export const inboundSchema = WriteConfigObject$inboundSchema;
  /** @deprecated use `WriteConfigObject$outboundSchema` instead. */
  export const outboundSchema = WriteConfigObject$outboundSchema;
  /** @deprecated use `WriteConfigObject$Outbound` instead. */
  export type Outbound = WriteConfigObject$Outbound;
}

export function writeConfigObjectToJSON(
  writeConfigObject: WriteConfigObject,
): string {
  return JSON.stringify(
    WriteConfigObject$outboundSchema.parse(writeConfigObject),
  );
}

export function writeConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<WriteConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteConfigObject' from JSON`,
  );
}

/** @internal */
export const WriteConfig$inboundSchema: z.ZodType<
  WriteConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(z.lazy(() => WriteConfigObject$inboundSchema)).optional(),
});

/** @internal */
export type WriteConfig$Outbound = {
  objects?: { [k: string]: WriteConfigObject$Outbound } | undefined;
};

/** @internal */
export const WriteConfig$outboundSchema: z.ZodType<
  WriteConfig$Outbound,
  z.ZodTypeDef,
  WriteConfig
> = z.object({
  objects: z.record(z.lazy(() => WriteConfigObject$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteConfig$ {
  /** @deprecated use `WriteConfig$inboundSchema` instead. */
  export const inboundSchema = WriteConfig$inboundSchema;
  /** @deprecated use `WriteConfig$outboundSchema` instead. */
  export const outboundSchema = WriteConfig$outboundSchema;
  /** @deprecated use `WriteConfig$Outbound` instead. */
  export type Outbound = WriteConfig$Outbound;
}

export function writeConfigToJSON(writeConfig: WriteConfig): string {
  return JSON.stringify(WriteConfig$outboundSchema.parse(writeConfig));
}

export function writeConfigFromJSON(
  jsonString: string,
): SafeParseResult<WriteConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteConfig' from JSON`,
  );
}

/** @internal */
export const BaseProxyConfig$inboundSchema: z.ZodType<
  BaseProxyConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type BaseProxyConfig$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const BaseProxyConfig$outboundSchema: z.ZodType<
  BaseProxyConfig$Outbound,
  z.ZodTypeDef,
  BaseProxyConfig
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseProxyConfig$ {
  /** @deprecated use `BaseProxyConfig$inboundSchema` instead. */
  export const inboundSchema = BaseProxyConfig$inboundSchema;
  /** @deprecated use `BaseProxyConfig$outboundSchema` instead. */
  export const outboundSchema = BaseProxyConfig$outboundSchema;
  /** @deprecated use `BaseProxyConfig$Outbound` instead. */
  export type Outbound = BaseProxyConfig$Outbound;
}

export function baseProxyConfigToJSON(
  baseProxyConfig: BaseProxyConfig,
): string {
  return JSON.stringify(BaseProxyConfig$outboundSchema.parse(baseProxyConfig));
}

export function baseProxyConfigFromJSON(
  jsonString: string,
): SafeParseResult<BaseProxyConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseProxyConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseProxyConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationEnabled$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationEnabled
> = z.nativeEnum(CreateInstallationEnabled);

/** @internal */
export const CreateInstallationEnabled$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationEnabled
> = CreateInstallationEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationEnabled$ {
  /** @deprecated use `CreateInstallationEnabled$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationEnabled$inboundSchema;
  /** @deprecated use `CreateInstallationEnabled$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationEnabled$outboundSchema;
}

/** @internal */
export const CreateInstallationCreateEvent$inboundSchema: z.ZodType<
  CreateInstallationCreateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: CreateInstallationEnabled$inboundSchema,
});

/** @internal */
export type CreateInstallationCreateEvent$Outbound = {
  enabled: string;
};

/** @internal */
export const CreateInstallationCreateEvent$outboundSchema: z.ZodType<
  CreateInstallationCreateEvent$Outbound,
  z.ZodTypeDef,
  CreateInstallationCreateEvent
> = z.object({
  enabled: CreateInstallationEnabled$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationCreateEvent$ {
  /** @deprecated use `CreateInstallationCreateEvent$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationCreateEvent$inboundSchema;
  /** @deprecated use `CreateInstallationCreateEvent$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationCreateEvent$outboundSchema;
  /** @deprecated use `CreateInstallationCreateEvent$Outbound` instead. */
  export type Outbound = CreateInstallationCreateEvent$Outbound;
}

export function createInstallationCreateEventToJSON(
  createInstallationCreateEvent: CreateInstallationCreateEvent,
): string {
  return JSON.stringify(
    CreateInstallationCreateEvent$outboundSchema.parse(
      createInstallationCreateEvent,
    ),
  );
}

export function createInstallationCreateEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationCreateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationCreateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationCreateEvent' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallationsEnabled$inboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsEnabled> = z.nativeEnum(
    CreateInstallationInstallationsEnabled,
  );

/** @internal */
export const CreateInstallationInstallationsEnabled$outboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsEnabled> =
    CreateInstallationInstallationsEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsEnabled$ {
  /** @deprecated use `CreateInstallationInstallationsEnabled$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsEnabled$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsEnabled$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsEnabled$outboundSchema;
}

/** @internal */
export const CreateInstallationWatchFieldsAuto$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationWatchFieldsAuto
> = z.nativeEnum(CreateInstallationWatchFieldsAuto);

/** @internal */
export const CreateInstallationWatchFieldsAuto$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationWatchFieldsAuto
> = CreateInstallationWatchFieldsAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationWatchFieldsAuto$ {
  /** @deprecated use `CreateInstallationWatchFieldsAuto$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationWatchFieldsAuto$inboundSchema;
  /** @deprecated use `CreateInstallationWatchFieldsAuto$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationWatchFieldsAuto$outboundSchema;
}

/** @internal */
export const CreateInstallationUpdateEvent$inboundSchema: z.ZodType<
  CreateInstallationUpdateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: CreateInstallationInstallationsEnabled$inboundSchema,
  watchFieldsAuto: CreateInstallationWatchFieldsAuto$inboundSchema.optional(),
  requiredWatchFields: z.array(z.string()).optional(),
});

/** @internal */
export type CreateInstallationUpdateEvent$Outbound = {
  enabled: string;
  watchFieldsAuto?: string | undefined;
  requiredWatchFields?: Array<string> | undefined;
};

/** @internal */
export const CreateInstallationUpdateEvent$outboundSchema: z.ZodType<
  CreateInstallationUpdateEvent$Outbound,
  z.ZodTypeDef,
  CreateInstallationUpdateEvent
> = z.object({
  enabled: CreateInstallationInstallationsEnabled$outboundSchema,
  watchFieldsAuto: CreateInstallationWatchFieldsAuto$outboundSchema.optional(),
  requiredWatchFields: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationUpdateEvent$ {
  /** @deprecated use `CreateInstallationUpdateEvent$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationUpdateEvent$inboundSchema;
  /** @deprecated use `CreateInstallationUpdateEvent$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationUpdateEvent$outboundSchema;
  /** @deprecated use `CreateInstallationUpdateEvent$Outbound` instead. */
  export type Outbound = CreateInstallationUpdateEvent$Outbound;
}

export function createInstallationUpdateEventToJSON(
  createInstallationUpdateEvent: CreateInstallationUpdateEvent,
): string {
  return JSON.stringify(
    CreateInstallationUpdateEvent$outboundSchema.parse(
      createInstallationUpdateEvent,
    ),
  );
}

export function createInstallationUpdateEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationUpdateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationUpdateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationUpdateEvent' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallationsRequestEnabled$inboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsRequestEnabled> = z
    .nativeEnum(CreateInstallationInstallationsRequestEnabled);

/** @internal */
export const CreateInstallationInstallationsRequestEnabled$outboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsRequestEnabled> =
    CreateInstallationInstallationsRequestEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsRequestEnabled$ {
  /** @deprecated use `CreateInstallationInstallationsRequestEnabled$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsRequestEnabled$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsRequestEnabled$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsRequestEnabled$outboundSchema;
}

/** @internal */
export const CreateInstallationDeleteEvent$inboundSchema: z.ZodType<
  CreateInstallationDeleteEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: CreateInstallationInstallationsRequestEnabled$inboundSchema,
});

/** @internal */
export type CreateInstallationDeleteEvent$Outbound = {
  enabled: string;
};

/** @internal */
export const CreateInstallationDeleteEvent$outboundSchema: z.ZodType<
  CreateInstallationDeleteEvent$Outbound,
  z.ZodTypeDef,
  CreateInstallationDeleteEvent
> = z.object({
  enabled: CreateInstallationInstallationsRequestEnabled$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationDeleteEvent$ {
  /** @deprecated use `CreateInstallationDeleteEvent$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationDeleteEvent$inboundSchema;
  /** @deprecated use `CreateInstallationDeleteEvent$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationDeleteEvent$outboundSchema;
  /** @deprecated use `CreateInstallationDeleteEvent$Outbound` instead. */
  export type Outbound = CreateInstallationDeleteEvent$Outbound;
}

export function createInstallationDeleteEventToJSON(
  createInstallationDeleteEvent: CreateInstallationDeleteEvent,
): string {
  return JSON.stringify(
    CreateInstallationDeleteEvent$outboundSchema.parse(
      createInstallationDeleteEvent,
    ),
  );
}

export function createInstallationDeleteEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationDeleteEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationDeleteEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationDeleteEvent' from JSON`,
  );
}

/** @internal */
export const SubscribeConfigObject$inboundSchema: z.ZodType<
  SubscribeConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  inheritFieldsAndMappings: z.boolean(),
  objectName: z.string(),
  destination: z.string(),
  createEvent: z.lazy(() => CreateInstallationCreateEvent$inboundSchema)
    .optional(),
  updateEvent: z.lazy(() => CreateInstallationUpdateEvent$inboundSchema)
    .optional(),
  deleteEvent: z.lazy(() => CreateInstallationDeleteEvent$inboundSchema)
    .optional(),
});

/** @internal */
export type SubscribeConfigObject$Outbound = {
  inheritFieldsAndMappings: boolean;
  objectName: string;
  destination: string;
  createEvent?: CreateInstallationCreateEvent$Outbound | undefined;
  updateEvent?: CreateInstallationUpdateEvent$Outbound | undefined;
  deleteEvent?: CreateInstallationDeleteEvent$Outbound | undefined;
};

/** @internal */
export const SubscribeConfigObject$outboundSchema: z.ZodType<
  SubscribeConfigObject$Outbound,
  z.ZodTypeDef,
  SubscribeConfigObject
> = z.object({
  inheritFieldsAndMappings: z.boolean(),
  objectName: z.string(),
  destination: z.string(),
  createEvent: z.lazy(() => CreateInstallationCreateEvent$outboundSchema)
    .optional(),
  updateEvent: z.lazy(() => CreateInstallationUpdateEvent$outboundSchema)
    .optional(),
  deleteEvent: z.lazy(() => CreateInstallationDeleteEvent$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribeConfigObject$ {
  /** @deprecated use `SubscribeConfigObject$inboundSchema` instead. */
  export const inboundSchema = SubscribeConfigObject$inboundSchema;
  /** @deprecated use `SubscribeConfigObject$outboundSchema` instead. */
  export const outboundSchema = SubscribeConfigObject$outboundSchema;
  /** @deprecated use `SubscribeConfigObject$Outbound` instead. */
  export type Outbound = SubscribeConfigObject$Outbound;
}

export function subscribeConfigObjectToJSON(
  subscribeConfigObject: SubscribeConfigObject,
): string {
  return JSON.stringify(
    SubscribeConfigObject$outboundSchema.parse(subscribeConfigObject),
  );
}

export function subscribeConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<SubscribeConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscribeConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscribeConfigObject' from JSON`,
  );
}

/** @internal */
export const SubscribeConfig$inboundSchema: z.ZodType<
  SubscribeConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(z.lazy(() => SubscribeConfigObject$inboundSchema)),
});

/** @internal */
export type SubscribeConfig$Outbound = {
  objects: { [k: string]: SubscribeConfigObject$Outbound };
};

/** @internal */
export const SubscribeConfig$outboundSchema: z.ZodType<
  SubscribeConfig$Outbound,
  z.ZodTypeDef,
  SubscribeConfig
> = z.object({
  objects: z.record(z.lazy(() => SubscribeConfigObject$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribeConfig$ {
  /** @deprecated use `SubscribeConfig$inboundSchema` instead. */
  export const inboundSchema = SubscribeConfig$inboundSchema;
  /** @deprecated use `SubscribeConfig$outboundSchema` instead. */
  export const outboundSchema = SubscribeConfig$outboundSchema;
  /** @deprecated use `SubscribeConfig$Outbound` instead. */
  export type Outbound = SubscribeConfig$Outbound;
}

export function subscribeConfigToJSON(
  subscribeConfig: SubscribeConfig,
): string {
  return JSON.stringify(SubscribeConfig$outboundSchema.parse(subscribeConfig));
}

export function subscribeConfigFromJSON(
  jsonString: string,
): SafeParseResult<SubscribeConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscribeConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscribeConfig' from JSON`,
  );
}

/** @internal */
export const ConfigContent$inboundSchema: z.ZodType<
  ConfigContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
  read: z.lazy(() => ReadConfig$inboundSchema).optional(),
  write: z.lazy(() => WriteConfig$inboundSchema).optional(),
  proxy: z.lazy(() => BaseProxyConfig$inboundSchema).optional(),
  subscribe: z.lazy(() => SubscribeConfig$inboundSchema).optional(),
});

/** @internal */
export type ConfigContent$Outbound = {
  provider: string;
  read?: ReadConfig$Outbound | undefined;
  write?: WriteConfig$Outbound | undefined;
  proxy?: BaseProxyConfig$Outbound | undefined;
  subscribe?: SubscribeConfig$Outbound | undefined;
};

/** @internal */
export const ConfigContent$outboundSchema: z.ZodType<
  ConfigContent$Outbound,
  z.ZodTypeDef,
  ConfigContent
> = z.object({
  provider: z.string(),
  read: z.lazy(() => ReadConfig$outboundSchema).optional(),
  write: z.lazy(() => WriteConfig$outboundSchema).optional(),
  proxy: z.lazy(() => BaseProxyConfig$outboundSchema).optional(),
  subscribe: z.lazy(() => SubscribeConfig$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigContent$ {
  /** @deprecated use `ConfigContent$inboundSchema` instead. */
  export const inboundSchema = ConfigContent$inboundSchema;
  /** @deprecated use `ConfigContent$outboundSchema` instead. */
  export const outboundSchema = ConfigContent$outboundSchema;
  /** @deprecated use `ConfigContent$Outbound` instead. */
  export type Outbound = ConfigContent$Outbound;
}

export function configContentToJSON(configContent: ConfigContent): string {
  return JSON.stringify(ConfigContent$outboundSchema.parse(configContent));
}

export function configContentFromJSON(
  jsonString: string,
): SafeParseResult<ConfigContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigContent' from JSON`,
  );
}

/** @internal */
export const Config$inboundSchema: z.ZodType<Config, z.ZodTypeDef, unknown> = z
  .object({
    revisionId: z.string().optional(),
    createdBy: z.string().default("api:create-installation"),
    content: z.lazy(() => ConfigContent$inboundSchema),
  });

/** @internal */
export type Config$Outbound = {
  revisionId?: string | undefined;
  createdBy: string;
  content: ConfigContent$Outbound;
};

/** @internal */
export const Config$outboundSchema: z.ZodType<
  Config$Outbound,
  z.ZodTypeDef,
  Config
> = z.object({
  revisionId: z.string().optional(),
  createdBy: z.string().default("api:create-installation"),
  content: z.lazy(() => ConfigContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Config$ {
  /** @deprecated use `Config$inboundSchema` instead. */
  export const inboundSchema = Config$inboundSchema;
  /** @deprecated use `Config$outboundSchema` instead. */
  export const outboundSchema = Config$outboundSchema;
  /** @deprecated use `Config$Outbound` instead. */
  export type Outbound = Config$Outbound;
}

export function configToJSON(config: Config): string {
  return JSON.stringify(Config$outboundSchema.parse(config));
}

export function configFromJSON(
  jsonString: string,
): SafeParseResult<Config, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Config$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Config' from JSON`,
  );
}

/** @internal */
export const CreateInstallationRequestBody$inboundSchema: z.ZodType<
  CreateInstallationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  connectionId: z.string().optional(),
  config: z.lazy(() => Config$inboundSchema),
});

/** @internal */
export type CreateInstallationRequestBody$Outbound = {
  groupRef: string;
  connectionId?: string | undefined;
  config: Config$Outbound;
};

/** @internal */
export const CreateInstallationRequestBody$outboundSchema: z.ZodType<
  CreateInstallationRequestBody$Outbound,
  z.ZodTypeDef,
  CreateInstallationRequestBody
> = z.object({
  groupRef: z.string(),
  connectionId: z.string().optional(),
  config: z.lazy(() => Config$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationRequestBody$ {
  /** @deprecated use `CreateInstallationRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationRequestBody$inboundSchema;
  /** @deprecated use `CreateInstallationRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationRequestBody$outboundSchema;
  /** @deprecated use `CreateInstallationRequestBody$Outbound` instead. */
  export type Outbound = CreateInstallationRequestBody$Outbound;
}

export function createInstallationRequestBodyToJSON(
  createInstallationRequestBody: CreateInstallationRequestBody,
): string {
  return JSON.stringify(
    CreateInstallationRequestBody$outboundSchema.parse(
      createInstallationRequestBody,
    ),
  );
}

export function createInstallationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateInstallationRequest$inboundSchema: z.ZodType<
  CreateInstallationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  RequestBody: z.lazy(() => CreateInstallationRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateInstallationRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  RequestBody: CreateInstallationRequestBody$Outbound;
};

/** @internal */
export const CreateInstallationRequest$outboundSchema: z.ZodType<
  CreateInstallationRequest$Outbound,
  z.ZodTypeDef,
  CreateInstallationRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  requestBody: z.lazy(() => CreateInstallationRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationRequest$ {
  /** @deprecated use `CreateInstallationRequest$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationRequest$inboundSchema;
  /** @deprecated use `CreateInstallationRequest$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationRequest$outboundSchema;
  /** @deprecated use `CreateInstallationRequest$Outbound` instead. */
  export type Outbound = CreateInstallationRequest$Outbound;
}

export function createInstallationRequestToJSON(
  createInstallationRequest: CreateInstallationRequest,
): string {
  return JSON.stringify(
    CreateInstallationRequest$outboundSchema.parse(createInstallationRequest),
  );
}

export function createInstallationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationRequest' from JSON`,
  );
}

/** @internal */
export const CreateInstallationAPIProblem$inboundSchema: z.ZodType<
  CreateInstallationAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type CreateInstallationAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateInstallationAPIProblem$outboundSchema: z.ZodType<
  CreateInstallationAPIProblem$Outbound,
  z.ZodTypeDef,
  CreateInstallationAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationAPIProblem$ {
  /** @deprecated use `CreateInstallationAPIProblem$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationAPIProblem$inboundSchema;
  /** @deprecated use `CreateInstallationAPIProblem$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationAPIProblem$outboundSchema;
  /** @deprecated use `CreateInstallationAPIProblem$Outbound` instead. */
  export type Outbound = CreateInstallationAPIProblem$Outbound;
}

export function createInstallationAPIProblemToJSON(
  createInstallationAPIProblem: CreateInstallationAPIProblem,
): string {
  return JSON.stringify(
    CreateInstallationAPIProblem$outboundSchema.parse(
      createInstallationAPIProblem,
    ),
  );
}

export function createInstallationAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationAPIProblem' from JSON`,
  );
}

/** @internal */
export const CreateInstallationGroup$inboundSchema: z.ZodType<
  CreateInstallationGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateInstallationGroup$outboundSchema: z.ZodType<
  CreateInstallationGroup$Outbound,
  z.ZodTypeDef,
  CreateInstallationGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationGroup$ {
  /** @deprecated use `CreateInstallationGroup$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationGroup$inboundSchema;
  /** @deprecated use `CreateInstallationGroup$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationGroup$outboundSchema;
  /** @deprecated use `CreateInstallationGroup$Outbound` instead. */
  export type Outbound = CreateInstallationGroup$Outbound;
}

export function createInstallationGroupToJSON(
  createInstallationGroup: CreateInstallationGroup,
): string {
  return JSON.stringify(
    CreateInstallationGroup$outboundSchema.parse(createInstallationGroup),
  );
}

export function createInstallationGroupFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationGroup' from JSON`,
  );
}

/** @internal */
export const CreateInstallationProviderApp$inboundSchema: z.ZodType<
  CreateInstallationProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateInstallationProviderApp$outboundSchema: z.ZodType<
  CreateInstallationProviderApp$Outbound,
  z.ZodTypeDef,
  CreateInstallationProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationProviderApp$ {
  /** @deprecated use `CreateInstallationProviderApp$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationProviderApp$inboundSchema;
  /** @deprecated use `CreateInstallationProviderApp$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationProviderApp$outboundSchema;
  /** @deprecated use `CreateInstallationProviderApp$Outbound` instead. */
  export type Outbound = CreateInstallationProviderApp$Outbound;
}

export function createInstallationProviderAppToJSON(
  createInstallationProviderApp: CreateInstallationProviderApp,
): string {
  return JSON.stringify(
    CreateInstallationProviderApp$outboundSchema.parse(
      createInstallationProviderApp,
    ),
  );
}

export function createInstallationProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationProviderApp' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallationsGroup$inboundSchema: z.ZodType<
  CreateInstallationInstallationsGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationInstallationsGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateInstallationInstallationsGroup$outboundSchema: z.ZodType<
  CreateInstallationInstallationsGroup$Outbound,
  z.ZodTypeDef,
  CreateInstallationInstallationsGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsGroup$ {
  /** @deprecated use `CreateInstallationInstallationsGroup$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsGroup$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsGroup$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsGroup$outboundSchema;
  /** @deprecated use `CreateInstallationInstallationsGroup$Outbound` instead. */
  export type Outbound = CreateInstallationInstallationsGroup$Outbound;
}

export function createInstallationInstallationsGroupToJSON(
  createInstallationInstallationsGroup: CreateInstallationInstallationsGroup,
): string {
  return JSON.stringify(
    CreateInstallationInstallationsGroup$outboundSchema.parse(
      createInstallationInstallationsGroup,
    ),
  );
}

export function createInstallationInstallationsGroupFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationInstallationsGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationInstallationsGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationInstallationsGroup' from JSON`,
  );
}

/** @internal */
export const CreateInstallationConsumer$inboundSchema: z.ZodType<
  CreateInstallationConsumer,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationConsumer$Outbound = {
  consumerRef: string;
  consumerName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateInstallationConsumer$outboundSchema: z.ZodType<
  CreateInstallationConsumer$Outbound,
  z.ZodTypeDef,
  CreateInstallationConsumer
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationConsumer$ {
  /** @deprecated use `CreateInstallationConsumer$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationConsumer$inboundSchema;
  /** @deprecated use `CreateInstallationConsumer$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationConsumer$outboundSchema;
  /** @deprecated use `CreateInstallationConsumer$Outbound` instead. */
  export type Outbound = CreateInstallationConsumer$Outbound;
}

export function createInstallationConsumerToJSON(
  createInstallationConsumer: CreateInstallationConsumer,
): string {
  return JSON.stringify(
    CreateInstallationConsumer$outboundSchema.parse(createInstallationConsumer),
  );
}

export function createInstallationConsumerFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationConsumer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationConsumer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationConsumer' from JSON`,
  );
}

/** @internal */
export const CreateInstallationAuthScheme$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationAuthScheme
> = z.nativeEnum(CreateInstallationAuthScheme);

/** @internal */
export const CreateInstallationAuthScheme$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationAuthScheme
> = CreateInstallationAuthScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationAuthScheme$ {
  /** @deprecated use `CreateInstallationAuthScheme$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationAuthScheme$inboundSchema;
  /** @deprecated use `CreateInstallationAuthScheme$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationAuthScheme$outboundSchema;
}

/** @internal */
export const CreateInstallationStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationStatus
> = z.nativeEnum(CreateInstallationStatus);

/** @internal */
export const CreateInstallationStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationStatus
> = CreateInstallationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationStatus$ {
  /** @deprecated use `CreateInstallationStatus$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationStatus$inboundSchema;
  /** @deprecated use `CreateInstallationStatus$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationStatus$outboundSchema;
}

/** @internal */
export const CreateInstallationAccessToken$inboundSchema: z.ZodType<
  CreateInstallationAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationAccessToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const CreateInstallationAccessToken$outboundSchema: z.ZodType<
  CreateInstallationAccessToken$Outbound,
  z.ZodTypeDef,
  CreateInstallationAccessToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationAccessToken$ {
  /** @deprecated use `CreateInstallationAccessToken$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationAccessToken$inboundSchema;
  /** @deprecated use `CreateInstallationAccessToken$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationAccessToken$outboundSchema;
  /** @deprecated use `CreateInstallationAccessToken$Outbound` instead. */
  export type Outbound = CreateInstallationAccessToken$Outbound;
}

export function createInstallationAccessTokenToJSON(
  createInstallationAccessToken: CreateInstallationAccessToken,
): string {
  return JSON.stringify(
    CreateInstallationAccessToken$outboundSchema.parse(
      createInstallationAccessToken,
    ),
  );
}

export function createInstallationAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationAccessToken' from JSON`,
  );
}

/** @internal */
export const CreateInstallationRefreshToken$inboundSchema: z.ZodType<
  CreateInstallationRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInstallationRefreshToken$Outbound = {
  token: string;
  issuedAt?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const CreateInstallationRefreshToken$outboundSchema: z.ZodType<
  CreateInstallationRefreshToken$Outbound,
  z.ZodTypeDef,
  CreateInstallationRefreshToken
> = z.object({
  token: z.string(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationRefreshToken$ {
  /** @deprecated use `CreateInstallationRefreshToken$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationRefreshToken$inboundSchema;
  /** @deprecated use `CreateInstallationRefreshToken$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationRefreshToken$outboundSchema;
  /** @deprecated use `CreateInstallationRefreshToken$Outbound` instead. */
  export type Outbound = CreateInstallationRefreshToken$Outbound;
}

export function createInstallationRefreshTokenToJSON(
  createInstallationRefreshToken: CreateInstallationRefreshToken,
): string {
  return JSON.stringify(
    CreateInstallationRefreshToken$outboundSchema.parse(
      createInstallationRefreshToken,
    ),
  );
}

export function createInstallationRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationRefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationRefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationRefreshToken' from JSON`,
  );
}

/** @internal */
export const CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema:
  z.ZodType<
    CreateInstallationOAuth2AuthorizationCodeToken,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessToken: z.lazy(() => CreateInstallationAccessToken$inboundSchema)
      .optional(),
    refreshToken: z.lazy(() => CreateInstallationRefreshToken$inboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/** @internal */
export type CreateInstallationOAuth2AuthorizationCodeToken$Outbound = {
  accessToken?: CreateInstallationAccessToken$Outbound | undefined;
  refreshToken?: CreateInstallationRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema:
  z.ZodType<
    CreateInstallationOAuth2AuthorizationCodeToken$Outbound,
    z.ZodTypeDef,
    CreateInstallationOAuth2AuthorizationCodeToken
  > = z.object({
    accessToken: z.lazy(() => CreateInstallationAccessToken$outboundSchema)
      .optional(),
    refreshToken: z.lazy(() => CreateInstallationRefreshToken$outboundSchema)
      .optional(),
    scopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationOAuth2AuthorizationCodeToken$ {
  /** @deprecated use `CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema;
  /** @deprecated use `CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema;
  /** @deprecated use `CreateInstallationOAuth2AuthorizationCodeToken$Outbound` instead. */
  export type Outbound =
    CreateInstallationOAuth2AuthorizationCodeToken$Outbound;
}

export function createInstallationOAuth2AuthorizationCodeTokenToJSON(
  createInstallationOAuth2AuthorizationCodeToken:
    CreateInstallationOAuth2AuthorizationCodeToken,
): string {
  return JSON.stringify(
    CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema.parse(
      createInstallationOAuth2AuthorizationCodeToken,
    ),
  );
}

export function createInstallationOAuth2AuthorizationCodeTokenFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationOAuth2AuthorizationCodeToken,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateInstallationOAuth2AuthorizationCodeToken' from JSON`,
  );
}

/** @internal */
export const CreateInstallationSource$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationSource
> = z.nativeEnum(CreateInstallationSource);

/** @internal */
export const CreateInstallationSource$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationSource
> = CreateInstallationSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationSource$ {
  /** @deprecated use `CreateInstallationSource$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationSource$inboundSchema;
  /** @deprecated use `CreateInstallationSource$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationSource$outboundSchema;
}

/** @internal */
export const CreateInstallationProviderMetadataInfo$inboundSchema: z.ZodType<
  CreateInstallationProviderMetadataInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  source: CreateInstallationSource$inboundSchema,
  displayName: z.string().optional(),
});

/** @internal */
export type CreateInstallationProviderMetadataInfo$Outbound = {
  value: string;
  source: string;
  displayName?: string | undefined;
};

/** @internal */
export const CreateInstallationProviderMetadataInfo$outboundSchema: z.ZodType<
  CreateInstallationProviderMetadataInfo$Outbound,
  z.ZodTypeDef,
  CreateInstallationProviderMetadataInfo
> = z.object({
  value: z.string(),
  source: CreateInstallationSource$outboundSchema,
  displayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationProviderMetadataInfo$ {
  /** @deprecated use `CreateInstallationProviderMetadataInfo$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationProviderMetadataInfo$inboundSchema;
  /** @deprecated use `CreateInstallationProviderMetadataInfo$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationProviderMetadataInfo$outboundSchema;
  /** @deprecated use `CreateInstallationProviderMetadataInfo$Outbound` instead. */
  export type Outbound = CreateInstallationProviderMetadataInfo$Outbound;
}

export function createInstallationProviderMetadataInfoToJSON(
  createInstallationProviderMetadataInfo:
    CreateInstallationProviderMetadataInfo,
): string {
  return JSON.stringify(
    CreateInstallationProviderMetadataInfo$outboundSchema.parse(
      createInstallationProviderMetadataInfo,
    ),
  );
}

export function createInstallationProviderMetadataInfoFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationProviderMetadataInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationProviderMetadataInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationProviderMetadataInfo' from JSON`,
  );
}

/** @internal */
export const CreateInstallationConnection$inboundSchema: z.ZodType<
  CreateInstallationConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => CreateInstallationProviderApp$inboundSchema)
    .optional(),
  group: z.lazy(() => CreateInstallationInstallationsGroup$inboundSchema),
  consumer: z.lazy(() => CreateInstallationConsumer$inboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  authScheme: CreateInstallationAuthScheme$inboundSchema,
  status: CreateInstallationStatus$inboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    CreateInstallationOAuth2AuthorizationCodeToken$inboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => CreateInstallationProviderMetadataInfo$inboundSchema),
  ).optional(),
});

/** @internal */
export type CreateInstallationConnection$Outbound = {
  id: string;
  projectId: string;
  provider: string;
  providerApp?: CreateInstallationProviderApp$Outbound | undefined;
  group: CreateInstallationInstallationsGroup$Outbound;
  consumer: CreateInstallationConsumer$Outbound;
  providerWorkspaceRef?: string | undefined;
  providerConsumerRef?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  authScheme: string;
  status: string;
  oauth2AuthorizationCode?:
    | CreateInstallationOAuth2AuthorizationCodeToken$Outbound
    | undefined;
  apiKey?: string | undefined;
  providerMetadata?: {
    [k: string]: CreateInstallationProviderMetadataInfo$Outbound;
  } | undefined;
};

/** @internal */
export const CreateInstallationConnection$outboundSchema: z.ZodType<
  CreateInstallationConnection$Outbound,
  z.ZodTypeDef,
  CreateInstallationConnection
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => CreateInstallationProviderApp$outboundSchema)
    .optional(),
  group: z.lazy(() => CreateInstallationInstallationsGroup$outboundSchema),
  consumer: z.lazy(() => CreateInstallationConsumer$outboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  authScheme: CreateInstallationAuthScheme$outboundSchema,
  status: CreateInstallationStatus$outboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    CreateInstallationOAuth2AuthorizationCodeToken$outboundSchema
  ).optional(),
  apiKey: z.string().optional(),
  providerMetadata: z.record(
    z.lazy(() => CreateInstallationProviderMetadataInfo$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationConnection$ {
  /** @deprecated use `CreateInstallationConnection$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationConnection$inboundSchema;
  /** @deprecated use `CreateInstallationConnection$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationConnection$outboundSchema;
  /** @deprecated use `CreateInstallationConnection$Outbound` instead. */
  export type Outbound = CreateInstallationConnection$Outbound;
}

export function createInstallationConnectionToJSON(
  createInstallationConnection: CreateInstallationConnection,
): string {
  return JSON.stringify(
    CreateInstallationConnection$outboundSchema.parse(
      createInstallationConnection,
    ),
  );
}

export function createInstallationConnectionFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationConnection' from JSON`,
  );
}

/** @internal */
export const CreateInstallationSelectedFieldsAutoConfig$inboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationSelectedFieldsAutoConfig> = z
    .nativeEnum(CreateInstallationSelectedFieldsAutoConfig);

/** @internal */
export const CreateInstallationSelectedFieldsAutoConfig$outboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationSelectedFieldsAutoConfig> =
    CreateInstallationSelectedFieldsAutoConfig$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationSelectedFieldsAutoConfig$ {
  /** @deprecated use `CreateInstallationSelectedFieldsAutoConfig$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationSelectedFieldsAutoConfig$inboundSchema;
  /** @deprecated use `CreateInstallationSelectedFieldsAutoConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationSelectedFieldsAutoConfig$outboundSchema;
}

/** @internal */
export const CreateInstallationDefaultPeriodConfig$inboundSchema: z.ZodType<
  CreateInstallationDefaultPeriodConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type CreateInstallationDefaultPeriodConfig$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const CreateInstallationDefaultPeriodConfig$outboundSchema: z.ZodType<
  CreateInstallationDefaultPeriodConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationDefaultPeriodConfig
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationDefaultPeriodConfig$ {
  /** @deprecated use `CreateInstallationDefaultPeriodConfig$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationDefaultPeriodConfig$inboundSchema;
  /** @deprecated use `CreateInstallationDefaultPeriodConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationDefaultPeriodConfig$outboundSchema;
  /** @deprecated use `CreateInstallationDefaultPeriodConfig$Outbound` instead. */
  export type Outbound = CreateInstallationDefaultPeriodConfig$Outbound;
}

export function createInstallationDefaultPeriodConfigToJSON(
  createInstallationDefaultPeriodConfig: CreateInstallationDefaultPeriodConfig,
): string {
  return JSON.stringify(
    CreateInstallationDefaultPeriodConfig$outboundSchema.parse(
      createInstallationDefaultPeriodConfig,
    ),
  );
}

export function createInstallationDefaultPeriodConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationDefaultPeriodConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationDefaultPeriodConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationDefaultPeriodConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationBackfillConfig$inboundSchema: z.ZodType<
  CreateInstallationBackfillConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() =>
    CreateInstallationDefaultPeriodConfig$inboundSchema
  ),
});

/** @internal */
export type CreateInstallationBackfillConfig$Outbound = {
  defaultPeriod: CreateInstallationDefaultPeriodConfig$Outbound;
};

/** @internal */
export const CreateInstallationBackfillConfig$outboundSchema: z.ZodType<
  CreateInstallationBackfillConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationBackfillConfig
> = z.object({
  defaultPeriod: z.lazy(() =>
    CreateInstallationDefaultPeriodConfig$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationBackfillConfig$ {
  /** @deprecated use `CreateInstallationBackfillConfig$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationBackfillConfig$inboundSchema;
  /** @deprecated use `CreateInstallationBackfillConfig$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationBackfillConfig$outboundSchema;
  /** @deprecated use `CreateInstallationBackfillConfig$Outbound` instead. */
  export type Outbound = CreateInstallationBackfillConfig$Outbound;
}

export function createInstallationBackfillConfigToJSON(
  createInstallationBackfillConfig: CreateInstallationBackfillConfig,
): string {
  return JSON.stringify(
    CreateInstallationBackfillConfig$outboundSchema.parse(
      createInstallationBackfillConfig,
    ),
  );
}

export function createInstallationBackfillConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationBackfillConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationBackfillConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationBackfillConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationReadConfigObject$inboundSchema: z.ZodType<
  CreateInstallationReadConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  schedule: z.string(),
  destination: z.string(),
  selectedFields: z.record(z.boolean()),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()),
  selectedFieldsAuto: CreateInstallationSelectedFieldsAutoConfig$inboundSchema
    .optional(),
  backfill: z.lazy(() => CreateInstallationBackfillConfig$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateInstallationReadConfigObject$Outbound = {
  objectName: string;
  schedule: string;
  destination: string;
  selectedFields: { [k: string]: boolean };
  selectedValueMappings?: { [k: string]: { [k: string]: string } } | undefined;
  selectedFieldMappings: { [k: string]: string };
  selectedFieldsAuto?: string | undefined;
  backfill?: CreateInstallationBackfillConfig$Outbound | undefined;
};

/** @internal */
export const CreateInstallationReadConfigObject$outboundSchema: z.ZodType<
  CreateInstallationReadConfigObject$Outbound,
  z.ZodTypeDef,
  CreateInstallationReadConfigObject
> = z.object({
  objectName: z.string(),
  schedule: z.string(),
  destination: z.string(),
  selectedFields: z.record(z.boolean()),
  selectedValueMappings: z.record(z.record(z.string())).optional(),
  selectedFieldMappings: z.record(z.string()),
  selectedFieldsAuto: CreateInstallationSelectedFieldsAutoConfig$outboundSchema
    .optional(),
  backfill: z.lazy(() => CreateInstallationBackfillConfig$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationReadConfigObject$ {
  /** @deprecated use `CreateInstallationReadConfigObject$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationReadConfigObject$inboundSchema;
  /** @deprecated use `CreateInstallationReadConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationReadConfigObject$outboundSchema;
  /** @deprecated use `CreateInstallationReadConfigObject$Outbound` instead. */
  export type Outbound = CreateInstallationReadConfigObject$Outbound;
}

export function createInstallationReadConfigObjectToJSON(
  createInstallationReadConfigObject: CreateInstallationReadConfigObject,
): string {
  return JSON.stringify(
    CreateInstallationReadConfigObject$outboundSchema.parse(
      createInstallationReadConfigObject,
    ),
  );
}

export function createInstallationReadConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationReadConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationReadConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationReadConfigObject' from JSON`,
  );
}

/** @internal */
export const CreateInstallationReadConfig$inboundSchema: z.ZodType<
  CreateInstallationReadConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => CreateInstallationReadConfigObject$inboundSchema),
  ),
});

/** @internal */
export type CreateInstallationReadConfig$Outbound = {
  objects: { [k: string]: CreateInstallationReadConfigObject$Outbound };
};

/** @internal */
export const CreateInstallationReadConfig$outboundSchema: z.ZodType<
  CreateInstallationReadConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationReadConfig
> = z.object({
  objects: z.record(
    z.lazy(() => CreateInstallationReadConfigObject$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationReadConfig$ {
  /** @deprecated use `CreateInstallationReadConfig$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationReadConfig$inboundSchema;
  /** @deprecated use `CreateInstallationReadConfig$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationReadConfig$outboundSchema;
  /** @deprecated use `CreateInstallationReadConfig$Outbound` instead. */
  export type Outbound = CreateInstallationReadConfig$Outbound;
}

export function createInstallationReadConfigToJSON(
  createInstallationReadConfig: CreateInstallationReadConfig,
): string {
  return JSON.stringify(
    CreateInstallationReadConfig$outboundSchema.parse(
      createInstallationReadConfig,
    ),
  );
}

export function createInstallationReadConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationReadConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationReadConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationReadConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate
  > = z.nativeEnum(
    CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate,
  );

/** @internal */
export const CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate
  > =
    CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$ {
  /** @deprecated use `CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$inboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$outboundSchema;
}

/** @internal */
export const CreateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema:
  z.ZodType<
    CreateInstallationValueDefaultLegacyValueDefaultBoolean,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.boolean(),
    applyOnUpdate:
      CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$inboundSchema
        .optional(),
  });

/** @internal */
export type CreateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound = {
  value: boolean;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const CreateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema:
  z.ZodType<
    CreateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound,
    z.ZodTypeDef,
    CreateInstallationValueDefaultLegacyValueDefaultBoolean
  > = z.object({
    value: z.boolean(),
    applyOnUpdate:
      CreateInstallationValueDefaultLegacyInstallationsResponse201ApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationValueDefaultLegacyValueDefaultBoolean$ {
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound` instead. */
  export type Outbound =
    CreateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound;
}

export function createInstallationValueDefaultLegacyValueDefaultBooleanToJSON(
  createInstallationValueDefaultLegacyValueDefaultBoolean:
    CreateInstallationValueDefaultLegacyValueDefaultBoolean,
): string {
  return JSON.stringify(
    CreateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema
      .parse(createInstallationValueDefaultLegacyValueDefaultBoolean),
  );
}

export function createInstallationValueDefaultLegacyValueDefaultBooleanFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationValueDefaultLegacyValueDefaultBoolean,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationValueDefaultLegacyValueDefaultBoolean' from JSON`,
  );
}

/** @internal */
export const CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate
  > = z.nativeEnum(
    CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate,
  );

/** @internal */
export const CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate
  > =
    CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$ {
  /** @deprecated use `CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema;
}

/** @internal */
export const CreateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema:
  z.ZodType<
    CreateInstallationValueDefaultLegacyValueDefaultInteger,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.number().int(),
    applyOnUpdate:
      CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$inboundSchema
        .optional(),
  });

/** @internal */
export type CreateInstallationValueDefaultLegacyValueDefaultInteger$Outbound = {
  value: number;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const CreateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema:
  z.ZodType<
    CreateInstallationValueDefaultLegacyValueDefaultInteger$Outbound,
    z.ZodTypeDef,
    CreateInstallationValueDefaultLegacyValueDefaultInteger
  > = z.object({
    value: z.number().int(),
    applyOnUpdate:
      CreateInstallationValueDefaultLegacyInstallationsResponseApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationValueDefaultLegacyValueDefaultInteger$ {
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultInteger$Outbound` instead. */
  export type Outbound =
    CreateInstallationValueDefaultLegacyValueDefaultInteger$Outbound;
}

export function createInstallationValueDefaultLegacyValueDefaultIntegerToJSON(
  createInstallationValueDefaultLegacyValueDefaultInteger:
    CreateInstallationValueDefaultLegacyValueDefaultInteger,
): string {
  return JSON.stringify(
    CreateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema
      .parse(createInstallationValueDefaultLegacyValueDefaultInteger),
  );
}

export function createInstallationValueDefaultLegacyValueDefaultIntegerFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationValueDefaultLegacyValueDefaultInteger,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationValueDefaultLegacyValueDefaultInteger' from JSON`,
  );
}

/** @internal */
export const CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate
  > = z.nativeEnum(
    CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate,
  );

/** @internal */
export const CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate
  > =
    CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$ {
  /** @deprecated use `CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema;
}

/** @internal */
export const CreateInstallationValueDefaultLegacyValueDefaultString$inboundSchema:
  z.ZodType<
    CreateInstallationValueDefaultLegacyValueDefaultString,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
    applyOnUpdate:
      CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$inboundSchema
        .optional(),
  });

/** @internal */
export type CreateInstallationValueDefaultLegacyValueDefaultString$Outbound = {
  value: string;
  applyOnUpdate?: string | undefined;
};

/** @internal */
export const CreateInstallationValueDefaultLegacyValueDefaultString$outboundSchema:
  z.ZodType<
    CreateInstallationValueDefaultLegacyValueDefaultString$Outbound,
    z.ZodTypeDef,
    CreateInstallationValueDefaultLegacyValueDefaultString
  > = z.object({
    value: z.string(),
    applyOnUpdate:
      CreateInstallationValueDefaultLegacyInstallationsApplyOnUpdate$outboundSchema
        .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationValueDefaultLegacyValueDefaultString$ {
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultString$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationValueDefaultLegacyValueDefaultString$inboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultString$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationValueDefaultLegacyValueDefaultString$outboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacyValueDefaultString$Outbound` instead. */
  export type Outbound =
    CreateInstallationValueDefaultLegacyValueDefaultString$Outbound;
}

export function createInstallationValueDefaultLegacyValueDefaultStringToJSON(
  createInstallationValueDefaultLegacyValueDefaultString:
    CreateInstallationValueDefaultLegacyValueDefaultString,
): string {
  return JSON.stringify(
    CreateInstallationValueDefaultLegacyValueDefaultString$outboundSchema.parse(
      createInstallationValueDefaultLegacyValueDefaultString,
    ),
  );
}

export function createInstallationValueDefaultLegacyValueDefaultStringFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationValueDefaultLegacyValueDefaultString,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationValueDefaultLegacyValueDefaultString$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationValueDefaultLegacyValueDefaultString' from JSON`,
  );
}

/** @internal */
export const CreateInstallationValueDefaultLegacy$inboundSchema: z.ZodType<
  CreateInstallationValueDefaultLegacy,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    CreateInstallationValueDefaultLegacyValueDefaultString$inboundSchema
  ),
  z.lazy(() =>
    CreateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema
  ),
  z.lazy(() =>
    CreateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema
  ),
]);

/** @internal */
export type CreateInstallationValueDefaultLegacy$Outbound =
  | CreateInstallationValueDefaultLegacyValueDefaultString$Outbound
  | CreateInstallationValueDefaultLegacyValueDefaultInteger$Outbound
  | CreateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound;

/** @internal */
export const CreateInstallationValueDefaultLegacy$outboundSchema: z.ZodType<
  CreateInstallationValueDefaultLegacy$Outbound,
  z.ZodTypeDef,
  CreateInstallationValueDefaultLegacy
> = z.union([
  z.lazy(() =>
    CreateInstallationValueDefaultLegacyValueDefaultString$outboundSchema
  ),
  z.lazy(() =>
    CreateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema
  ),
  z.lazy(() =>
    CreateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationValueDefaultLegacy$ {
  /** @deprecated use `CreateInstallationValueDefaultLegacy$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationValueDefaultLegacy$inboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacy$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationValueDefaultLegacy$outboundSchema;
  /** @deprecated use `CreateInstallationValueDefaultLegacy$Outbound` instead. */
  export type Outbound = CreateInstallationValueDefaultLegacy$Outbound;
}

export function createInstallationValueDefaultLegacyToJSON(
  createInstallationValueDefaultLegacy: CreateInstallationValueDefaultLegacy,
): string {
  return JSON.stringify(
    CreateInstallationValueDefaultLegacy$outboundSchema.parse(
      createInstallationValueDefaultLegacy,
    ),
  );
}

export function createInstallationValueDefaultLegacyFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationValueDefaultLegacy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationValueDefaultLegacy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationValueDefaultLegacy' from JSON`,
  );
}

/** @internal */
export const CreateInstallationDefaultValueForAField$inboundSchema: z.ZodType<
  CreateInstallationDefaultValueForAField,
  z.ZodTypeDef,
  unknown
> = z.object({
  stringValue: z.string().optional(),
  integerValue: z.number().int().optional(),
  booleanValue: z.boolean().optional(),
});

/** @internal */
export type CreateInstallationDefaultValueForAField$Outbound = {
  stringValue?: string | undefined;
  integerValue?: number | undefined;
  booleanValue?: boolean | undefined;
};

/** @internal */
export const CreateInstallationDefaultValueForAField$outboundSchema: z.ZodType<
  CreateInstallationDefaultValueForAField$Outbound,
  z.ZodTypeDef,
  CreateInstallationDefaultValueForAField
> = z.object({
  stringValue: z.string().optional(),
  integerValue: z.number().int().optional(),
  booleanValue: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationDefaultValueForAField$ {
  /** @deprecated use `CreateInstallationDefaultValueForAField$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationDefaultValueForAField$inboundSchema;
  /** @deprecated use `CreateInstallationDefaultValueForAField$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationDefaultValueForAField$outboundSchema;
  /** @deprecated use `CreateInstallationDefaultValueForAField$Outbound` instead. */
  export type Outbound = CreateInstallationDefaultValueForAField$Outbound;
}

export function createInstallationDefaultValueForAFieldToJSON(
  createInstallationDefaultValueForAField:
    CreateInstallationDefaultValueForAField,
): string {
  return JSON.stringify(
    CreateInstallationDefaultValueForAField$outboundSchema.parse(
      createInstallationDefaultValueForAField,
    ),
  );
}

export function createInstallationDefaultValueForAFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationDefaultValueForAField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationDefaultValueForAField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateInstallationDefaultValueForAField' from JSON`,
  );
}

/** @internal */
export const CreateInstallationWriteOnCreate$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationWriteOnCreate
> = z.nativeEnum(CreateInstallationWriteOnCreate);

/** @internal */
export const CreateInstallationWriteOnCreate$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationWriteOnCreate
> = CreateInstallationWriteOnCreate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationWriteOnCreate$ {
  /** @deprecated use `CreateInstallationWriteOnCreate$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationWriteOnCreate$inboundSchema;
  /** @deprecated use `CreateInstallationWriteOnCreate$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationWriteOnCreate$outboundSchema;
}

/** @internal */
export const CreateInstallationWriteOnUpdate$inboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationWriteOnUpdate
> = z.nativeEnum(CreateInstallationWriteOnUpdate);

/** @internal */
export const CreateInstallationWriteOnUpdate$outboundSchema: z.ZodNativeEnum<
  typeof CreateInstallationWriteOnUpdate
> = CreateInstallationWriteOnUpdate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationWriteOnUpdate$ {
  /** @deprecated use `CreateInstallationWriteOnUpdate$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationWriteOnUpdate$inboundSchema;
  /** @deprecated use `CreateInstallationWriteOnUpdate$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationWriteOnUpdate$outboundSchema;
}

/** @internal */
export const CreateInstallationFieldSetting$inboundSchema: z.ZodType<
  CreateInstallationFieldSetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.lazy(() => CreateInstallationDefaultValueForAField$inboundSchema)
    .optional(),
  writeOnCreate: CreateInstallationWriteOnCreate$inboundSchema.default(
    "always",
  ),
  writeOnUpdate: CreateInstallationWriteOnUpdate$inboundSchema.default(
    "always",
  ),
});

/** @internal */
export type CreateInstallationFieldSetting$Outbound = {
  default?: CreateInstallationDefaultValueForAField$Outbound | undefined;
  writeOnCreate: string;
  writeOnUpdate: string;
};

/** @internal */
export const CreateInstallationFieldSetting$outboundSchema: z.ZodType<
  CreateInstallationFieldSetting$Outbound,
  z.ZodTypeDef,
  CreateInstallationFieldSetting
> = z.object({
  default: z.lazy(() => CreateInstallationDefaultValueForAField$outboundSchema)
    .optional(),
  writeOnCreate: CreateInstallationWriteOnCreate$outboundSchema.default(
    "always",
  ),
  writeOnUpdate: CreateInstallationWriteOnUpdate$outboundSchema.default(
    "always",
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationFieldSetting$ {
  /** @deprecated use `CreateInstallationFieldSetting$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationFieldSetting$inboundSchema;
  /** @deprecated use `CreateInstallationFieldSetting$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationFieldSetting$outboundSchema;
  /** @deprecated use `CreateInstallationFieldSetting$Outbound` instead. */
  export type Outbound = CreateInstallationFieldSetting$Outbound;
}

export function createInstallationFieldSettingToJSON(
  createInstallationFieldSetting: CreateInstallationFieldSetting,
): string {
  return JSON.stringify(
    CreateInstallationFieldSetting$outboundSchema.parse(
      createInstallationFieldSetting,
    ),
  );
}

export function createInstallationFieldSettingFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationFieldSetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationFieldSetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationFieldSetting' from JSON`,
  );
}

/** @internal */
export const CreateInstallationWriteConfigObject$inboundSchema: z.ZodType<
  CreateInstallationWriteConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() =>
        CreateInstallationValueDefaultLegacyValueDefaultString$inboundSchema
      ),
      z.lazy(() =>
        CreateInstallationValueDefaultLegacyValueDefaultInteger$inboundSchema
      ),
      z.lazy(() =>
        CreateInstallationValueDefaultLegacyValueDefaultBoolean$inboundSchema
      ),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(
    z.lazy(() => CreateInstallationFieldSetting$inboundSchema),
  ).optional(),
});

/** @internal */
export type CreateInstallationWriteConfigObject$Outbound = {
  objectName: string;
  selectedValueDefaults?: {
    [k: string]:
      | CreateInstallationValueDefaultLegacyValueDefaultString$Outbound
      | CreateInstallationValueDefaultLegacyValueDefaultInteger$Outbound
      | CreateInstallationValueDefaultLegacyValueDefaultBoolean$Outbound;
  } | undefined;
  selectedFieldSettings?: {
    [k: string]: CreateInstallationFieldSetting$Outbound;
  } | undefined;
};

/** @internal */
export const CreateInstallationWriteConfigObject$outboundSchema: z.ZodType<
  CreateInstallationWriteConfigObject$Outbound,
  z.ZodTypeDef,
  CreateInstallationWriteConfigObject
> = z.object({
  objectName: z.string(),
  selectedValueDefaults: z.record(
    z.union([
      z.lazy(() =>
        CreateInstallationValueDefaultLegacyValueDefaultString$outboundSchema
      ),
      z.lazy(() =>
        CreateInstallationValueDefaultLegacyValueDefaultInteger$outboundSchema
      ),
      z.lazy(() =>
        CreateInstallationValueDefaultLegacyValueDefaultBoolean$outboundSchema
      ),
    ]),
  ).optional(),
  selectedFieldSettings: z.record(
    z.lazy(() => CreateInstallationFieldSetting$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationWriteConfigObject$ {
  /** @deprecated use `CreateInstallationWriteConfigObject$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationWriteConfigObject$inboundSchema;
  /** @deprecated use `CreateInstallationWriteConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationWriteConfigObject$outboundSchema;
  /** @deprecated use `CreateInstallationWriteConfigObject$Outbound` instead. */
  export type Outbound = CreateInstallationWriteConfigObject$Outbound;
}

export function createInstallationWriteConfigObjectToJSON(
  createInstallationWriteConfigObject: CreateInstallationWriteConfigObject,
): string {
  return JSON.stringify(
    CreateInstallationWriteConfigObject$outboundSchema.parse(
      createInstallationWriteConfigObject,
    ),
  );
}

export function createInstallationWriteConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationWriteConfigObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationWriteConfigObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationWriteConfigObject' from JSON`,
  );
}

/** @internal */
export const CreateInstallationWriteConfig$inboundSchema: z.ZodType<
  CreateInstallationWriteConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => CreateInstallationWriteConfigObject$inboundSchema),
  ).optional(),
});

/** @internal */
export type CreateInstallationWriteConfig$Outbound = {
  objects?:
    | { [k: string]: CreateInstallationWriteConfigObject$Outbound }
    | undefined;
};

/** @internal */
export const CreateInstallationWriteConfig$outboundSchema: z.ZodType<
  CreateInstallationWriteConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationWriteConfig
> = z.object({
  objects: z.record(
    z.lazy(() => CreateInstallationWriteConfigObject$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationWriteConfig$ {
  /** @deprecated use `CreateInstallationWriteConfig$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationWriteConfig$inboundSchema;
  /** @deprecated use `CreateInstallationWriteConfig$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationWriteConfig$outboundSchema;
  /** @deprecated use `CreateInstallationWriteConfig$Outbound` instead. */
  export type Outbound = CreateInstallationWriteConfig$Outbound;
}

export function createInstallationWriteConfigToJSON(
  createInstallationWriteConfig: CreateInstallationWriteConfig,
): string {
  return JSON.stringify(
    CreateInstallationWriteConfig$outboundSchema.parse(
      createInstallationWriteConfig,
    ),
  );
}

export function createInstallationWriteConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationWriteConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationWriteConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationWriteConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationBaseProxyConfig$inboundSchema: z.ZodType<
  CreateInstallationBaseProxyConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type CreateInstallationBaseProxyConfig$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const CreateInstallationBaseProxyConfig$outboundSchema: z.ZodType<
  CreateInstallationBaseProxyConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationBaseProxyConfig
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationBaseProxyConfig$ {
  /** @deprecated use `CreateInstallationBaseProxyConfig$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationBaseProxyConfig$inboundSchema;
  /** @deprecated use `CreateInstallationBaseProxyConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationBaseProxyConfig$outboundSchema;
  /** @deprecated use `CreateInstallationBaseProxyConfig$Outbound` instead. */
  export type Outbound = CreateInstallationBaseProxyConfig$Outbound;
}

export function createInstallationBaseProxyConfigToJSON(
  createInstallationBaseProxyConfig: CreateInstallationBaseProxyConfig,
): string {
  return JSON.stringify(
    CreateInstallationBaseProxyConfig$outboundSchema.parse(
      createInstallationBaseProxyConfig,
    ),
  );
}

export function createInstallationBaseProxyConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationBaseProxyConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationBaseProxyConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationBaseProxyConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallationsResponseEnabled$inboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsResponseEnabled> = z
    .nativeEnum(CreateInstallationInstallationsResponseEnabled);

/** @internal */
export const CreateInstallationInstallationsResponseEnabled$outboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsResponseEnabled> =
    CreateInstallationInstallationsResponseEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsResponseEnabled$ {
  /** @deprecated use `CreateInstallationInstallationsResponseEnabled$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsResponseEnabled$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsResponseEnabled$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsResponseEnabled$outboundSchema;
}

/** @internal */
export const CreateInstallationInstallationsCreateEvent$inboundSchema:
  z.ZodType<CreateInstallationInstallationsCreateEvent, z.ZodTypeDef, unknown> =
    z.object({
      enabled: CreateInstallationInstallationsResponseEnabled$inboundSchema,
    });

/** @internal */
export type CreateInstallationInstallationsCreateEvent$Outbound = {
  enabled: string;
};

/** @internal */
export const CreateInstallationInstallationsCreateEvent$outboundSchema:
  z.ZodType<
    CreateInstallationInstallationsCreateEvent$Outbound,
    z.ZodTypeDef,
    CreateInstallationInstallationsCreateEvent
  > = z.object({
    enabled: CreateInstallationInstallationsResponseEnabled$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsCreateEvent$ {
  /** @deprecated use `CreateInstallationInstallationsCreateEvent$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsCreateEvent$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsCreateEvent$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsCreateEvent$outboundSchema;
  /** @deprecated use `CreateInstallationInstallationsCreateEvent$Outbound` instead. */
  export type Outbound = CreateInstallationInstallationsCreateEvent$Outbound;
}

export function createInstallationInstallationsCreateEventToJSON(
  createInstallationInstallationsCreateEvent:
    CreateInstallationInstallationsCreateEvent,
): string {
  return JSON.stringify(
    CreateInstallationInstallationsCreateEvent$outboundSchema.parse(
      createInstallationInstallationsCreateEvent,
    ),
  );
}

export function createInstallationInstallationsCreateEventFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationInstallationsCreateEvent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationInstallationsCreateEvent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateInstallationInstallationsCreateEvent' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallationsResponse201Enabled$inboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsResponse201Enabled> = z
    .nativeEnum(CreateInstallationInstallationsResponse201Enabled);

/** @internal */
export const CreateInstallationInstallationsResponse201Enabled$outboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsResponse201Enabled> =
    CreateInstallationInstallationsResponse201Enabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsResponse201Enabled$ {
  /** @deprecated use `CreateInstallationInstallationsResponse201Enabled$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsResponse201Enabled$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsResponse201Enabled$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsResponse201Enabled$outboundSchema;
}

/** @internal */
export const CreateInstallationInstallationsWatchFieldsAuto$inboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsWatchFieldsAuto> = z
    .nativeEnum(CreateInstallationInstallationsWatchFieldsAuto);

/** @internal */
export const CreateInstallationInstallationsWatchFieldsAuto$outboundSchema:
  z.ZodNativeEnum<typeof CreateInstallationInstallationsWatchFieldsAuto> =
    CreateInstallationInstallationsWatchFieldsAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsWatchFieldsAuto$ {
  /** @deprecated use `CreateInstallationInstallationsWatchFieldsAuto$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsWatchFieldsAuto$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsWatchFieldsAuto$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsWatchFieldsAuto$outboundSchema;
}

/** @internal */
export const CreateInstallationInstallationsUpdateEvent$inboundSchema:
  z.ZodType<CreateInstallationInstallationsUpdateEvent, z.ZodTypeDef, unknown> =
    z.object({
      enabled: CreateInstallationInstallationsResponse201Enabled$inboundSchema,
      watchFieldsAuto:
        CreateInstallationInstallationsWatchFieldsAuto$inboundSchema.optional(),
      requiredWatchFields: z.array(z.string()).optional(),
    });

/** @internal */
export type CreateInstallationInstallationsUpdateEvent$Outbound = {
  enabled: string;
  watchFieldsAuto?: string | undefined;
  requiredWatchFields?: Array<string> | undefined;
};

/** @internal */
export const CreateInstallationInstallationsUpdateEvent$outboundSchema:
  z.ZodType<
    CreateInstallationInstallationsUpdateEvent$Outbound,
    z.ZodTypeDef,
    CreateInstallationInstallationsUpdateEvent
  > = z.object({
    enabled: CreateInstallationInstallationsResponse201Enabled$outboundSchema,
    watchFieldsAuto:
      CreateInstallationInstallationsWatchFieldsAuto$outboundSchema.optional(),
    requiredWatchFields: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsUpdateEvent$ {
  /** @deprecated use `CreateInstallationInstallationsUpdateEvent$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsUpdateEvent$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsUpdateEvent$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsUpdateEvent$outboundSchema;
  /** @deprecated use `CreateInstallationInstallationsUpdateEvent$Outbound` instead. */
  export type Outbound = CreateInstallationInstallationsUpdateEvent$Outbound;
}

export function createInstallationInstallationsUpdateEventToJSON(
  createInstallationInstallationsUpdateEvent:
    CreateInstallationInstallationsUpdateEvent,
): string {
  return JSON.stringify(
    CreateInstallationInstallationsUpdateEvent$outboundSchema.parse(
      createInstallationInstallationsUpdateEvent,
    ),
  );
}

export function createInstallationInstallationsUpdateEventFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationInstallationsUpdateEvent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationInstallationsUpdateEvent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateInstallationInstallationsUpdateEvent' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallationsResponse201ApplicationJSONEnabled$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateInstallationInstallationsResponse201ApplicationJSONEnabled
  > = z.nativeEnum(
    CreateInstallationInstallationsResponse201ApplicationJSONEnabled,
  );

/** @internal */
export const CreateInstallationInstallationsResponse201ApplicationJSONEnabled$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateInstallationInstallationsResponse201ApplicationJSONEnabled
  > =
    CreateInstallationInstallationsResponse201ApplicationJSONEnabled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsResponse201ApplicationJSONEnabled$ {
  /** @deprecated use `CreateInstallationInstallationsResponse201ApplicationJSONEnabled$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsResponse201ApplicationJSONEnabled$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsResponse201ApplicationJSONEnabled$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsResponse201ApplicationJSONEnabled$outboundSchema;
}

/** @internal */
export const CreateInstallationInstallationsDeleteEvent$inboundSchema:
  z.ZodType<CreateInstallationInstallationsDeleteEvent, z.ZodTypeDef, unknown> =
    z.object({
      enabled:
        CreateInstallationInstallationsResponse201ApplicationJSONEnabled$inboundSchema,
    });

/** @internal */
export type CreateInstallationInstallationsDeleteEvent$Outbound = {
  enabled: string;
};

/** @internal */
export const CreateInstallationInstallationsDeleteEvent$outboundSchema:
  z.ZodType<
    CreateInstallationInstallationsDeleteEvent$Outbound,
    z.ZodTypeDef,
    CreateInstallationInstallationsDeleteEvent
  > = z.object({
    enabled:
      CreateInstallationInstallationsResponse201ApplicationJSONEnabled$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallationsDeleteEvent$ {
  /** @deprecated use `CreateInstallationInstallationsDeleteEvent$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationInstallationsDeleteEvent$inboundSchema;
  /** @deprecated use `CreateInstallationInstallationsDeleteEvent$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationInstallationsDeleteEvent$outboundSchema;
  /** @deprecated use `CreateInstallationInstallationsDeleteEvent$Outbound` instead. */
  export type Outbound = CreateInstallationInstallationsDeleteEvent$Outbound;
}

export function createInstallationInstallationsDeleteEventToJSON(
  createInstallationInstallationsDeleteEvent:
    CreateInstallationInstallationsDeleteEvent,
): string {
  return JSON.stringify(
    CreateInstallationInstallationsDeleteEvent$outboundSchema.parse(
      createInstallationInstallationsDeleteEvent,
    ),
  );
}

export function createInstallationInstallationsDeleteEventFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationInstallationsDeleteEvent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationInstallationsDeleteEvent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateInstallationInstallationsDeleteEvent' from JSON`,
  );
}

/** @internal */
export const CreateInstallationSubscribeConfigObject$inboundSchema: z.ZodType<
  CreateInstallationSubscribeConfigObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  inheritFieldsAndMappings: z.boolean(),
  objectName: z.string(),
  destination: z.string(),
  createEvent: z.lazy(() =>
    CreateInstallationInstallationsCreateEvent$inboundSchema
  ).optional(),
  updateEvent: z.lazy(() =>
    CreateInstallationInstallationsUpdateEvent$inboundSchema
  ).optional(),
  deleteEvent: z.lazy(() =>
    CreateInstallationInstallationsDeleteEvent$inboundSchema
  ).optional(),
});

/** @internal */
export type CreateInstallationSubscribeConfigObject$Outbound = {
  inheritFieldsAndMappings: boolean;
  objectName: string;
  destination: string;
  createEvent?: CreateInstallationInstallationsCreateEvent$Outbound | undefined;
  updateEvent?: CreateInstallationInstallationsUpdateEvent$Outbound | undefined;
  deleteEvent?: CreateInstallationInstallationsDeleteEvent$Outbound | undefined;
};

/** @internal */
export const CreateInstallationSubscribeConfigObject$outboundSchema: z.ZodType<
  CreateInstallationSubscribeConfigObject$Outbound,
  z.ZodTypeDef,
  CreateInstallationSubscribeConfigObject
> = z.object({
  inheritFieldsAndMappings: z.boolean(),
  objectName: z.string(),
  destination: z.string(),
  createEvent: z.lazy(() =>
    CreateInstallationInstallationsCreateEvent$outboundSchema
  ).optional(),
  updateEvent: z.lazy(() =>
    CreateInstallationInstallationsUpdateEvent$outboundSchema
  ).optional(),
  deleteEvent: z.lazy(() =>
    CreateInstallationInstallationsDeleteEvent$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationSubscribeConfigObject$ {
  /** @deprecated use `CreateInstallationSubscribeConfigObject$inboundSchema` instead. */
  export const inboundSchema =
    CreateInstallationSubscribeConfigObject$inboundSchema;
  /** @deprecated use `CreateInstallationSubscribeConfigObject$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationSubscribeConfigObject$outboundSchema;
  /** @deprecated use `CreateInstallationSubscribeConfigObject$Outbound` instead. */
  export type Outbound = CreateInstallationSubscribeConfigObject$Outbound;
}

export function createInstallationSubscribeConfigObjectToJSON(
  createInstallationSubscribeConfigObject:
    CreateInstallationSubscribeConfigObject,
): string {
  return JSON.stringify(
    CreateInstallationSubscribeConfigObject$outboundSchema.parse(
      createInstallationSubscribeConfigObject,
    ),
  );
}

export function createInstallationSubscribeConfigObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateInstallationSubscribeConfigObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateInstallationSubscribeConfigObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateInstallationSubscribeConfigObject' from JSON`,
  );
}

/** @internal */
export const CreateInstallationSubscribeConfig$inboundSchema: z.ZodType<
  CreateInstallationSubscribeConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.record(
    z.lazy(() => CreateInstallationSubscribeConfigObject$inboundSchema),
  ),
});

/** @internal */
export type CreateInstallationSubscribeConfig$Outbound = {
  objects: { [k: string]: CreateInstallationSubscribeConfigObject$Outbound };
};

/** @internal */
export const CreateInstallationSubscribeConfig$outboundSchema: z.ZodType<
  CreateInstallationSubscribeConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationSubscribeConfig
> = z.object({
  objects: z.record(
    z.lazy(() => CreateInstallationSubscribeConfigObject$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationSubscribeConfig$ {
  /** @deprecated use `CreateInstallationSubscribeConfig$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationSubscribeConfig$inboundSchema;
  /** @deprecated use `CreateInstallationSubscribeConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreateInstallationSubscribeConfig$outboundSchema;
  /** @deprecated use `CreateInstallationSubscribeConfig$Outbound` instead. */
  export type Outbound = CreateInstallationSubscribeConfig$Outbound;
}

export function createInstallationSubscribeConfigToJSON(
  createInstallationSubscribeConfig: CreateInstallationSubscribeConfig,
): string {
  return JSON.stringify(
    CreateInstallationSubscribeConfig$outboundSchema.parse(
      createInstallationSubscribeConfig,
    ),
  );
}

export function createInstallationSubscribeConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationSubscribeConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationSubscribeConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationSubscribeConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationConfigContent$inboundSchema: z.ZodType<
  CreateInstallationConfigContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
  read: z.lazy(() => CreateInstallationReadConfig$inboundSchema).optional(),
  write: z.lazy(() => CreateInstallationWriteConfig$inboundSchema).optional(),
  proxy: z.lazy(() => CreateInstallationBaseProxyConfig$inboundSchema)
    .optional(),
  subscribe: z.lazy(() => CreateInstallationSubscribeConfig$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateInstallationConfigContent$Outbound = {
  provider: string;
  read?: CreateInstallationReadConfig$Outbound | undefined;
  write?: CreateInstallationWriteConfig$Outbound | undefined;
  proxy?: CreateInstallationBaseProxyConfig$Outbound | undefined;
  subscribe?: CreateInstallationSubscribeConfig$Outbound | undefined;
};

/** @internal */
export const CreateInstallationConfigContent$outboundSchema: z.ZodType<
  CreateInstallationConfigContent$Outbound,
  z.ZodTypeDef,
  CreateInstallationConfigContent
> = z.object({
  provider: z.string(),
  read: z.lazy(() => CreateInstallationReadConfig$outboundSchema).optional(),
  write: z.lazy(() => CreateInstallationWriteConfig$outboundSchema).optional(),
  proxy: z.lazy(() => CreateInstallationBaseProxyConfig$outboundSchema)
    .optional(),
  subscribe: z.lazy(() => CreateInstallationSubscribeConfig$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationConfigContent$ {
  /** @deprecated use `CreateInstallationConfigContent$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationConfigContent$inboundSchema;
  /** @deprecated use `CreateInstallationConfigContent$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationConfigContent$outboundSchema;
  /** @deprecated use `CreateInstallationConfigContent$Outbound` instead. */
  export type Outbound = CreateInstallationConfigContent$Outbound;
}

export function createInstallationConfigContentToJSON(
  createInstallationConfigContent: CreateInstallationConfigContent,
): string {
  return JSON.stringify(
    CreateInstallationConfigContent$outboundSchema.parse(
      createInstallationConfigContent,
    ),
  );
}

export function createInstallationConfigContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationConfigContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationConfigContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationConfigContent' from JSON`,
  );
}

/** @internal */
export const CreateInstallationConfig$inboundSchema: z.ZodType<
  CreateInstallationConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  content: z.lazy(() => CreateInstallationConfigContent$inboundSchema),
});

/** @internal */
export type CreateInstallationConfig$Outbound = {
  id: string;
  revisionId: string;
  createTime: string;
  createdBy: string;
  content: CreateInstallationConfigContent$Outbound;
};

/** @internal */
export const CreateInstallationConfig$outboundSchema: z.ZodType<
  CreateInstallationConfig$Outbound,
  z.ZodTypeDef,
  CreateInstallationConfig
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  content: z.lazy(() => CreateInstallationConfigContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationConfig$ {
  /** @deprecated use `CreateInstallationConfig$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationConfig$inboundSchema;
  /** @deprecated use `CreateInstallationConfig$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationConfig$outboundSchema;
  /** @deprecated use `CreateInstallationConfig$Outbound` instead. */
  export type Outbound = CreateInstallationConfig$Outbound;
}

export function createInstallationConfigToJSON(
  createInstallationConfig: CreateInstallationConfig,
): string {
  return JSON.stringify(
    CreateInstallationConfig$outboundSchema.parse(createInstallationConfig),
  );
}

export function createInstallationConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationConfig' from JSON`,
  );
}

/** @internal */
export const CreateInstallationInstallation$inboundSchema: z.ZodType<
  CreateInstallationInstallation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => CreateInstallationGroup$inboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => CreateInstallationConnection$inboundSchema),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  config: z.lazy(() => CreateInstallationConfig$inboundSchema),
});

/** @internal */
export type CreateInstallationInstallation$Outbound = {
  id: string;
  projectId: string;
  integrationId: string;
  group?: CreateInstallationGroup$Outbound | undefined;
  healthStatus: string;
  connection: CreateInstallationConnection$Outbound;
  createTime: string;
  createdBy: string;
  updateTime?: string | undefined;
  config: CreateInstallationConfig$Outbound;
};

/** @internal */
export const CreateInstallationInstallation$outboundSchema: z.ZodType<
  CreateInstallationInstallation$Outbound,
  z.ZodTypeDef,
  CreateInstallationInstallation
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => CreateInstallationGroup$outboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => CreateInstallationConnection$outboundSchema),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  config: z.lazy(() => CreateInstallationConfig$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationInstallation$ {
  /** @deprecated use `CreateInstallationInstallation$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationInstallation$inboundSchema;
  /** @deprecated use `CreateInstallationInstallation$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationInstallation$outboundSchema;
  /** @deprecated use `CreateInstallationInstallation$Outbound` instead. */
  export type Outbound = CreateInstallationInstallation$Outbound;
}

export function createInstallationInstallationToJSON(
  createInstallationInstallation: CreateInstallationInstallation,
): string {
  return JSON.stringify(
    CreateInstallationInstallation$outboundSchema.parse(
      createInstallationInstallation,
    ),
  );
}

export function createInstallationInstallationFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationInstallation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationInstallation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationInstallation' from JSON`,
  );
}

/** @internal */
export const CreateInstallationResponse$inboundSchema: z.ZodType<
  CreateInstallationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateInstallationInstallation$inboundSchema),
  z.lazy(() => CreateInstallationAPIProblem$inboundSchema),
]);

/** @internal */
export type CreateInstallationResponse$Outbound =
  | CreateInstallationInstallation$Outbound
  | CreateInstallationAPIProblem$Outbound;

/** @internal */
export const CreateInstallationResponse$outboundSchema: z.ZodType<
  CreateInstallationResponse$Outbound,
  z.ZodTypeDef,
  CreateInstallationResponse
> = z.union([
  z.lazy(() => CreateInstallationInstallation$outboundSchema),
  z.lazy(() => CreateInstallationAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInstallationResponse$ {
  /** @deprecated use `CreateInstallationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateInstallationResponse$inboundSchema;
  /** @deprecated use `CreateInstallationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateInstallationResponse$outboundSchema;
  /** @deprecated use `CreateInstallationResponse$Outbound` instead. */
  export type Outbound = CreateInstallationResponse$Outbound;
}

export function createInstallationResponseToJSON(
  createInstallationResponse: CreateInstallationResponse,
): string {
  return JSON.stringify(
    CreateInstallationResponse$outboundSchema.parse(createInstallationResponse),
  );
}

export function createInstallationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateInstallationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInstallationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInstallationResponse' from JSON`,
  );
}
