/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GenerateUploadUrlAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * Signed URL
 */
export type GenerateUploadURLSignedURL = {
  /**
   * The signed URL to upload the zip file to.
   */
  url: string;
  /**
   * The bucket (will match the bucket part of the url).
   */
  bucket: string;
  /**
   * The path (will match the path part of the url).
   */
  path: string;
};

export type GenerateUploadUrlResponse =
  | GenerateUploadURLSignedURL
  | GenerateUploadUrlAPIProblem;

/** @internal */
export const GenerateUploadUrlAPIProblem$inboundSchema: z.ZodType<
  GenerateUploadUrlAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GenerateUploadUrlAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GenerateUploadUrlAPIProblem$outboundSchema: z.ZodType<
  GenerateUploadUrlAPIProblem$Outbound,
  z.ZodTypeDef,
  GenerateUploadUrlAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateUploadUrlAPIProblem$ {
  /** @deprecated use `GenerateUploadUrlAPIProblem$inboundSchema` instead. */
  export const inboundSchema = GenerateUploadUrlAPIProblem$inboundSchema;
  /** @deprecated use `GenerateUploadUrlAPIProblem$outboundSchema` instead. */
  export const outboundSchema = GenerateUploadUrlAPIProblem$outboundSchema;
  /** @deprecated use `GenerateUploadUrlAPIProblem$Outbound` instead. */
  export type Outbound = GenerateUploadUrlAPIProblem$Outbound;
}

export function generateUploadUrlAPIProblemToJSON(
  generateUploadUrlAPIProblem: GenerateUploadUrlAPIProblem,
): string {
  return JSON.stringify(
    GenerateUploadUrlAPIProblem$outboundSchema.parse(
      generateUploadUrlAPIProblem,
    ),
  );
}

export function generateUploadUrlAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<GenerateUploadUrlAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateUploadUrlAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateUploadUrlAPIProblem' from JSON`,
  );
}

/** @internal */
export const GenerateUploadURLSignedURL$inboundSchema: z.ZodType<
  GenerateUploadURLSignedURL,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  bucket: z.string(),
  path: z.string(),
});

/** @internal */
export type GenerateUploadURLSignedURL$Outbound = {
  url: string;
  bucket: string;
  path: string;
};

/** @internal */
export const GenerateUploadURLSignedURL$outboundSchema: z.ZodType<
  GenerateUploadURLSignedURL$Outbound,
  z.ZodTypeDef,
  GenerateUploadURLSignedURL
> = z.object({
  url: z.string(),
  bucket: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateUploadURLSignedURL$ {
  /** @deprecated use `GenerateUploadURLSignedURL$inboundSchema` instead. */
  export const inboundSchema = GenerateUploadURLSignedURL$inboundSchema;
  /** @deprecated use `GenerateUploadURLSignedURL$outboundSchema` instead. */
  export const outboundSchema = GenerateUploadURLSignedURL$outboundSchema;
  /** @deprecated use `GenerateUploadURLSignedURL$Outbound` instead. */
  export type Outbound = GenerateUploadURLSignedURL$Outbound;
}

export function generateUploadURLSignedURLToJSON(
  generateUploadURLSignedURL: GenerateUploadURLSignedURL,
): string {
  return JSON.stringify(
    GenerateUploadURLSignedURL$outboundSchema.parse(generateUploadURLSignedURL),
  );
}

export function generateUploadURLSignedURLFromJSON(
  jsonString: string,
): SafeParseResult<GenerateUploadURLSignedURL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateUploadURLSignedURL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateUploadURLSignedURL' from JSON`,
  );
}

/** @internal */
export const GenerateUploadUrlResponse$inboundSchema: z.ZodType<
  GenerateUploadUrlResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GenerateUploadURLSignedURL$inboundSchema),
  z.lazy(() => GenerateUploadUrlAPIProblem$inboundSchema),
]);

/** @internal */
export type GenerateUploadUrlResponse$Outbound =
  | GenerateUploadURLSignedURL$Outbound
  | GenerateUploadUrlAPIProblem$Outbound;

/** @internal */
export const GenerateUploadUrlResponse$outboundSchema: z.ZodType<
  GenerateUploadUrlResponse$Outbound,
  z.ZodTypeDef,
  GenerateUploadUrlResponse
> = z.union([
  z.lazy(() => GenerateUploadURLSignedURL$outboundSchema),
  z.lazy(() => GenerateUploadUrlAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateUploadUrlResponse$ {
  /** @deprecated use `GenerateUploadUrlResponse$inboundSchema` instead. */
  export const inboundSchema = GenerateUploadUrlResponse$inboundSchema;
  /** @deprecated use `GenerateUploadUrlResponse$outboundSchema` instead. */
  export const outboundSchema = GenerateUploadUrlResponse$outboundSchema;
  /** @deprecated use `GenerateUploadUrlResponse$Outbound` instead. */
  export type Outbound = GenerateUploadUrlResponse$Outbound;
}

export function generateUploadUrlResponseToJSON(
  generateUploadUrlResponse: GenerateUploadUrlResponse,
): string {
  return JSON.stringify(
    GenerateUploadUrlResponse$outboundSchema.parse(generateUploadUrlResponse),
  );
}

export function generateUploadUrlResponseFromJSON(
  jsonString: string,
): SafeParseResult<GenerateUploadUrlResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateUploadUrlResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateUploadUrlResponse' from JSON`,
  );
}
