/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProjectRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  includeEntitlements?: boolean | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetProjectAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * Whether branding can be removed from the UI library.
 */
export type GetProjectBrandingRemoval = {
  /**
   * Whether branding has been removed from the project.
   */
  value: boolean;
};

/**
 * The entitlements for the project.
 */
export type GetProjectEntitlements = {
  /**
   * Whether branding can be removed from the UI library.
   */
  brandingRemoval?: GetProjectBrandingRemoval | undefined;
};

/**
 * Project
 */
export type GetProjectProject = {
  /**
   * The project ID.
   */
  id: string;
  /**
   * The project name.
   */
  name: string;
  /**
   * The name of the application, which is displayed to end users.
   */
  appName: string;
  /**
   * The organization ID that this project belongs to.
   */
  orgId?: string | undefined;
  /**
   * The time the project was created.
   */
  createTime: Date;
  /**
   * The time the project was updated.
   */
  updateTime?: Date | undefined;
  /**
   * The entitlements for the project.
   */
  entitlements?: GetProjectEntitlements | undefined;
};

export type GetProjectResponse = GetProjectProject | GetProjectAPIProblem;

/** @internal */
export const GetProjectRequest$inboundSchema: z.ZodType<
  GetProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  includeEntitlements: z.boolean().default(false),
});

/** @internal */
export type GetProjectRequest$Outbound = {
  projectIdOrName: string;
  includeEntitlements: boolean;
};

/** @internal */
export const GetProjectRequest$outboundSchema: z.ZodType<
  GetProjectRequest$Outbound,
  z.ZodTypeDef,
  GetProjectRequest
> = z.object({
  projectIdOrName: z.string(),
  includeEntitlements: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectRequest$ {
  /** @deprecated use `GetProjectRequest$inboundSchema` instead. */
  export const inboundSchema = GetProjectRequest$inboundSchema;
  /** @deprecated use `GetProjectRequest$outboundSchema` instead. */
  export const outboundSchema = GetProjectRequest$outboundSchema;
  /** @deprecated use `GetProjectRequest$Outbound` instead. */
  export type Outbound = GetProjectRequest$Outbound;
}

export function getProjectRequestToJSON(
  getProjectRequest: GetProjectRequest,
): string {
  return JSON.stringify(
    GetProjectRequest$outboundSchema.parse(getProjectRequest),
  );
}

export function getProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectRequest' from JSON`,
  );
}

/** @internal */
export const GetProjectAPIProblem$inboundSchema: z.ZodType<
  GetProjectAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetProjectAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetProjectAPIProblem$outboundSchema: z.ZodType<
  GetProjectAPIProblem$Outbound,
  z.ZodTypeDef,
  GetProjectAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectAPIProblem$ {
  /** @deprecated use `GetProjectAPIProblem$inboundSchema` instead. */
  export const inboundSchema = GetProjectAPIProblem$inboundSchema;
  /** @deprecated use `GetProjectAPIProblem$outboundSchema` instead. */
  export const outboundSchema = GetProjectAPIProblem$outboundSchema;
  /** @deprecated use `GetProjectAPIProblem$Outbound` instead. */
  export type Outbound = GetProjectAPIProblem$Outbound;
}

export function getProjectAPIProblemToJSON(
  getProjectAPIProblem: GetProjectAPIProblem,
): string {
  return JSON.stringify(
    GetProjectAPIProblem$outboundSchema.parse(getProjectAPIProblem),
  );
}

export function getProjectAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectAPIProblem' from JSON`,
  );
}

/** @internal */
export const GetProjectBrandingRemoval$inboundSchema: z.ZodType<
  GetProjectBrandingRemoval,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.boolean(),
});

/** @internal */
export type GetProjectBrandingRemoval$Outbound = {
  value: boolean;
};

/** @internal */
export const GetProjectBrandingRemoval$outboundSchema: z.ZodType<
  GetProjectBrandingRemoval$Outbound,
  z.ZodTypeDef,
  GetProjectBrandingRemoval
> = z.object({
  value: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectBrandingRemoval$ {
  /** @deprecated use `GetProjectBrandingRemoval$inboundSchema` instead. */
  export const inboundSchema = GetProjectBrandingRemoval$inboundSchema;
  /** @deprecated use `GetProjectBrandingRemoval$outboundSchema` instead. */
  export const outboundSchema = GetProjectBrandingRemoval$outboundSchema;
  /** @deprecated use `GetProjectBrandingRemoval$Outbound` instead. */
  export type Outbound = GetProjectBrandingRemoval$Outbound;
}

export function getProjectBrandingRemovalToJSON(
  getProjectBrandingRemoval: GetProjectBrandingRemoval,
): string {
  return JSON.stringify(
    GetProjectBrandingRemoval$outboundSchema.parse(getProjectBrandingRemoval),
  );
}

export function getProjectBrandingRemovalFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectBrandingRemoval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectBrandingRemoval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectBrandingRemoval' from JSON`,
  );
}

/** @internal */
export const GetProjectEntitlements$inboundSchema: z.ZodType<
  GetProjectEntitlements,
  z.ZodTypeDef,
  unknown
> = z.object({
  brandingRemoval: z.lazy(() => GetProjectBrandingRemoval$inboundSchema)
    .optional(),
});

/** @internal */
export type GetProjectEntitlements$Outbound = {
  brandingRemoval?: GetProjectBrandingRemoval$Outbound | undefined;
};

/** @internal */
export const GetProjectEntitlements$outboundSchema: z.ZodType<
  GetProjectEntitlements$Outbound,
  z.ZodTypeDef,
  GetProjectEntitlements
> = z.object({
  brandingRemoval: z.lazy(() => GetProjectBrandingRemoval$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectEntitlements$ {
  /** @deprecated use `GetProjectEntitlements$inboundSchema` instead. */
  export const inboundSchema = GetProjectEntitlements$inboundSchema;
  /** @deprecated use `GetProjectEntitlements$outboundSchema` instead. */
  export const outboundSchema = GetProjectEntitlements$outboundSchema;
  /** @deprecated use `GetProjectEntitlements$Outbound` instead. */
  export type Outbound = GetProjectEntitlements$Outbound;
}

export function getProjectEntitlementsToJSON(
  getProjectEntitlements: GetProjectEntitlements,
): string {
  return JSON.stringify(
    GetProjectEntitlements$outboundSchema.parse(getProjectEntitlements),
  );
}

export function getProjectEntitlementsFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectEntitlements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectEntitlements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectEntitlements' from JSON`,
  );
}

/** @internal */
export const GetProjectProject$inboundSchema: z.ZodType<
  GetProjectProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  appName: z.string(),
  orgId: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  entitlements: z.lazy(() => GetProjectEntitlements$inboundSchema).optional(),
});

/** @internal */
export type GetProjectProject$Outbound = {
  id: string;
  name: string;
  appName: string;
  orgId?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  entitlements?: GetProjectEntitlements$Outbound | undefined;
};

/** @internal */
export const GetProjectProject$outboundSchema: z.ZodType<
  GetProjectProject$Outbound,
  z.ZodTypeDef,
  GetProjectProject
> = z.object({
  id: z.string(),
  name: z.string(),
  appName: z.string(),
  orgId: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  entitlements: z.lazy(() => GetProjectEntitlements$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectProject$ {
  /** @deprecated use `GetProjectProject$inboundSchema` instead. */
  export const inboundSchema = GetProjectProject$inboundSchema;
  /** @deprecated use `GetProjectProject$outboundSchema` instead. */
  export const outboundSchema = GetProjectProject$outboundSchema;
  /** @deprecated use `GetProjectProject$Outbound` instead. */
  export type Outbound = GetProjectProject$Outbound;
}

export function getProjectProjectToJSON(
  getProjectProject: GetProjectProject,
): string {
  return JSON.stringify(
    GetProjectProject$outboundSchema.parse(getProjectProject),
  );
}

export function getProjectProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectProject' from JSON`,
  );
}

/** @internal */
export const GetProjectResponse$inboundSchema: z.ZodType<
  GetProjectResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetProjectProject$inboundSchema),
  z.lazy(() => GetProjectAPIProblem$inboundSchema),
]);

/** @internal */
export type GetProjectResponse$Outbound =
  | GetProjectProject$Outbound
  | GetProjectAPIProblem$Outbound;

/** @internal */
export const GetProjectResponse$outboundSchema: z.ZodType<
  GetProjectResponse$Outbound,
  z.ZodTypeDef,
  GetProjectResponse
> = z.union([
  z.lazy(() => GetProjectProject$outboundSchema),
  z.lazy(() => GetProjectAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectResponse$ {
  /** @deprecated use `GetProjectResponse$inboundSchema` instead. */
  export const inboundSchema = GetProjectResponse$inboundSchema;
  /** @deprecated use `GetProjectResponse$outboundSchema` instead. */
  export const outboundSchema = GetProjectResponse$outboundSchema;
  /** @deprecated use `GetProjectResponse$Outbound` instead. */
  export type Outbound = GetProjectResponse$Outbound;
}

export function getProjectResponseToJSON(
  getProjectResponse: GetProjectResponse,
): string {
  return JSON.stringify(
    GetProjectResponse$outboundSchema.parse(getProjectResponse),
  );
}

export function getProjectResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectResponse' from JSON`,
  );
}
