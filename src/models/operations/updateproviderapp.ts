/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The provider app fields to update. (Only include the fields you'd like to update.)
 */
export type ProviderApp = {
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider?: string | undefined;
  /**
   * The OAuth client ID for this app.
   */
  clientId?: string | undefined;
  /**
   * The OAuth client secret for this app.
   */
  clientSecret?: string | undefined;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
};

export type UpdateProviderAppRequestBody = {
  updateMask: Array<string>;
  /**
   * The provider app fields to update. (Only include the fields you'd like to update.)
   */
  providerApp: ProviderApp;
};

export type UpdateProviderAppRequest = {
  /**
   * The Ampersand project ID or project name.
   */
  projectIdOrName: string;
  /**
   * ID of the provider app, returned by the CreateProviderApp call.
   */
  providerAppId: string;
  requestBody: UpdateProviderAppRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type UpdateProviderAppAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The updated provider app
 */
export type UpdateProviderAppProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type UpdateProviderAppResponse =
  | UpdateProviderAppProviderApp
  | UpdateProviderAppAPIProblem;

/** @internal */
export const ProviderApp$inboundSchema: z.ZodType<
  ProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalRef: z.string().optional(),
  provider: z.string().optional(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type ProviderApp$Outbound = {
  externalRef?: string | undefined;
  provider?: string | undefined;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ProviderApp$outboundSchema: z.ZodType<
  ProviderApp$Outbound,
  z.ZodTypeDef,
  ProviderApp
> = z.object({
  externalRef: z.string().optional(),
  provider: z.string().optional(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderApp$ {
  /** @deprecated use `ProviderApp$inboundSchema` instead. */
  export const inboundSchema = ProviderApp$inboundSchema;
  /** @deprecated use `ProviderApp$outboundSchema` instead. */
  export const outboundSchema = ProviderApp$outboundSchema;
  /** @deprecated use `ProviderApp$Outbound` instead. */
  export type Outbound = ProviderApp$Outbound;
}

export function providerAppToJSON(providerApp: ProviderApp): string {
  return JSON.stringify(ProviderApp$outboundSchema.parse(providerApp));
}

export function providerAppFromJSON(
  jsonString: string,
): SafeParseResult<ProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProviderApp' from JSON`,
  );
}

/** @internal */
export const UpdateProviderAppRequestBody$inboundSchema: z.ZodType<
  UpdateProviderAppRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  updateMask: z.array(z.string()),
  providerApp: z.lazy(() => ProviderApp$inboundSchema),
});

/** @internal */
export type UpdateProviderAppRequestBody$Outbound = {
  updateMask: Array<string>;
  providerApp: ProviderApp$Outbound;
};

/** @internal */
export const UpdateProviderAppRequestBody$outboundSchema: z.ZodType<
  UpdateProviderAppRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateProviderAppRequestBody
> = z.object({
  updateMask: z.array(z.string()),
  providerApp: z.lazy(() => ProviderApp$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProviderAppRequestBody$ {
  /** @deprecated use `UpdateProviderAppRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateProviderAppRequestBody$inboundSchema;
  /** @deprecated use `UpdateProviderAppRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateProviderAppRequestBody$outboundSchema;
  /** @deprecated use `UpdateProviderAppRequestBody$Outbound` instead. */
  export type Outbound = UpdateProviderAppRequestBody$Outbound;
}

export function updateProviderAppRequestBodyToJSON(
  updateProviderAppRequestBody: UpdateProviderAppRequestBody,
): string {
  return JSON.stringify(
    UpdateProviderAppRequestBody$outboundSchema.parse(
      updateProviderAppRequestBody,
    ),
  );
}

export function updateProviderAppRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProviderAppRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProviderAppRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProviderAppRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateProviderAppRequest$inboundSchema: z.ZodType<
  UpdateProviderAppRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  providerAppId: z.string(),
  RequestBody: z.lazy(() => UpdateProviderAppRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateProviderAppRequest$Outbound = {
  projectIdOrName: string;
  providerAppId: string;
  RequestBody: UpdateProviderAppRequestBody$Outbound;
};

/** @internal */
export const UpdateProviderAppRequest$outboundSchema: z.ZodType<
  UpdateProviderAppRequest$Outbound,
  z.ZodTypeDef,
  UpdateProviderAppRequest
> = z.object({
  projectIdOrName: z.string(),
  providerAppId: z.string(),
  requestBody: z.lazy(() => UpdateProviderAppRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProviderAppRequest$ {
  /** @deprecated use `UpdateProviderAppRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateProviderAppRequest$inboundSchema;
  /** @deprecated use `UpdateProviderAppRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateProviderAppRequest$outboundSchema;
  /** @deprecated use `UpdateProviderAppRequest$Outbound` instead. */
  export type Outbound = UpdateProviderAppRequest$Outbound;
}

export function updateProviderAppRequestToJSON(
  updateProviderAppRequest: UpdateProviderAppRequest,
): string {
  return JSON.stringify(
    UpdateProviderAppRequest$outboundSchema.parse(updateProviderAppRequest),
  );
}

export function updateProviderAppRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProviderAppRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProviderAppRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProviderAppRequest' from JSON`,
  );
}

/** @internal */
export const UpdateProviderAppAPIProblem$inboundSchema: z.ZodType<
  UpdateProviderAppAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateProviderAppAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateProviderAppAPIProblem$outboundSchema: z.ZodType<
  UpdateProviderAppAPIProblem$Outbound,
  z.ZodTypeDef,
  UpdateProviderAppAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProviderAppAPIProblem$ {
  /** @deprecated use `UpdateProviderAppAPIProblem$inboundSchema` instead. */
  export const inboundSchema = UpdateProviderAppAPIProblem$inboundSchema;
  /** @deprecated use `UpdateProviderAppAPIProblem$outboundSchema` instead. */
  export const outboundSchema = UpdateProviderAppAPIProblem$outboundSchema;
  /** @deprecated use `UpdateProviderAppAPIProblem$Outbound` instead. */
  export type Outbound = UpdateProviderAppAPIProblem$Outbound;
}

export function updateProviderAppAPIProblemToJSON(
  updateProviderAppAPIProblem: UpdateProviderAppAPIProblem,
): string {
  return JSON.stringify(
    UpdateProviderAppAPIProblem$outboundSchema.parse(
      updateProviderAppAPIProblem,
    ),
  );
}

export function updateProviderAppAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProviderAppAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProviderAppAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProviderAppAPIProblem' from JSON`,
  );
}

/** @internal */
export const UpdateProviderAppProviderApp$inboundSchema: z.ZodType<
  UpdateProviderAppProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateProviderAppProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateProviderAppProviderApp$outboundSchema: z.ZodType<
  UpdateProviderAppProviderApp$Outbound,
  z.ZodTypeDef,
  UpdateProviderAppProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProviderAppProviderApp$ {
  /** @deprecated use `UpdateProviderAppProviderApp$inboundSchema` instead. */
  export const inboundSchema = UpdateProviderAppProviderApp$inboundSchema;
  /** @deprecated use `UpdateProviderAppProviderApp$outboundSchema` instead. */
  export const outboundSchema = UpdateProviderAppProviderApp$outboundSchema;
  /** @deprecated use `UpdateProviderAppProviderApp$Outbound` instead. */
  export type Outbound = UpdateProviderAppProviderApp$Outbound;
}

export function updateProviderAppProviderAppToJSON(
  updateProviderAppProviderApp: UpdateProviderAppProviderApp,
): string {
  return JSON.stringify(
    UpdateProviderAppProviderApp$outboundSchema.parse(
      updateProviderAppProviderApp,
    ),
  );
}

export function updateProviderAppProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProviderAppProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProviderAppProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProviderAppProviderApp' from JSON`,
  );
}

/** @internal */
export const UpdateProviderAppResponse$inboundSchema: z.ZodType<
  UpdateProviderAppResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateProviderAppProviderApp$inboundSchema),
  z.lazy(() => UpdateProviderAppAPIProblem$inboundSchema),
]);

/** @internal */
export type UpdateProviderAppResponse$Outbound =
  | UpdateProviderAppProviderApp$Outbound
  | UpdateProviderAppAPIProblem$Outbound;

/** @internal */
export const UpdateProviderAppResponse$outboundSchema: z.ZodType<
  UpdateProviderAppResponse$Outbound,
  z.ZodTypeDef,
  UpdateProviderAppResponse
> = z.union([
  z.lazy(() => UpdateProviderAppProviderApp$outboundSchema),
  z.lazy(() => UpdateProviderAppAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProviderAppResponse$ {
  /** @deprecated use `UpdateProviderAppResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateProviderAppResponse$inboundSchema;
  /** @deprecated use `UpdateProviderAppResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateProviderAppResponse$outboundSchema;
  /** @deprecated use `UpdateProviderAppResponse$Outbound` instead. */
  export type Outbound = UpdateProviderAppResponse$Outbound;
}

export function updateProviderAppResponseToJSON(
  updateProviderAppResponse: UpdateProviderAppResponse,
): string {
  return JSON.stringify(
    UpdateProviderAppResponse$outboundSchema.parse(updateProviderAppResponse),
  );
}

export function updateProviderAppResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProviderAppResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProviderAppResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProviderAppResponse' from JSON`,
  );
}
